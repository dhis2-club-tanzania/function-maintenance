{"version":3,"sources":["../src/stringReplaceAll.js"],"names":["stringReplaceAll","str","matchValue","replaceValue","ignore","replace","RegExp"],"mappings":";;;;;kBASwBA,gB;AATxB;;;;;;;;;AASe,SAASA,gBAAT,CAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,YAA3C,EAAyDC,MAAzD,EAAiE;AAC5E,SAAOH,IAAII,OAAJ,CAAY,IAAIC,MAAJ,CAAWJ,WAAWG,OAAX,CAAmB,iDAAnB,EAAsE,MAAtE,CAAX,EAA2FD,SAAS,IAAT,GAAgB,GAA3G,CAAZ,EAA+H,OAAOD,YAAP,IAAwB,QAAzB,GAAqCA,aAAaE,OAAb,CAAqB,KAArB,EAA4B,MAA5B,CAArC,GAA2EF,YAAzM,CAAP;AACH","file":"stringReplaceAll.js","sourcesContent":["/**\n * Replace all occurrences of the `matchValue` within the `str` parameter.\n *\n * @param {string} str The string to operate on\n * @param {string} matchValue The value to match on\n * @param {string|function} replaceValue The value to replace the matches with\n * @param {boolean} ignore Case sensitivity ignore flag. Pass `true` to ignore case. (Defaults to `false`)\n * @returns {XML|void|string|*} The resulting string.\n */\nexport default function stringReplaceAll(str, matchValue, replaceValue, ignore) {\n    return str.replace(new RegExp(matchValue.replace(/([\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\<\\>\\-\\&])/g, \"\\\\$&\"), (ignore ? \"gi\" : \"g\")), (typeof(replaceValue) == \"string\") ? replaceValue.replace(/\\$/g, \"$$$$\") : replaceValue);\n}\n"]}