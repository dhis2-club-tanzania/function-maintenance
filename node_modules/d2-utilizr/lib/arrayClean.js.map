{"version":3,"sources":["../src/arrayClean.js"],"names":["arrayClean","array","results","i","ln","length","item","push"],"mappings":";;;;;kBAoBwBA,U;;AApBxB;;;;;;AAEA;;;;;;;;;;;;;;;;;AAiBA;AACe,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AACtC,QAAIC,UAAU,EAAd;AAAA,QACIC,IAAI,CADR;AAAA,QAEIC,KAAKH,MAAMI,MAFf;AAAA,QAEsB;AAClBC,QAHJ;;AAKA,WAAOH,IAAIC,EAAX,EAAeD,GAAf,EAAoB;AAChBG,eAAOL,MAAME,CAAN,CAAP;;AAEA,YAAI,CAAC,uBAAQG,IAAR,CAAL,EAAoB;AAChBJ,oBAAQK,IAAR,CAAaD,IAAb;AACH;AACJ;;AAED,WAAOJ,OAAP;AACH","file":"arrayClean.js","sourcesContent":["import isEmpty from './isEmpty';\n\n/**\n * Cleans the given array of _empty_ values\n *\n * @see {isEmpty} for how the values are determined to be empty.\n *\n * @param {Array} array The array to be _cleaned_\n * @returns {Array} The clean array\n *\n * @throws {TypeError} When the passed array is not actually an array.\n *\n * @example\n * const sourceArray = [undefined, null, true, '', {}];\n * arrayClean(sourceArray); // Returns: [true, {}]\n *\n * @example\n * arrayClean() // throws: Cannot read property 'length' of undefined\n */\n// TODO: Could be written as `array.filter(isEmpty);`\nexport default function arrayClean(array) {\n    var results = [],\n        i = 0,\n        ln = array.length,// TODO: throws if the error is undefined\n        item;\n\n    for (; i < ln; i++) {\n        item = array[i];\n\n        if (!isEmpty(item)) {\n            results.push(item);\n        }\n    }\n\n    return results;\n}\n"]}