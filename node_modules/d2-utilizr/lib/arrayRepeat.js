'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = arrayRepeat;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * 
 * Repeats content of array by structure or by index, returns flattened array.
 * 
 * @param   {array}   array 
 * @param   {number}  n 
 * @param   {boolean} [byIndex=false] 
 * @returns {array}
 *
 * @example
 * const values = [1, 2, 3];
 * arrayRepeat(values, 3) // returns: [1, 2, 3, 1, 2, 3, 1, 2, 3]
 *
 * @example
 * const values = [1, 2, 3];
 * arrayRepeat(values, 3, true) // returns: [1, 1, 1, 2, 2, 2, 3, 3, 3]
 */
function arrayRepeat(array) {
    var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var byIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;


    if (typeof array === 'undefined') {
        throw 'Cannot repeat array of type undefined';
    }

    var newArray = [];

    if (byIndex) {

        for (var i = 0; i < array.length; i++) {
            for (var j = 0; j < n; j++) {
                newArray.push(array[i]);
            }
        }

        return newArray;
    }

    for (var _i = 0; _i < n; _i++) {
        newArray.push.apply(newArray, _toConsumableArray(array));
    }

    return newArray;
};
//# sourceMappingURL=arrayRepeat.js.map