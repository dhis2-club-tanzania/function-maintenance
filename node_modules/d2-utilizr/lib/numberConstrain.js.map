{"version":3,"sources":["../src/numberConstrain.js"],"names":["numberConstrain","number","min","max","parseFloat","isNaN","Math"],"mappings":";;;;;kBAQwBA,e;AARxB;;;;;;;;AAQe,SAASA,eAAT,CAAyBC,MAAzB,EAAiCC,GAAjC,EAAsCC,GAAtC,EAA2C;AACtDF,aAASG,WAAWH,MAAX,CAAT;;AAEA,QAAI,CAACI,MAAMH,GAAN,CAAL,EAAiB;AACbD,iBAASK,KAAKH,GAAL,CAASF,MAAT,EAAiBC,GAAjB,CAAT;AACH;AACD,QAAI,CAACG,MAAMF,GAAN,CAAL,EAAiB;AACbF,iBAASK,KAAKJ,GAAL,CAASD,MAAT,EAAiBE,GAAjB,CAAT;AACH;AACD,WAAOF,MAAP;AACH","file":"numberConstrain.js","sourcesContent":["/**\n * Constrains the value between the passed min and max\n *\n * @param {Number} number The value to be constrained\n * @param {Number} min The minumum number that the value should be within\n * @param {Number} max The maximum number that the value should be within\n * @returns {Number|*} The resulting number\n */\nexport default function numberConstrain(number, min, max) {\n    number = parseFloat(number);\n\n    if (!isNaN(min)) {\n        number = Math.max(number, min);\n    }\n    if (!isNaN(max)) {\n        number = Math.min(number, max);\n    }\n    return number;\n}\n"]}