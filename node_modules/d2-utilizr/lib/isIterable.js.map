{"version":3,"sources":["../src/isIterable.js"],"names":["isIterable","checkForIterator","Boolean","Symbol","iterator"],"mappings":";;;;;kBAsBwBA,U;;AAtBxB;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBe,SAASA,UAAT,CAAoBC,gBAApB,EAAsC;AACjD,SAAOC,QAAQ,CAACD,oBAAoB,sBAASA,gBAAT,CAArB,KAAoDA,iBAAiBE,OAAOC,QAAxB,CAA5D,CAAP;AACH","file":"isIterable.js","sourcesContent":["import isString from 'lodash.isstring';\n\n/**\n *\n * @param checkForIterator The value that should be checked\n * @returns {boolean} Returns `true` when the value is iterable, otherwise false.\n *\n * @example\n * isIterable('My value'); // Returns:  true\n *\n * @example\n * isIterable([1, 2, 3]); // Returns: true\n *\n * @example\n * isIterable({}); // Returns: false\n *\n * @example\n * let iterableObject = {\n *     [Symbol.iterator]: () => {}\n * };\n * isIterable(iterableObject); // Returns: true\n */\nexport default function isIterable(checkForIterator) {\n    return Boolean((checkForIterator || isString(checkForIterator)) && checkForIterator[Symbol.iterator]);\n}\n"]}