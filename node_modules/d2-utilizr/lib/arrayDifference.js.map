{"version":3,"sources":["../src/arrayDifference.js"],"names":["arrayDifference","array1","array2","biDirectional","filter","item","concat"],"mappings":";;;;;kBAkBwBA,e;;AAlBxB;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;AAee,SAASA,eAAT,CAAyBC,MAAzB,EAAiCC,MAAjC,EAAyCC,aAAzC,EAAwD;AACnE,WAAO,2BAAYF,OAAOG,MAAP,CAAc,UAASC,IAAT,EAAe;AAC5C,eAAO,CAAC,6BAAcH,MAAd,EAAsBG,IAAtB,CAAR;AACH,KAFkB,EAEhBC,MAFgB,CAETH,kBAAkB,IAAlB,GAAyBD,OAAOE,MAAP,CAAc,UAASC,IAAT,EAAe;AAC5D,eAAO,CAAC,6BAAcJ,MAAd,EAAsBI,IAAtB,CAAR;AACH,KAFkC,CAAzB,GAEL,EAJc,CAAZ,CAAP;AAKH","file":"arrayDifference.js","sourcesContent":["import arrayUnique from './arrayUnique';\nimport arrayContains from './arrayContains';\n\n/**\n *\n * @param {Array} array1\n * @param {Array} array2\n * @param {boolean} biDirectional False returns A-B while true returns A-B concat B-A\n * @returns {Array}\n *\n * @throws {TypeError} When `filter` can not be found on `array`. This generally happens when the array is `null` or `undefined`\n *\n * @example\n * const a = [1, 2];\n * const b = [1, 3];\n * difference(a, b) // returns: [2]\n * difference(a, b, true) // returns: [2, 3]\n */\nexport default function arrayDifference(array1, array2, biDirectional) {\n    return arrayUnique(array1.filter(function(item) {\n        return !arrayContains(array2, item);\n    }).concat(biDirectional === true ? array2.filter(function(item) {\n        return !arrayContains(array1, item);\n    }) : []));\n}\n"]}