{"version":3,"sources":["../src/arraySort.js"],"names":["arraySort","array","direction","key","emptyFirst","sort","a","b","toLowerCase","undefined"],"mappings":";;;;;kBAKwBA,S;;AALxB;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,SAA1B,EAAqCC,GAArC,EAA0CC,UAA1C,EAAsD;AACjE;;AAEA,QAAI,CAAC,uBAAQH,KAAR,CAAL,EAAqB;AACjB;AACH;;AAEDE,UAAM,CAAC,CAACA,GAAF,IAAS,wBAASA,GAAT,CAAT,GAAyBA,GAAzB,GAA+B,MAArC;;AAEAF,UAAMI,IAAN,CAAY,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACvB;AACA,YAAI,wBAASD,CAAT,KAAe,wBAASC,CAAT,CAAnB,EAAgC;AAC5BD,gBAAIA,EAAEH,GAAF,CAAJ;AACAI,gBAAIA,EAAEJ,GAAF,CAAJ;AACH;;AAED;AACA,YAAI,uBAAQG,CAAR,KAAc,uBAAQC,CAAR,CAAlB,EAA8B;AAC1BD,gBAAIA,EAAEH,GAAF,CAAJ;AACAI,gBAAIA,EAAEJ,GAAF,CAAJ;AACH;;AAED;AACA,YAAI,wBAASG,CAAT,KAAe,wBAASC,CAAT,CAAnB,EAAgC;AAC5BD,gBAAIA,EAAEE,WAAF,EAAJ;AACAD,gBAAIA,EAAEC,WAAF,EAAJ;;AAEA,gBAAIN,cAAc,MAAlB,EAA0B;AAAE;AACxB,uBAAOI,IAAIC,CAAJ,GAAQ,CAAR,GAAaD,IAAIC,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAjC;AACH,aAFD,MAGK;AACD,uBAAOD,IAAIC,CAAJ,GAAQ,CAAC,CAAT,GAAcD,IAAIC,CAAJ,GAAQ,CAAR,GAAY,CAAjC;AACH;AACJ;;AAED;AAZA,aAaK,IAAI,wBAASD,CAAT,KAAe,wBAASC,CAAT,CAAnB,EAAgC;AACjC,uBAAOL,cAAc,MAAd,GAAuBK,IAAID,CAA3B,GAA+BA,IAAIC,CAA1C;AACH,aAFI,MAIA,IAAID,MAAMG,SAAN,IAAmBH,MAAM,IAA7B,EAAmC;AACpC,uBAAOF,aAAa,CAAC,CAAd,GAAkB,CAAzB;AACH,aAFI,MAIA,IAAIG,MAAME,SAAN,IAAmBF,MAAM,IAA7B,EAAmC;AACpC,uBAAOH,aAAa,CAAb,GAAiB,CAAC,CAAzB;AACH;;AAED,eAAO,CAAC,CAAR;AACH,KAxCD;;AA0CA,WAAOH,KAAP;AACH","file":"arraySort.js","sourcesContent":["import isString from './isString';\nimport isNumber from './isNumber';\nimport isArray from './isArray';\nimport isObject from './isObject';\n\nexport default function arraySort(array, direction, key, emptyFirst) {\n    // supports [number], [string], [{key: number}], [{key: string}], [[string]], [[number]]\n\n    if (!isArray(array))Â {\n        return;\n    }\n\n    key = !!key || isNumber(key) ? key : 'name';\n\n    array.sort( function(a, b) {\n        // if object, get the property values\n        if (isObject(a) && isObject(b)) {\n            a = a[key];\n            b = b[key];\n        }\n\n        // if array, get from the right index\n        if (isArray(a) && isArray(b)) {\n            a = a[key];\n            b = b[key];\n        }\n\n        // string\n        if (isString(a) && isString(b)) {\n            a = a.toLowerCase();\n            b = b.toLowerCase();\n\n            if (direction === 'DESC') { // TODO: Case sensitive really required? Why not allow `desc`, `Desc` or `dEsC`?\n                return a < b ? 1 : (a > b ? -1 : 0);\n            }\n            else {\n                return a < b ? -1 : (a > b ? 1 : 0);\n            }\n        }\n\n        // number\n        else if (isNumber(a) && isNumber(b)) {\n            return direction === 'DESC' ? b - a : a - b;\n        }\n\n        else if (a === undefined || a === null) {\n            return emptyFirst ? -1 : 1;\n        }\n\n        else if (b === undefined || b === null) {\n            return emptyFirst ? 1 : -1;\n        }\n\n        return -1;\n    });\n\n    return array;\n}\n"]}