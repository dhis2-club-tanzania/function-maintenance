{"version":3,"sources":["../src/arrayTo.js"],"names":["arrayTo","param","a","key","hasOwnProperty","push","split"],"mappings":";;;;;kBAwBwBA,O;;AAxBxB;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBe,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AACnC,QAAI,uBAAQA,KAAR,CAAJ,EAAoB;AAChB,eAAOA,KAAP;AACH;;AAED,QAAI,wBAASA,KAAT,CAAJ,EAAqB;AACjB,YAAIC,IAAI,EAAR;AACA,aAAK,IAAIC,GAAT,IAAgBF,KAAhB,EAAuB;AACnB,gBAAIA,MAAMG,cAAN,CAAqBD,GAArB,CAAJ,EAA+B;AAC3BD,kBAAEG,IAAF,CAAOJ,MAAME,GAAN,CAAP;AACH;AACJ;AACD,eAAOD,CAAP;AACH;;AAED,QAAI,wBAASD,KAAT,CAAJ,EAAqB;AACjB,eAAOA,MAAMK,KAAN,EAAP;AACH;;AAED,WAAO,EAAP;AACH","file":"arrayTo.js","sourcesContent":["import isArray from './isArray';\nimport isObject from './isObject';\nimport isString from './isString';\n\n/**\n * Create an array from the passed `param`. (When the value is an object only takes the iterable properties from the object (not its prototypes))\n *\n * @param {Object|String|Array} param The value to transform to an array\n * @returns {Array} Returns the `param` transformed into an array, or an empty array of the value can not be transformed.\n *\n * @example\n * arrayTo('myData') // Returns: ['myData']\n *\n * @example\n * const sourceObject = {\n *     name: 'ANC First Visit',\n *     shortName: 'ANC1',\n *     level: 1,\n * };\n * arrayTo(sourceObject); // Returns: ['ANC First Visit', 'ANC1', 1]\n *\n * @example\n * arrayTo(null); // Returns: []\n */\nexport default function arrayTo(param) {\n    if (isArray(param)) {\n        return param;\n    }\n\n    if (isObject(param)) {\n        var a = [];\n        for (var key in param) {\n            if (param.hasOwnProperty(key)) {\n                a.push(param[key]);\n            }\n        }\n        return a;\n    }\n\n    if (isString(param)) {\n        return param.split();\n    }\n\n    return [];\n}\n"]}