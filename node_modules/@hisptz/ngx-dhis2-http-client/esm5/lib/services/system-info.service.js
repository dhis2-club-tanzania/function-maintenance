/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { forkJoin, of } from 'rxjs';
import { ManifestService } from './manifest.service';
import { map, switchMap, tap } from 'rxjs/internal/operators';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "./manifest.service";
import * as i2 from "@angular/common/http";
var SystemInfoService = /** @class */ (function () {
    function SystemInfoService(manifestService, httpClient) {
        this.manifestService = manifestService;
        this.httpClient = httpClient;
        this._systemInfoLoaded = false;
    }
    /**
     * @return {?}
     */
    SystemInfoService.prototype.getSystemInfo = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this._systemInfoLoaded ? of(this._systemInfo) :
            this.manifestService.getRootUrl().pipe(switchMap(function (rootUrl) { return forkJoin(_this.httpClient.get(rootUrl + "api/system/info"), _this.httpClient.get(rootUrl + "api/systemSettings")).pipe(map(function (res) {
                return tslib_1.__assign({}, res[0], res[1]);
            }), tap(function (systemInfo) {
                _this._systemInfo = systemInfo;
                _this._systemInfoLoaded = true;
            })); }));
    };
    /**
     * @return {?}
     */
    SystemInfoService.prototype.getSystemVersion = /**
     * @return {?}
     */
    function () {
        return this.getSystemInfo().pipe(map(function (systemInfo) {
            if (!systemInfo) {
                return 0;
            }
            var /** @type {?} */ splitedVersion = systemInfo.version ? systemInfo.version.split('.') : [];
            return parseInt(splitedVersion[1], 10) || 0;
        }));
    };
    SystemInfoService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    SystemInfoService.ctorParameters = function () { return [
        { type: ManifestService },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ SystemInfoService.ngInjectableDef = i0.defineInjectable({ factory: function SystemInfoService_Factory() { return new SystemInfoService(i0.inject(i1.ManifestService), i0.inject(i2.HttpClient)); }, token: SystemInfoService, providedIn: "root" });
    return SystemInfoService;
}());
export { SystemInfoService };
function SystemInfoService_tsickle_Closure_declarations() {
    /** @type {?} */
    SystemInfoService.prototype._systemInfoLoaded;
    /** @type {?} */
    SystemInfoService.prototype._systemInfo;
    /** @type {?} */
    SystemInfoService.prototype.manifestService;
    /** @type {?} */
    SystemInfoService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLWluZm8uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoaXNwdHovbmd4LWRoaXMyLWh0dHAtY2xpZW50LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N5c3RlbS1pbmZvLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxRQUFRLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7O0lBT2hELDJCQUFvQixlQUFnQyxFQUFVLFVBQXNCO1FBQWhFLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUFVLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDbEYsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztLQUNoQzs7OztJQUVELHlDQUFhOzs7SUFBYjtRQUFBLGlCQVVDO1FBVEMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUNwQyxTQUFTLENBQUMsVUFBQyxPQUFlLElBQUssT0FBQSxRQUFRLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUksT0FBTyxvQkFBaUIsQ0FBQyxFQUN0RixLQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBSSxPQUFPLHVCQUFvQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBVTtnQkFDekUsTUFBTSxzQkFBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO2FBQy9CLENBQUMsRUFBRSxHQUFHLENBQUMsVUFBQyxVQUFlO2dCQUN0QixLQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztnQkFDOUIsS0FBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQzthQUMvQixDQUFDLENBQUMsRUFONEIsQ0FNNUIsQ0FBQyxDQUFDLENBQUM7S0FDWDs7OztJQUVNLDRDQUFnQjs7OztRQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxVQUFlO1lBQ25ELEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDaEIsTUFBTSxDQUFDLENBQUMsQ0FBQzthQUNWO1lBQ0QscUJBQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDL0UsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdDLENBQUMsQ0FBQyxDQUFDOzs7Z0JBNUJQLFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7Ozs7Z0JBSnZCLGVBQWU7Z0JBRWYsVUFBVTs7OzRCQUpuQjs7U0FPYSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmb3JrSm9pbiwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE1hbmlmZXN0U2VydmljZSB9IGZyb20gJy4vbWFuaWZlc3Quc2VydmljZSc7XG5pbXBvcnQgeyBtYXAsIHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgU3lzdGVtSW5mb1NlcnZpY2Uge1xuICBwcml2YXRlIF9zeXN0ZW1JbmZvTG9hZGVkOiBib29sZWFuO1xuICBwcml2YXRlIF9zeXN0ZW1JbmZvOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtYW5pZmVzdFNlcnZpY2U6IE1hbmlmZXN0U2VydmljZSwgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7XG4gICAgdGhpcy5fc3lzdGVtSW5mb0xvYWRlZCA9IGZhbHNlO1xuICB9XG5cbiAgZ2V0U3lzdGVtSW5mbygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9zeXN0ZW1JbmZvTG9hZGVkID8gb2YodGhpcy5fc3lzdGVtSW5mbykgOlxuICAgICAgdGhpcy5tYW5pZmVzdFNlcnZpY2UuZ2V0Um9vdFVybCgpLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcCgocm9vdFVybDogc3RyaW5nKSA9PiBmb3JrSm9pbih0aGlzLmh0dHBDbGllbnQuZ2V0KGAke3Jvb3RVcmx9YXBpL3N5c3RlbS9pbmZvYCksXG4gICAgICAgICAgdGhpcy5odHRwQ2xpZW50LmdldChgJHtyb290VXJsfWFwaS9zeXN0ZW1TZXR0aW5nc2ApKS5waXBlKG1hcCgocmVzOiBhbnlbXSkgPT4ge1xuICAgICAgICAgIHJldHVybiB7Li4ucmVzWzBdLCAuLi5yZXNbMV19O1xuICAgICAgICB9KSwgdGFwKChzeXN0ZW1JbmZvOiBhbnkpID0+IHtcbiAgICAgICAgICB0aGlzLl9zeXN0ZW1JbmZvID0gc3lzdGVtSW5mbztcbiAgICAgICAgICB0aGlzLl9zeXN0ZW1JbmZvTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgfSkpKSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U3lzdGVtVmVyc2lvbigpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLmdldFN5c3RlbUluZm8oKS5waXBlKG1hcCgoc3lzdGVtSW5mbzogYW55KSA9PiB7XG4gICAgICBpZiAoIXN5c3RlbUluZm8pIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBjb25zdCBzcGxpdGVkVmVyc2lvbiA9IHN5c3RlbUluZm8udmVyc2lvbiA/IHN5c3RlbUluZm8udmVyc2lvbi5zcGxpdCgnLicpIDogW107XG4gICAgICByZXR1cm4gcGFyc2VJbnQoc3BsaXRlZFZlcnNpb25bMV0sIDEwKSB8fCAwO1xuICAgIH0pKTtcbiAgfVxufVxuIl19