/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { tap, catchError, map } from 'rxjs/internal/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var ManifestService = /** @class */ (function () {
    function ManifestService(httpClient) {
        this.httpClient = httpClient;
        this._defaultRootUrl = '../../../';
        this._manifestLoaded = false;
    }
    /**
     * @return {?}
     */
    ManifestService.prototype.getManifest = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this._manifestLoaded ? of(this._manifest) : this.httpClient.get('manifest.webapp').pipe(catchError(function () {
            console.warn('Manifest file could not be loaded, default options have been used instead');
            return of(null);
        }), tap(function (manifest) {
            _this._manifest = manifest;
            _this._manifestLoaded = true;
        }));
    };
    /**
     * @return {?}
     */
    ManifestService.prototype.getRootUrl = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.getManifest().pipe(map(function (manifest) {
            if (!manifest) {
                return _this._defaultRootUrl;
            }
            return manifest.activities && manifest.activities.dhis && manifest.activities.dhis.href ?
                manifest.activities.dhis.href : _this._defaultRootUrl;
        }));
    };
    ManifestService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    ManifestService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ ManifestService.ngInjectableDef = i0.defineInjectable({ factory: function ManifestService_Factory() { return new ManifestService(i0.inject(i1.HttpClient)); }, token: ManifestService, providedIn: "root" });
    return ManifestService;
}());
export { ManifestService };
function ManifestService_tsickle_Closure_declarations() {
    /** @type {?} */
    ManifestService.prototype._manifest;
    /** @type {?} */
    ManifestService.prototype._defaultRootUrl;
    /** @type {?} */
    ManifestService.prototype._manifestLoaded;
    /** @type {?} */
    ManifestService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuaWZlc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoaXNwdHovbmd4LWRoaXMyLWh0dHAtY2xpZW50LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL21hbmlmZXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0seUJBQXlCLENBQUM7Ozs7SUFRN0QseUJBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDeEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxXQUFXLENBQUM7UUFDbkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7S0FDOUI7Ozs7SUFFTSxxQ0FBVzs7Ozs7UUFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFXLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUN0RyxVQUFVLENBQUM7WUFDVCxPQUFPLENBQUMsSUFBSSxDQUFDLDJFQUEyRSxDQUFDLENBQUM7WUFDMUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQixDQUFDLEVBQ0YsR0FBRyxDQUFDLFVBQUMsUUFBUTtZQUNYLEtBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1lBQzFCLEtBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1NBQzdCLENBQUMsQ0FBQyxDQUFDOzs7OztJQUdELG9DQUFVOzs7OztRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLFFBQWtCO1lBQ3BELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDZCxNQUFNLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQzthQUM3QjtZQUNELE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN2RixRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxlQUFlLENBQUM7U0FDeEQsQ0FBQyxDQUFDLENBQUM7OztnQkE5QlAsVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQzs7OztnQkFMdkIsVUFBVTs7OzBCQURuQjs7U0FPYSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE1hbmlmZXN0IH0gZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YXAsIGNhdGNoRXJyb3IsIG1hcCB9IGZyb20gJ3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgTWFuaWZlc3RTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfbWFuaWZlc3Q6IE1hbmlmZXN0O1xuICBwcml2YXRlIF9kZWZhdWx0Um9vdFVybDogc3RyaW5nO1xuICBwcml2YXRlIF9tYW5pZmVzdExvYWRlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHtcbiAgICB0aGlzLl9kZWZhdWx0Um9vdFVybCA9ICcuLi8uLi8uLi8nO1xuICAgIHRoaXMuX21hbmlmZXN0TG9hZGVkID0gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0TWFuaWZlc3QoKTogT2JzZXJ2YWJsZTxNYW5pZmVzdD4ge1xuICAgIHJldHVybiB0aGlzLl9tYW5pZmVzdExvYWRlZCA/IG9mKHRoaXMuX21hbmlmZXN0KSA6IHRoaXMuaHR0cENsaWVudC5nZXQ8TWFuaWZlc3Q+KCdtYW5pZmVzdC53ZWJhcHAnKS5waXBlKFxuICAgICAgY2F0Y2hFcnJvcigoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUud2FybignTWFuaWZlc3QgZmlsZSBjb3VsZCBub3QgYmUgbG9hZGVkLCBkZWZhdWx0IG9wdGlvbnMgaGF2ZSBiZWVuIHVzZWQgaW5zdGVhZCcpO1xuICAgICAgICByZXR1cm4gb2YobnVsbCk7XG4gICAgICB9KSxcbiAgICAgIHRhcCgobWFuaWZlc3QpID0+IHtcbiAgICAgICAgdGhpcy5fbWFuaWZlc3QgPSBtYW5pZmVzdDtcbiAgICAgICAgdGhpcy5fbWFuaWZlc3RMb2FkZWQgPSB0cnVlO1xuICAgICAgfSkpO1xuICB9XG5cbiAgcHVibGljIGdldFJvb3RVcmwoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRNYW5pZmVzdCgpLnBpcGUobWFwKChtYW5pZmVzdDogTWFuaWZlc3QpID0+IHtcbiAgICAgIGlmICghbWFuaWZlc3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRSb290VXJsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hbmlmZXN0LmFjdGl2aXRpZXMgJiYgbWFuaWZlc3QuYWN0aXZpdGllcy5kaGlzICYmIG1hbmlmZXN0LmFjdGl2aXRpZXMuZGhpcy5ocmVmID9cbiAgICAgICAgbWFuaWZlc3QuYWN0aXZpdGllcy5kaGlzLmhyZWYgOiB0aGlzLl9kZWZhdWx0Um9vdFVybDtcbiAgICB9KSk7XG4gIH1cbn1cbiJdfQ==