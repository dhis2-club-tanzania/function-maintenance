/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ManifestService } from './manifest.service';
import { SystemInfoService } from './system-info.service';
import { throwError } from 'rxjs';
import { catchError, map, mergeMap, switchMap } from 'rxjs/internal/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./manifest.service";
import * as i3 from "./system-info.service";
var NgxDhis2HttpClientService = /** @class */ (function () {
    function NgxDhis2HttpClientService(httpClient, manifestService, systemInfoService) {
        this.httpClient = httpClient;
        this.manifestService = manifestService;
        this.systemInfoService = systemInfoService;
    }
    /**
     * @param {?} url
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype.get = /**
     * @param {?} url
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    function (url, includeVersionNumber, preferPreviousApiVersion, useRootUrl) {
        var _this = this;
        if (includeVersionNumber === void 0) { includeVersionNumber = false; }
        if (preferPreviousApiVersion === void 0) { preferPreviousApiVersion = false; }
        if (useRootUrl === void 0) { useRootUrl = false; }
        var /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(function (rootUrl) {
            return _this.httpClient.get(rootUrl + url).pipe(catchError(_this._handleError));
        }), catchError(this._handleError));
    };
    /**
     * @param {?} url
     * @param {?} data
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @param {?=} headerOptions
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype.post = /**
     * @param {?} url
     * @param {?} data
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @param {?=} headerOptions
     * @return {?}
     */
    function (url, data, includeVersionNumber, preferPreviousApiVersion, useRootUrl, headerOptions) {
        var _this = this;
        if (includeVersionNumber === void 0) { includeVersionNumber = false; }
        if (preferPreviousApiVersion === void 0) { preferPreviousApiVersion = false; }
        if (useRootUrl === void 0) { useRootUrl = false; }
        var /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(function (rootUrl) {
            return _this.httpClient
                .post(rootUrl + url, data)
                .pipe(catchError(_this._handleError));
        }), catchError(this._handleError));
    };
    /**
     * @param {?} url
     * @param {?} data
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype.put = /**
     * @param {?} url
     * @param {?} data
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    function (url, data, includeVersionNumber, preferPreviousApiVersion, useRootUrl) {
        var _this = this;
        if (includeVersionNumber === void 0) { includeVersionNumber = false; }
        if (preferPreviousApiVersion === void 0) { preferPreviousApiVersion = false; }
        if (useRootUrl === void 0) { useRootUrl = false; }
        var /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(function (rootUrl) {
            return _this.httpClient
                .put(rootUrl + url, data)
                .pipe(catchError(_this._handleError));
        }), catchError(this._handleError));
    };
    /**
     * @param {?} url
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype.delete = /**
     * @param {?} url
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    function (url, includeVersionNumber, preferPreviousApiVersion, useRootUrl) {
        var _this = this;
        if (includeVersionNumber === void 0) { includeVersionNumber = false; }
        if (preferPreviousApiVersion === void 0) { preferPreviousApiVersion = false; }
        if (useRootUrl === void 0) { useRootUrl = false; }
        var /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(function (rootUrl) {
            return _this.httpClient
                .delete(rootUrl + url)
                .pipe(catchError(_this._handleError));
        }), catchError(this._handleError));
    };
    /**
     * @param {?} err
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype._handleError = /**
     * @param {?} err
     * @return {?}
     */
    function (err) {
        var /** @type {?} */ error = null;
        if (err.error instanceof ErrorEvent) {
            // A client-side or network error occurred. Handle it accordingly.
            error = {
                message: err.error,
                status: err.status,
                statusText: err.statusText
            };
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            error = {
                message: err.error instanceof Object
                    ? err.error.message
                    : err.error || err.message,
                status: err.status,
                statusText: err.statusText
            };
        }
        return throwError(error);
    };
    /**
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousVersion
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype._getApiRootUrl = /**
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousVersion
     * @return {?}
     */
    function (includeVersionNumber, preferPreviousVersion) {
        var _this = this;
        if (includeVersionNumber === void 0) { includeVersionNumber = false; }
        if (preferPreviousVersion === void 0) { preferPreviousVersion = false; }
        var /** @type {?} */ rootUrlPromise = this.manifestService.getRootUrl().pipe(switchMap(function (rootUrl) {
            return _this.systemInfoService.getSystemVersion().pipe(map(function (version) {
                return {
                    rootUrl: rootUrl,
                    version: version - 1 <= 25 ? version + 1 : version
                };
            }));
        }));
        return rootUrlPromise.pipe(map(function (urlInfo) {
            return urlInfo.rootUrl + "api/" + (includeVersionNumber && !preferPreviousVersion
                ? urlInfo.version + '/'
                : preferPreviousVersion
                    ? urlInfo.version
                        ? urlInfo.version - 1 + '/'
                        : ''
                    : '');
        }));
    };
    NgxDhis2HttpClientService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    NgxDhis2HttpClientService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: ManifestService },
        { type: SystemInfoService }
    ]; };
    /** @nocollapse */ NgxDhis2HttpClientService.ngInjectableDef = i0.defineInjectable({ factory: function NgxDhis2HttpClientService_Factory() { return new NgxDhis2HttpClientService(i0.inject(i1.HttpClient), i0.inject(i2.ManifestService), i0.inject(i3.SystemInfoService)); }, token: NgxDhis2HttpClientService, providedIn: "root" });
    return NgxDhis2HttpClientService;
}());
export { NgxDhis2HttpClientService };
function NgxDhis2HttpClientService_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxDhis2HttpClientService.prototype.httpClient;
    /** @type {?} */
    NgxDhis2HttpClientService.prototype.manifestService;
    /** @type {?} */
    NgxDhis2HttpClientService.prototype.systemInfoService;
}

//# sourceMappingURL=data:application/json;base64,