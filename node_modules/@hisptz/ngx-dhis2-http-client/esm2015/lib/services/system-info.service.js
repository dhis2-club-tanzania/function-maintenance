/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { forkJoin, of } from 'rxjs';
import { ManifestService } from './manifest.service';
import { map, switchMap, tap } from 'rxjs/internal/operators';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "./manifest.service";
import * as i2 from "@angular/common/http";
export class SystemInfoService {
    /**
     * @param {?} manifestService
     * @param {?} httpClient
     */
    constructor(manifestService, httpClient) {
        this.manifestService = manifestService;
        this.httpClient = httpClient;
        this._systemInfoLoaded = false;
    }
    /**
     * @return {?}
     */
    getSystemInfo() {
        return this._systemInfoLoaded ? of(this._systemInfo) :
            this.manifestService.getRootUrl().pipe(switchMap((rootUrl) => forkJoin(this.httpClient.get(`${rootUrl}api/system/info`), this.httpClient.get(`${rootUrl}api/systemSettings`)).pipe(map((res) => {
                return Object.assign({}, res[0], res[1]);
            }), tap((systemInfo) => {
                this._systemInfo = systemInfo;
                this._systemInfoLoaded = true;
            }))));
    }
    /**
     * @return {?}
     */
    getSystemVersion() {
        return this.getSystemInfo().pipe(map((systemInfo) => {
            if (!systemInfo) {
                return 0;
            }
            const /** @type {?} */ splitedVersion = systemInfo.version ? systemInfo.version.split('.') : [];
            return parseInt(splitedVersion[1], 10) || 0;
        }));
    }
}
SystemInfoService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
SystemInfoService.ctorParameters = () => [
    { type: ManifestService },
    { type: HttpClient }
];
/** @nocollapse */ SystemInfoService.ngInjectableDef = i0.defineInjectable({ factory: function SystemInfoService_Factory() { return new SystemInfoService(i0.inject(i1.ManifestService), i0.inject(i2.HttpClient)); }, token: SystemInfoService, providedIn: "root" });
function SystemInfoService_tsickle_Closure_declarations() {
    /** @type {?} */
    SystemInfoService.prototype._systemInfoLoaded;
    /** @type {?} */
    SystemInfoService.prototype._systemInfo;
    /** @type {?} */
    SystemInfoService.prototype.manifestService;
    /** @type {?} */
    SystemInfoService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLWluZm8uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoaXNwdHovbmd4LWRoaXMyLWh0dHAtY2xpZW50LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N5c3RlbS1pbmZvLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7OztBQUdsRCxNQUFNOzs7OztJQUlKLFlBQW9CLGVBQWdDLEVBQVUsVUFBc0I7UUFBaEUsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNsRixJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0tBQ2hDOzs7O0lBRUQsYUFBYTtRQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNwRCxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FDcEMsU0FBUyxDQUFDLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLGlCQUFpQixDQUFDLEVBQ3RGLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQVUsRUFBRSxFQUFFO2dCQUM3RSxNQUFNLG1CQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7YUFDL0IsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQWUsRUFBRSxFQUFFO2dCQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQzthQUMvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDWDs7OztJQUVNLGdCQUFnQjtRQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFlLEVBQUUsRUFBRTtZQUN2RCxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hCLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDVjtZQUNELHVCQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQy9FLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QyxDQUFDLENBQUMsQ0FBQzs7OztZQTVCUCxVQUFVLFNBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDOzs7O1lBSnZCLGVBQWU7WUFFZixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZm9ya0pvaW4sIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBNYW5pZmVzdFNlcnZpY2UgfSBmcm9tICcuL21hbmlmZXN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxuZXhwb3J0IGNsYXNzIFN5c3RlbUluZm9TZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfc3lzdGVtSW5mb0xvYWRlZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfc3lzdGVtSW5mbzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbWFuaWZlc3RTZXJ2aWNlOiBNYW5pZmVzdFNlcnZpY2UsIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge1xuICAgIHRoaXMuX3N5c3RlbUluZm9Mb2FkZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGdldFN5c3RlbUluZm8oKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fc3lzdGVtSW5mb0xvYWRlZCA/IG9mKHRoaXMuX3N5c3RlbUluZm8pIDpcbiAgICAgIHRoaXMubWFuaWZlc3RTZXJ2aWNlLmdldFJvb3RVcmwoKS5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoKHJvb3RVcmw6IHN0cmluZykgPT4gZm9ya0pvaW4odGhpcy5odHRwQ2xpZW50LmdldChgJHtyb290VXJsfWFwaS9zeXN0ZW0vaW5mb2ApLFxuICAgICAgICAgIHRoaXMuaHR0cENsaWVudC5nZXQoYCR7cm9vdFVybH1hcGkvc3lzdGVtU2V0dGluZ3NgKSkucGlwZShtYXAoKHJlczogYW55W10pID0+IHtcbiAgICAgICAgICByZXR1cm4gey4uLnJlc1swXSwgLi4ucmVzWzFdfTtcbiAgICAgICAgfSksIHRhcCgoc3lzdGVtSW5mbzogYW55KSA9PiB7XG4gICAgICAgICAgdGhpcy5fc3lzdGVtSW5mbyA9IHN5c3RlbUluZm87XG4gICAgICAgICAgdGhpcy5fc3lzdGVtSW5mb0xvYWRlZCA9IHRydWU7XG4gICAgICAgIH0pKSkpO1xuICB9XG5cbiAgcHVibGljIGdldFN5c3RlbVZlcnNpb24oKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRTeXN0ZW1JbmZvKCkucGlwZShtYXAoKHN5c3RlbUluZm86IGFueSkgPT4ge1xuICAgICAgaWYgKCFzeXN0ZW1JbmZvKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3BsaXRlZFZlcnNpb24gPSBzeXN0ZW1JbmZvLnZlcnNpb24gPyBzeXN0ZW1JbmZvLnZlcnNpb24uc3BsaXQoJy4nKSA6IFtdO1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHNwbGl0ZWRWZXJzaW9uWzFdLCAxMCkgfHwgMDtcbiAgICB9KSk7XG4gIH1cbn1cbiJdfQ==