/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { tap, catchError, map } from 'rxjs/internal/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class ManifestService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this._defaultRootUrl = '../../../';
        this._manifestLoaded = false;
    }
    /**
     * @return {?}
     */
    getManifest() {
        return this._manifestLoaded ? of(this._manifest) : this.httpClient.get('manifest.webapp').pipe(catchError(() => {
            console.warn('Manifest file could not be loaded, default options have been used instead');
            return of(null);
        }), tap((manifest) => {
            this._manifest = manifest;
            this._manifestLoaded = true;
        }));
    }
    /**
     * @return {?}
     */
    getRootUrl() {
        return this.getManifest().pipe(map((manifest) => {
            if (!manifest) {
                return this._defaultRootUrl;
            }
            return manifest.activities && manifest.activities.dhis && manifest.activities.dhis.href ?
                manifest.activities.dhis.href : this._defaultRootUrl;
        }));
    }
}
ManifestService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
ManifestService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ ManifestService.ngInjectableDef = i0.defineInjectable({ factory: function ManifestService_Factory() { return new ManifestService(i0.inject(i1.HttpClient)); }, token: ManifestService, providedIn: "root" });
function ManifestService_tsickle_Closure_declarations() {
    /** @type {?} */
    ManifestService.prototype._manifest;
    /** @type {?} */
    ManifestService.prototype._defaultRootUrl;
    /** @type {?} */
    ManifestService.prototype._manifestLoaded;
    /** @type {?} */
    ManifestService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuaWZlc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoaXNwdHovbmd4LWRoaXMyLWh0dHAtY2xpZW50LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL21hbmlmZXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0seUJBQXlCLENBQUM7OztBQUcvRCxNQUFNOzs7O0lBS0osWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN4QyxJQUFJLENBQUMsZUFBZSxHQUFHLFdBQVcsQ0FBQztRQUNuQyxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztLQUM5Qjs7OztJQUVNLFdBQVc7UUFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFXLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUN0RyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQywyRUFBMkUsQ0FBQyxDQUFDO1lBQzFGLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakIsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7WUFDMUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7U0FDN0IsQ0FBQyxDQUFDLENBQUM7Ozs7O0lBR0QsVUFBVTtRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQWtCLEVBQUUsRUFBRTtZQUN4RCxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7YUFDN0I7WUFDRCxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdkYsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO1NBQ3hELENBQUMsQ0FBQyxDQUFDOzs7O1lBOUJQLFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7Ozs7WUFMdkIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBNYW5pZmVzdCB9IGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwLCBjYXRjaEVycm9yLCBtYXAgfSBmcm9tICdyeGpzL2ludGVybmFsL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxuZXhwb3J0IGNsYXNzIE1hbmlmZXN0U2VydmljZSB7XG4gIHByaXZhdGUgX21hbmlmZXN0OiBNYW5pZmVzdDtcbiAgcHJpdmF0ZSBfZGVmYXVsdFJvb3RVcmw6IHN0cmluZztcbiAgcHJpdmF0ZSBfbWFuaWZlc3RMb2FkZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7XG4gICAgdGhpcy5fZGVmYXVsdFJvb3RVcmwgPSAnLi4vLi4vLi4vJztcbiAgICB0aGlzLl9tYW5pZmVzdExvYWRlZCA9IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGdldE1hbmlmZXN0KCk6IE9ic2VydmFibGU8TWFuaWZlc3Q+IHtcbiAgICByZXR1cm4gdGhpcy5fbWFuaWZlc3RMb2FkZWQgPyBvZih0aGlzLl9tYW5pZmVzdCkgOiB0aGlzLmh0dHBDbGllbnQuZ2V0PE1hbmlmZXN0PignbWFuaWZlc3Qud2ViYXBwJykucGlwZShcbiAgICAgIGNhdGNoRXJyb3IoKCkgPT4ge1xuICAgICAgICBjb25zb2xlLndhcm4oJ01hbmlmZXN0IGZpbGUgY291bGQgbm90IGJlIGxvYWRlZCwgZGVmYXVsdCBvcHRpb25zIGhhdmUgYmVlbiB1c2VkIGluc3RlYWQnKTtcbiAgICAgICAgcmV0dXJuIG9mKG51bGwpO1xuICAgICAgfSksXG4gICAgICB0YXAoKG1hbmlmZXN0KSA9PiB7XG4gICAgICAgIHRoaXMuX21hbmlmZXN0ID0gbWFuaWZlc3Q7XG4gICAgICAgIHRoaXMuX21hbmlmZXN0TG9hZGVkID0gdHJ1ZTtcbiAgICAgIH0pKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSb290VXJsKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TWFuaWZlc3QoKS5waXBlKG1hcCgobWFuaWZlc3Q6IE1hbmlmZXN0KSA9PiB7XG4gICAgICBpZiAoIW1hbmlmZXN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0Um9vdFVybDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYW5pZmVzdC5hY3Rpdml0aWVzICYmIG1hbmlmZXN0LmFjdGl2aXRpZXMuZGhpcyAmJiBtYW5pZmVzdC5hY3Rpdml0aWVzLmRoaXMuaHJlZiA/XG4gICAgICAgIG1hbmlmZXN0LmFjdGl2aXRpZXMuZGhpcy5ocmVmIDogdGhpcy5fZGVmYXVsdFJvb3RVcmw7XG4gICAgfSkpO1xuICB9XG59XG4iXX0=