/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ManifestService } from './manifest.service';
import { SystemInfoService } from './system-info.service';
import { throwError } from 'rxjs';
import { catchError, map, mergeMap, switchMap } from 'rxjs/internal/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./manifest.service";
import * as i3 from "./system-info.service";
export class NgxDhis2HttpClientService {
    /**
     * @param {?} httpClient
     * @param {?} manifestService
     * @param {?} systemInfoService
     */
    constructor(httpClient, manifestService, systemInfoService) {
        this.httpClient = httpClient;
        this.manifestService = manifestService;
        this.systemInfoService = systemInfoService;
    }
    /**
     * @param {?} url
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    get(url, includeVersionNumber = false, preferPreviousApiVersion = false, useRootUrl = false) {
        const /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(rootUrl => this.httpClient.get(rootUrl + url).pipe(catchError(this._handleError))), catchError(this._handleError));
    }
    /**
     * @param {?} url
     * @param {?} data
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @param {?=} headerOptions
     * @return {?}
     */
    post(url, data, includeVersionNumber = false, preferPreviousApiVersion = false, useRootUrl = false, headerOptions) {
        const /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(rootUrl => this.httpClient
            .post(rootUrl + url, data)
            .pipe(catchError(this._handleError))), catchError(this._handleError));
    }
    /**
     * @param {?} url
     * @param {?} data
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    put(url, data, includeVersionNumber = false, preferPreviousApiVersion = false, useRootUrl = false) {
        const /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(rootUrl => this.httpClient
            .put(rootUrl + url, data)
            .pipe(catchError(this._handleError))), catchError(this._handleError));
    }
    /**
     * @param {?} url
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    delete(url, includeVersionNumber = false, preferPreviousApiVersion = false, useRootUrl = false) {
        const /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(rootUrl => this.httpClient
            .delete(rootUrl + url)
            .pipe(catchError(this._handleError))), catchError(this._handleError));
    }
    /**
     * @param {?} err
     * @return {?}
     */
    _handleError(err) {
        let /** @type {?} */ error = null;
        if (err.error instanceof ErrorEvent) {
            // A client-side or network error occurred. Handle it accordingly.
            error = {
                message: err.error,
                status: err.status,
                statusText: err.statusText
            };
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            error = {
                message: err.error instanceof Object
                    ? err.error.message
                    : err.error || err.message,
                status: err.status,
                statusText: err.statusText
            };
        }
        return throwError(error);
    }
    /**
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousVersion
     * @return {?}
     */
    _getApiRootUrl(includeVersionNumber = false, preferPreviousVersion = false) {
        const /** @type {?} */ rootUrlPromise = this.manifestService.getRootUrl().pipe(switchMap(rootUrl => this.systemInfoService.getSystemVersion().pipe(map((version) => {
            return {
                rootUrl,
                version: version - 1 <= 25 ? version + 1 : version
            };
        }))));
        return rootUrlPromise.pipe(map((urlInfo) => `${urlInfo.rootUrl}api/${includeVersionNumber && !preferPreviousVersion
            ? urlInfo.version + '/'
            : preferPreviousVersion
                ? urlInfo.version
                    ? urlInfo.version - 1 + '/'
                    : ''
                : ''}`));
    }
}
NgxDhis2HttpClientService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
NgxDhis2HttpClientService.ctorParameters = () => [
    { type: HttpClient },
    { type: ManifestService },
    { type: SystemInfoService }
];
/** @nocollapse */ NgxDhis2HttpClientService.ngInjectableDef = i0.defineInjectable({ factory: function NgxDhis2HttpClientService_Factory() { return new NgxDhis2HttpClientService(i0.inject(i1.HttpClient), i0.inject(i2.ManifestService), i0.inject(i3.SystemInfoService)); }, token: NgxDhis2HttpClientService, providedIn: "root" });
function NgxDhis2HttpClientService_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxDhis2HttpClientService.prototype.httpClient;
    /** @type {?} */
    NgxDhis2HttpClientService.prototype.manifestService;
    /** @type {?} */
    NgxDhis2HttpClientService.prototype.systemInfoService;
}

//# sourceMappingURL=data:application/json;base64,