(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs'), require('rxjs/internal/operators')) :
    typeof define === 'function' && define.amd ? define('@hisptz/ngx-dhis2-http-client', ['exports', '@angular/core', '@angular/common/http', 'rxjs', 'rxjs/internal/operators'], factory) :
    (factory((global.hisptz = global.hisptz || {}, global.hisptz['ngx-dhis2-http-client'] = {}),global.ng.core,global.ng.common.http,global.rxjs,global.rxjs['internal/operators']));
}(this, (function (exports,i0,i1,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ManifestService = (function () {
        function ManifestService(httpClient) {
            this.httpClient = httpClient;
            this._defaultRootUrl = '../../../';
            this._manifestLoaded = false;
        }
        /**
         * @return {?}
         */
        ManifestService.prototype.getManifest = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return this._manifestLoaded ? rxjs.of(this._manifest) : this.httpClient.get('manifest.webapp').pipe(operators.catchError(function () {
                    console.warn('Manifest file could not be loaded, default options have been used instead');
                    return rxjs.of(null);
                }), operators.tap(function (manifest) {
                    _this._manifest = manifest;
                    _this._manifestLoaded = true;
                }));
            };
        /**
         * @return {?}
         */
        ManifestService.prototype.getRootUrl = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return this.getManifest().pipe(operators.map(function (manifest) {
                    if (!manifest) {
                        return _this._defaultRootUrl;
                    }
                    return manifest.activities && manifest.activities.dhis && manifest.activities.dhis.href ?
                        manifest.activities.dhis.href : _this._defaultRootUrl;
                }));
            };
        ManifestService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] },
        ];
        /** @nocollapse */
        ManifestService.ctorParameters = function () {
            return [
                { type: i1.HttpClient }
            ];
        };
        /** @nocollapse */ ManifestService.ngInjectableDef = i0.defineInjectable({ factory: function ManifestService_Factory() { return new ManifestService(i0.inject(i1.HttpClient)); }, token: ManifestService, providedIn: "root" });
        return ManifestService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SystemInfoService = (function () {
        function SystemInfoService(manifestService, httpClient) {
            this.manifestService = manifestService;
            this.httpClient = httpClient;
            this._systemInfoLoaded = false;
        }
        /**
         * @return {?}
         */
        SystemInfoService.prototype.getSystemInfo = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return this._systemInfoLoaded ? rxjs.of(this._systemInfo) :
                    this.manifestService.getRootUrl().pipe(operators.switchMap(function (rootUrl) {
                        return rxjs.forkJoin(_this.httpClient.get(rootUrl + "api/system/info"), _this.httpClient.get(rootUrl + "api/systemSettings")).pipe(operators.map(function (res) {
                            return __assign({}, res[0], res[1]);
                        }), operators.tap(function (systemInfo) {
                            _this._systemInfo = systemInfo;
                            _this._systemInfoLoaded = true;
                        }));
                    }));
            };
        /**
         * @return {?}
         */
        SystemInfoService.prototype.getSystemVersion = /**
         * @return {?}
         */
            function () {
                return this.getSystemInfo().pipe(operators.map(function (systemInfo) {
                    if (!systemInfo) {
                        return 0;
                    }
                    var /** @type {?} */ splitedVersion = systemInfo.version ? systemInfo.version.split('.') : [];
                    return parseInt(splitedVersion[1], 10) || 0;
                }));
            };
        SystemInfoService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] },
        ];
        /** @nocollapse */
        SystemInfoService.ctorParameters = function () {
            return [
                { type: ManifestService },
                { type: i1.HttpClient }
            ];
        };
        /** @nocollapse */ SystemInfoService.ngInjectableDef = i0.defineInjectable({ factory: function SystemInfoService_Factory() { return new SystemInfoService(i0.inject(ManifestService), i0.inject(i1.HttpClient)); }, token: SystemInfoService, providedIn: "root" });
        return SystemInfoService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxDhis2HttpClientService = (function () {
        function NgxDhis2HttpClientService(httpClient, manifestService, systemInfoService) {
            this.httpClient = httpClient;
            this.manifestService = manifestService;
            this.systemInfoService = systemInfoService;
        }
        /**
         * @param {?} url
         * @param {?=} includeVersionNumber
         * @param {?=} preferPreviousApiVersion
         * @param {?=} useRootUrl
         * @return {?}
         */
        NgxDhis2HttpClientService.prototype.get = /**
         * @param {?} url
         * @param {?=} includeVersionNumber
         * @param {?=} preferPreviousApiVersion
         * @param {?=} useRootUrl
         * @return {?}
         */
            function (url, includeVersionNumber, preferPreviousApiVersion, useRootUrl) {
                var _this = this;
                if (includeVersionNumber === void 0) {
                    includeVersionNumber = false;
                }
                if (preferPreviousApiVersion === void 0) {
                    preferPreviousApiVersion = false;
                }
                if (useRootUrl === void 0) {
                    useRootUrl = false;
                }
                var /** @type {?} */ rootUrlPromise = useRootUrl
                    ? this.manifestService.getRootUrl()
                    : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
                return rootUrlPromise.pipe(operators.mergeMap(function (rootUrl) {
                    return _this.httpClient.get(rootUrl + url).pipe(operators.catchError(_this._handleError));
                }), operators.catchError(this._handleError));
            };
        /**
         * @param {?} url
         * @param {?} data
         * @param {?=} includeVersionNumber
         * @param {?=} preferPreviousApiVersion
         * @param {?=} useRootUrl
         * @param {?=} headerOptions
         * @return {?}
         */
        NgxDhis2HttpClientService.prototype.post = /**
         * @param {?} url
         * @param {?} data
         * @param {?=} includeVersionNumber
         * @param {?=} preferPreviousApiVersion
         * @param {?=} useRootUrl
         * @param {?=} headerOptions
         * @return {?}
         */
            function (url, data, includeVersionNumber, preferPreviousApiVersion, useRootUrl, headerOptions) {
                var _this = this;
                if (includeVersionNumber === void 0) {
                    includeVersionNumber = false;
                }
                if (preferPreviousApiVersion === void 0) {
                    preferPreviousApiVersion = false;
                }
                if (useRootUrl === void 0) {
                    useRootUrl = false;
                }
                var /** @type {?} */ rootUrlPromise = useRootUrl
                    ? this.manifestService.getRootUrl()
                    : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
                return rootUrlPromise.pipe(operators.mergeMap(function (rootUrl) {
                    return _this.httpClient
                        .post(rootUrl + url, data)
                        .pipe(operators.catchError(_this._handleError));
                }), operators.catchError(this._handleError));
            };
        /**
         * @param {?} url
         * @param {?} data
         * @param {?=} includeVersionNumber
         * @param {?=} preferPreviousApiVersion
         * @param {?=} useRootUrl
         * @return {?}
         */
        NgxDhis2HttpClientService.prototype.put = /**
         * @param {?} url
         * @param {?} data
         * @param {?=} includeVersionNumber
         * @param {?=} preferPreviousApiVersion
         * @param {?=} useRootUrl
         * @return {?}
         */
            function (url, data, includeVersionNumber, preferPreviousApiVersion, useRootUrl) {
                var _this = this;
                if (includeVersionNumber === void 0) {
                    includeVersionNumber = false;
                }
                if (preferPreviousApiVersion === void 0) {
                    preferPreviousApiVersion = false;
                }
                if (useRootUrl === void 0) {
                    useRootUrl = false;
                }
                var /** @type {?} */ rootUrlPromise = useRootUrl
                    ? this.manifestService.getRootUrl()
                    : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
                return rootUrlPromise.pipe(operators.mergeMap(function (rootUrl) {
                    return _this.httpClient
                        .put(rootUrl + url, data)
                        .pipe(operators.catchError(_this._handleError));
                }), operators.catchError(this._handleError));
            };
        /**
         * @param {?} url
         * @param {?=} includeVersionNumber
         * @param {?=} preferPreviousApiVersion
         * @param {?=} useRootUrl
         * @return {?}
         */
        NgxDhis2HttpClientService.prototype.delete = /**
         * @param {?} url
         * @param {?=} includeVersionNumber
         * @param {?=} preferPreviousApiVersion
         * @param {?=} useRootUrl
         * @return {?}
         */
            function (url, includeVersionNumber, preferPreviousApiVersion, useRootUrl) {
                var _this = this;
                if (includeVersionNumber === void 0) {
                    includeVersionNumber = false;
                }
                if (preferPreviousApiVersion === void 0) {
                    preferPreviousApiVersion = false;
                }
                if (useRootUrl === void 0) {
                    useRootUrl = false;
                }
                var /** @type {?} */ rootUrlPromise = useRootUrl
                    ? this.manifestService.getRootUrl()
                    : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
                return rootUrlPromise.pipe(operators.mergeMap(function (rootUrl) {
                    return _this.httpClient
                        .delete(rootUrl + url)
                        .pipe(operators.catchError(_this._handleError));
                }), operators.catchError(this._handleError));
            };
        /**
         * @param {?} err
         * @return {?}
         */
        NgxDhis2HttpClientService.prototype._handleError = /**
         * @param {?} err
         * @return {?}
         */
            function (err) {
                var /** @type {?} */ error = null;
                if (err.error instanceof ErrorEvent) {
                    // A client-side or network error occurred. Handle it accordingly.
                    error = {
                        message: err.error,
                        status: err.status,
                        statusText: err.statusText
                    };
                }
                else {
                    // The backend returned an unsuccessful response code.
                    // The response body may contain clues as to what went wrong,
                    error = {
                        message: err.error instanceof Object
                            ? err.error.message
                            : err.error || err.message,
                        status: err.status,
                        statusText: err.statusText
                    };
                }
                return rxjs.throwError(error);
            };
        /**
         * @param {?=} includeVersionNumber
         * @param {?=} preferPreviousVersion
         * @return {?}
         */
        NgxDhis2HttpClientService.prototype._getApiRootUrl = /**
         * @param {?=} includeVersionNumber
         * @param {?=} preferPreviousVersion
         * @return {?}
         */
            function (includeVersionNumber, preferPreviousVersion) {
                var _this = this;
                if (includeVersionNumber === void 0) {
                    includeVersionNumber = false;
                }
                if (preferPreviousVersion === void 0) {
                    preferPreviousVersion = false;
                }
                var /** @type {?} */ rootUrlPromise = this.manifestService.getRootUrl().pipe(operators.switchMap(function (rootUrl) {
                    return _this.systemInfoService.getSystemVersion().pipe(operators.map(function (version) {
                        return {
                            rootUrl: rootUrl,
                            version: version - 1 <= 25 ? version + 1 : version
                        };
                    }));
                }));
                return rootUrlPromise.pipe(operators.map(function (urlInfo) {
                    return urlInfo.rootUrl + "api/" + (includeVersionNumber && !preferPreviousVersion
                        ? urlInfo.version + '/'
                        : preferPreviousVersion
                            ? urlInfo.version
                                ? urlInfo.version - 1 + '/'
                                : ''
                            : '');
                }));
            };
        NgxDhis2HttpClientService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] },
        ];
        /** @nocollapse */
        NgxDhis2HttpClientService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: ManifestService },
                { type: SystemInfoService }
            ];
        };
        /** @nocollapse */ NgxDhis2HttpClientService.ngInjectableDef = i0.defineInjectable({ factory: function NgxDhis2HttpClientService_Factory() { return new NgxDhis2HttpClientService(i0.inject(i1.HttpClient), i0.inject(ManifestService), i0.inject(SystemInfoService)); }, token: NgxDhis2HttpClientService, providedIn: "root" });
        return NgxDhis2HttpClientService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ services = [ManifestService, SystemInfoService, NgxDhis2HttpClientService];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.services = services;
    exports.ManifestService = ManifestService;
    exports.SystemInfoService = SystemInfoService;
    exports.NgxDhis2HttpClientService = NgxDhis2HttpClientService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,