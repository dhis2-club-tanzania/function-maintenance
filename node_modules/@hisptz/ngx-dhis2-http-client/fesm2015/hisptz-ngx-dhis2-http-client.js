import { Injectable, defineInjectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of, forkJoin, throwError } from 'rxjs';
import { tap, catchError, map, switchMap, mergeMap } from 'rxjs/internal/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ManifestService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this._defaultRootUrl = '../../../';
        this._manifestLoaded = false;
    }
    /**
     * @return {?}
     */
    getManifest() {
        return this._manifestLoaded ? of(this._manifest) : this.httpClient.get('manifest.webapp').pipe(catchError(() => {
            console.warn('Manifest file could not be loaded, default options have been used instead');
            return of(null);
        }), tap((manifest) => {
            this._manifest = manifest;
            this._manifestLoaded = true;
        }));
    }
    /**
     * @return {?}
     */
    getRootUrl() {
        return this.getManifest().pipe(map((manifest) => {
            if (!manifest) {
                return this._defaultRootUrl;
            }
            return manifest.activities && manifest.activities.dhis && manifest.activities.dhis.href ?
                manifest.activities.dhis.href : this._defaultRootUrl;
        }));
    }
}
ManifestService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
ManifestService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ ManifestService.ngInjectableDef = defineInjectable({ factory: function ManifestService_Factory() { return new ManifestService(inject(HttpClient)); }, token: ManifestService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SystemInfoService {
    /**
     * @param {?} manifestService
     * @param {?} httpClient
     */
    constructor(manifestService, httpClient) {
        this.manifestService = manifestService;
        this.httpClient = httpClient;
        this._systemInfoLoaded = false;
    }
    /**
     * @return {?}
     */
    getSystemInfo() {
        return this._systemInfoLoaded ? of(this._systemInfo) :
            this.manifestService.getRootUrl().pipe(switchMap((rootUrl) => forkJoin(this.httpClient.get(`${rootUrl}api/system/info`), this.httpClient.get(`${rootUrl}api/systemSettings`)).pipe(map((res) => {
                return Object.assign({}, res[0], res[1]);
            }), tap((systemInfo) => {
                this._systemInfo = systemInfo;
                this._systemInfoLoaded = true;
            }))));
    }
    /**
     * @return {?}
     */
    getSystemVersion() {
        return this.getSystemInfo().pipe(map((systemInfo) => {
            if (!systemInfo) {
                return 0;
            }
            const /** @type {?} */ splitedVersion = systemInfo.version ? systemInfo.version.split('.') : [];
            return parseInt(splitedVersion[1], 10) || 0;
        }));
    }
}
SystemInfoService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
SystemInfoService.ctorParameters = () => [
    { type: ManifestService },
    { type: HttpClient }
];
/** @nocollapse */ SystemInfoService.ngInjectableDef = defineInjectable({ factory: function SystemInfoService_Factory() { return new SystemInfoService(inject(ManifestService), inject(HttpClient)); }, token: SystemInfoService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxDhis2HttpClientService {
    /**
     * @param {?} httpClient
     * @param {?} manifestService
     * @param {?} systemInfoService
     */
    constructor(httpClient, manifestService, systemInfoService) {
        this.httpClient = httpClient;
        this.manifestService = manifestService;
        this.systemInfoService = systemInfoService;
    }
    /**
     * @param {?} url
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    get(url, includeVersionNumber = false, preferPreviousApiVersion = false, useRootUrl = false) {
        const /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(rootUrl => this.httpClient.get(rootUrl + url).pipe(catchError(this._handleError))), catchError(this._handleError));
    }
    /**
     * @param {?} url
     * @param {?} data
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @param {?=} headerOptions
     * @return {?}
     */
    post(url, data, includeVersionNumber = false, preferPreviousApiVersion = false, useRootUrl = false, headerOptions) {
        const /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(rootUrl => this.httpClient
            .post(rootUrl + url, data)
            .pipe(catchError(this._handleError))), catchError(this._handleError));
    }
    /**
     * @param {?} url
     * @param {?} data
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    put(url, data, includeVersionNumber = false, preferPreviousApiVersion = false, useRootUrl = false) {
        const /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(rootUrl => this.httpClient
            .put(rootUrl + url, data)
            .pipe(catchError(this._handleError))), catchError(this._handleError));
    }
    /**
     * @param {?} url
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    delete(url, includeVersionNumber = false, preferPreviousApiVersion = false, useRootUrl = false) {
        const /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(rootUrl => this.httpClient
            .delete(rootUrl + url)
            .pipe(catchError(this._handleError))), catchError(this._handleError));
    }
    /**
     * @param {?} err
     * @return {?}
     */
    _handleError(err) {
        let /** @type {?} */ error = null;
        if (err.error instanceof ErrorEvent) {
            // A client-side or network error occurred. Handle it accordingly.
            error = {
                message: err.error,
                status: err.status,
                statusText: err.statusText
            };
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            error = {
                message: err.error instanceof Object
                    ? err.error.message
                    : err.error || err.message,
                status: err.status,
                statusText: err.statusText
            };
        }
        return throwError(error);
    }
    /**
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousVersion
     * @return {?}
     */
    _getApiRootUrl(includeVersionNumber = false, preferPreviousVersion = false) {
        const /** @type {?} */ rootUrlPromise = this.manifestService.getRootUrl().pipe(switchMap(rootUrl => this.systemInfoService.getSystemVersion().pipe(map((version) => {
            return {
                rootUrl,
                version: version - 1 <= 25 ? version + 1 : version
            };
        }))));
        return rootUrlPromise.pipe(map((urlInfo) => `${urlInfo.rootUrl}api/${includeVersionNumber && !preferPreviousVersion
            ? urlInfo.version + '/'
            : preferPreviousVersion
                ? urlInfo.version
                    ? urlInfo.version - 1 + '/'
                    : ''
                : ''}`));
    }
}
NgxDhis2HttpClientService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
NgxDhis2HttpClientService.ctorParameters = () => [
    { type: HttpClient },
    { type: ManifestService },
    { type: SystemInfoService }
];
/** @nocollapse */ NgxDhis2HttpClientService.ngInjectableDef = defineInjectable({ factory: function NgxDhis2HttpClientService_Factory() { return new NgxDhis2HttpClientService(inject(HttpClient), inject(ManifestService), inject(SystemInfoService)); }, token: NgxDhis2HttpClientService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ services = [ManifestService, SystemInfoService, NgxDhis2HttpClientService];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { services, ManifestService, SystemInfoService, NgxDhis2HttpClientService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,