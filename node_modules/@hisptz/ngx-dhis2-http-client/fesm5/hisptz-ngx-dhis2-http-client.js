import { Injectable, defineInjectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of, forkJoin, throwError } from 'rxjs';
import { tap, catchError, map, switchMap, mergeMap } from 'rxjs/internal/operators';
import { __assign } from 'tslib';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ManifestService = /** @class */ (function () {
    function ManifestService(httpClient) {
        this.httpClient = httpClient;
        this._defaultRootUrl = '../../../';
        this._manifestLoaded = false;
    }
    /**
     * @return {?}
     */
    ManifestService.prototype.getManifest = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this._manifestLoaded ? of(this._manifest) : this.httpClient.get('manifest.webapp').pipe(catchError(function () {
            console.warn('Manifest file could not be loaded, default options have been used instead');
            return of(null);
        }), tap(function (manifest) {
            _this._manifest = manifest;
            _this._manifestLoaded = true;
        }));
    };
    /**
     * @return {?}
     */
    ManifestService.prototype.getRootUrl = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.getManifest().pipe(map(function (manifest) {
            if (!manifest) {
                return _this._defaultRootUrl;
            }
            return manifest.activities && manifest.activities.dhis && manifest.activities.dhis.href ?
                manifest.activities.dhis.href : _this._defaultRootUrl;
        }));
    };
    ManifestService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    ManifestService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ ManifestService.ngInjectableDef = defineInjectable({ factory: function ManifestService_Factory() { return new ManifestService(inject(HttpClient)); }, token: ManifestService, providedIn: "root" });
    return ManifestService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SystemInfoService = /** @class */ (function () {
    function SystemInfoService(manifestService, httpClient) {
        this.manifestService = manifestService;
        this.httpClient = httpClient;
        this._systemInfoLoaded = false;
    }
    /**
     * @return {?}
     */
    SystemInfoService.prototype.getSystemInfo = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this._systemInfoLoaded ? of(this._systemInfo) :
            this.manifestService.getRootUrl().pipe(switchMap(function (rootUrl) { return forkJoin(_this.httpClient.get(rootUrl + "api/system/info"), _this.httpClient.get(rootUrl + "api/systemSettings")).pipe(map(function (res) {
                return __assign({}, res[0], res[1]);
            }), tap(function (systemInfo) {
                _this._systemInfo = systemInfo;
                _this._systemInfoLoaded = true;
            })); }));
    };
    /**
     * @return {?}
     */
    SystemInfoService.prototype.getSystemVersion = /**
     * @return {?}
     */
    function () {
        return this.getSystemInfo().pipe(map(function (systemInfo) {
            if (!systemInfo) {
                return 0;
            }
            var /** @type {?} */ splitedVersion = systemInfo.version ? systemInfo.version.split('.') : [];
            return parseInt(splitedVersion[1], 10) || 0;
        }));
    };
    SystemInfoService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    SystemInfoService.ctorParameters = function () { return [
        { type: ManifestService },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ SystemInfoService.ngInjectableDef = defineInjectable({ factory: function SystemInfoService_Factory() { return new SystemInfoService(inject(ManifestService), inject(HttpClient)); }, token: SystemInfoService, providedIn: "root" });
    return SystemInfoService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxDhis2HttpClientService = /** @class */ (function () {
    function NgxDhis2HttpClientService(httpClient, manifestService, systemInfoService) {
        this.httpClient = httpClient;
        this.manifestService = manifestService;
        this.systemInfoService = systemInfoService;
    }
    /**
     * @param {?} url
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype.get = /**
     * @param {?} url
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    function (url, includeVersionNumber, preferPreviousApiVersion, useRootUrl) {
        var _this = this;
        if (includeVersionNumber === void 0) { includeVersionNumber = false; }
        if (preferPreviousApiVersion === void 0) { preferPreviousApiVersion = false; }
        if (useRootUrl === void 0) { useRootUrl = false; }
        var /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(function (rootUrl) {
            return _this.httpClient.get(rootUrl + url).pipe(catchError(_this._handleError));
        }), catchError(this._handleError));
    };
    /**
     * @param {?} url
     * @param {?} data
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @param {?=} headerOptions
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype.post = /**
     * @param {?} url
     * @param {?} data
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @param {?=} headerOptions
     * @return {?}
     */
    function (url, data, includeVersionNumber, preferPreviousApiVersion, useRootUrl, headerOptions) {
        var _this = this;
        if (includeVersionNumber === void 0) { includeVersionNumber = false; }
        if (preferPreviousApiVersion === void 0) { preferPreviousApiVersion = false; }
        if (useRootUrl === void 0) { useRootUrl = false; }
        var /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(function (rootUrl) {
            return _this.httpClient
                .post(rootUrl + url, data)
                .pipe(catchError(_this._handleError));
        }), catchError(this._handleError));
    };
    /**
     * @param {?} url
     * @param {?} data
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype.put = /**
     * @param {?} url
     * @param {?} data
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    function (url, data, includeVersionNumber, preferPreviousApiVersion, useRootUrl) {
        var _this = this;
        if (includeVersionNumber === void 0) { includeVersionNumber = false; }
        if (preferPreviousApiVersion === void 0) { preferPreviousApiVersion = false; }
        if (useRootUrl === void 0) { useRootUrl = false; }
        var /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(function (rootUrl) {
            return _this.httpClient
                .put(rootUrl + url, data)
                .pipe(catchError(_this._handleError));
        }), catchError(this._handleError));
    };
    /**
     * @param {?} url
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype.delete = /**
     * @param {?} url
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousApiVersion
     * @param {?=} useRootUrl
     * @return {?}
     */
    function (url, includeVersionNumber, preferPreviousApiVersion, useRootUrl) {
        var _this = this;
        if (includeVersionNumber === void 0) { includeVersionNumber = false; }
        if (preferPreviousApiVersion === void 0) { preferPreviousApiVersion = false; }
        if (useRootUrl === void 0) { useRootUrl = false; }
        var /** @type {?} */ rootUrlPromise = useRootUrl
            ? this.manifestService.getRootUrl()
            : this._getApiRootUrl(includeVersionNumber, preferPreviousApiVersion);
        return rootUrlPromise.pipe(mergeMap(function (rootUrl) {
            return _this.httpClient
                .delete(rootUrl + url)
                .pipe(catchError(_this._handleError));
        }), catchError(this._handleError));
    };
    /**
     * @param {?} err
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype._handleError = /**
     * @param {?} err
     * @return {?}
     */
    function (err) {
        var /** @type {?} */ error = null;
        if (err.error instanceof ErrorEvent) {
            // A client-side or network error occurred. Handle it accordingly.
            error = {
                message: err.error,
                status: err.status,
                statusText: err.statusText
            };
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            error = {
                message: err.error instanceof Object
                    ? err.error.message
                    : err.error || err.message,
                status: err.status,
                statusText: err.statusText
            };
        }
        return throwError(error);
    };
    /**
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousVersion
     * @return {?}
     */
    NgxDhis2HttpClientService.prototype._getApiRootUrl = /**
     * @param {?=} includeVersionNumber
     * @param {?=} preferPreviousVersion
     * @return {?}
     */
    function (includeVersionNumber, preferPreviousVersion) {
        var _this = this;
        if (includeVersionNumber === void 0) { includeVersionNumber = false; }
        if (preferPreviousVersion === void 0) { preferPreviousVersion = false; }
        var /** @type {?} */ rootUrlPromise = this.manifestService.getRootUrl().pipe(switchMap(function (rootUrl) {
            return _this.systemInfoService.getSystemVersion().pipe(map(function (version) {
                return {
                    rootUrl: rootUrl,
                    version: version - 1 <= 25 ? version + 1 : version
                };
            }));
        }));
        return rootUrlPromise.pipe(map(function (urlInfo) {
            return urlInfo.rootUrl + "api/" + (includeVersionNumber && !preferPreviousVersion
                ? urlInfo.version + '/'
                : preferPreviousVersion
                    ? urlInfo.version
                        ? urlInfo.version - 1 + '/'
                        : ''
                    : '');
        }));
    };
    NgxDhis2HttpClientService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    NgxDhis2HttpClientService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: ManifestService },
        { type: SystemInfoService }
    ]; };
    /** @nocollapse */ NgxDhis2HttpClientService.ngInjectableDef = defineInjectable({ factory: function NgxDhis2HttpClientService_Factory() { return new NgxDhis2HttpClientService(inject(HttpClient), inject(ManifestService), inject(SystemInfoService)); }, token: NgxDhis2HttpClientService, providedIn: "root" });
    return NgxDhis2HttpClientService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ services = [ManifestService, SystemInfoService, NgxDhis2HttpClientService];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { services, ManifestService, SystemInfoService, NgxDhis2HttpClientService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,