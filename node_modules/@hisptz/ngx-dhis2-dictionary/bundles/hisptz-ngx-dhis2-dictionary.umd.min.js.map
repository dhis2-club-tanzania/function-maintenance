{"version":3,"sources":["ng://@hisptz/ngx-dhis2-dictionary/lib/store/actions/dictionary.actions.ts","ng://@hisptz/ngx-dhis2-dictionary/lib/store/reducers/dictionary.reducer.ts","ng://@hisptz/ngx-dhis2-dictionary/lib/store/selectors/dictionary.selectors.ts","ng://@hisptz/ngx-dhis2-dictionary/lib/components/dictionary-list/dictionary-list.component.ts","ng://@hisptz/ngx-dhis2-dictionary/lib/components/dictionary-progress/dictionary-progress.component.ts","ng://@hisptz/ngx-dhis2-dictionary/lib/store/effects/dictionary.effects.ts","null","ng://@hisptz/ngx-dhis2-dictionary/lib/ngx-dhis2-dictionary.module.ts"],"names":["InitializeDictionaryMetadataAction","dictionaryMetadataIdentifiers","this","DictionaryActionTypes","AddDictionaryMetadataListAction","dictionaryMetadataList","UpdateDictionaryMetadataAction","dictionaryMetadataId","changes","dictionaryAdapter","createEntityAdapter","initialState","getInitialState","dictionaryReducer","state","action","type","addMany","updateOne","id","getDictionaryState","createFeatureSelector","getDictionaryMetadataEntities","getSelectors","selectEntities","getDictionaryList","metadataIdentifiers","createSelector","dictionaryMetadataEntities","_.filter","_.map","metadataId","metadata","DictionaryListComponent","store","activeItem","prototype","ngOnInit","length","dispatch","dictionaryList$","select","setActiveItem","index","e","stopPropagation","Component","args","selector","template","styles","changeDetection","ChangeDetectionStrategy","OnPush","Store","Input","DictionaryProgressComponent","DictionaryEffects","actions$","httpClient","datePipe","_this","pipe","ofType","mergeMap","map","dictionaryList","_.find","tap","identifiers","name","description","progress","loading","loadingSucceeded","loadingFailed","from","identifier","get","subscribe","href","indexOf","indicatorUrl","getIndicatorInfo","dataElementUrl","getDataElementInfo","dataSetUrl","getDataSetInfo","dataSetId","dataSet","dataSetDescription","formType","transform","created","user","categoryCombo","categories","forEach","category","categoryIndex","categoryOptions","categoryOption","categoryOptionIndex","dataElementId","dataElement","dataElementDescription","aggregationType","domainType","valueType","dataSets","dataSetIndex","dataElementGroups","dataElementGroup","dataElementGroupIndex","indicatorId","indicator","indicatorDescription","indicatorType","numeratorDescription","denominatorDescription","annualized","forkJoin","encodeURIComponent","numerator","getAvailableDataElements","numeratorResults","dataSets_1","dataset","periodType","timelyDays","denominator","denominatorResults","dataSets_2","indicatorGroups","indicatorGroup","indicators","attributeValues","attr","attribute","value","legendSet","legends","symbolizer","data","dataElementUids","split","RegExp","join","dataElementWithCategoryOptionCheck","uid","push","replace","Injectable","Actions","NgxDhis2HttpClientService","DatePipe","__decorate","decorators","target","key","desc","d","c","arguments","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Effect","__metadata","metadataKey","metadataValue","Observable","NgxDhis2DictionaryModule","NgModule","imports","CommonModule","HttpClientModule","StoreModule","forFeature","EffectsModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { Action } from '@ngrx/store';\nimport { MetadataDictionary } from '../../models/dictionary';\n\nexport enum DictionaryActionTypes {\n  InitializeDictionaryMetadata = '[Dictionary] initialize incoming metadata',\n  AddDictionaryMetadataList = '[Dictionary] add dictionary metadata list',\n  UpdateDictionaryMetadata = '[Dictionary] update dictionary metadata list'\n}\n\nexport class InitializeDictionaryMetadataAction implements Action {\n  readonly type = DictionaryActionTypes.InitializeDictionaryMetadata;\n  constructor(public dictionaryMetadataIdentifiers: Array<string>) {}\n}\n\nexport class AddDictionaryMetadataListAction implements Action {\n  readonly type = DictionaryActionTypes.AddDictionaryMetadataList;\n  constructor(public dictionaryMetadataList: MetadataDictionary[]) {}\n}\n\nexport class UpdateDictionaryMetadataAction implements Action {\n  readonly type = DictionaryActionTypes.UpdateDictionaryMetadata;\n  constructor(\n    public dictionaryMetadataId: string,\n    public changes: Partial<MetadataDictionary>\n  ) {}\n}\n\nexport type DictionaryActions =\n  | InitializeDictionaryMetadataAction\n  | AddDictionaryMetadataListAction\n  | UpdateDictionaryMetadataAction;\n","import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity/src/models';\nimport {\n  DictionaryActions,\n  DictionaryActionTypes\n} from '../actions/dictionary.actions';\nimport * as _ from 'lodash';\nimport { MetadataDictionary } from '../../models/dictionary';\n\nexport interface DictionaryState extends EntityState<MetadataDictionary> {}\n\nexport const dictionaryAdapter: EntityAdapter<\n  MetadataDictionary\n> = createEntityAdapter<MetadataDictionary>();\n\nconst initialState: DictionaryState = dictionaryAdapter.getInitialState({});\n\nexport function dictionaryReducer(\n  state: DictionaryState = initialState,\n  action: DictionaryActions\n): DictionaryState {\n  switch (action.type) {\n    case DictionaryActionTypes.AddDictionaryMetadataList: {\n      return dictionaryAdapter.addMany(action.dictionaryMetadataList, state);\n    }\n    case DictionaryActionTypes.UpdateDictionaryMetadata: {\n      return dictionaryAdapter.updateOne(\n        { id: action.dictionaryMetadataId, changes: action.changes },\n        state\n      );\n    }\n  }\n\n  return state;\n}\n\nexport const getDictionaryState = createFeatureSelector<DictionaryState>(\n  'dictionary'\n);\n\nexport const {\n  selectEntities: getDictionaryMetadataEntities\n} = dictionaryAdapter.getSelectors(getDictionaryState);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport * as _ from 'lodash';\nimport { getDictionaryMetadataEntities } from '../reducers/dictionary.reducer';\n\nexport const getDictionaryList = metadataIdentifiers =>\n  createSelector(\n    getDictionaryMetadataEntities,\n    (dictionaryMetadataEntities: any) =>\n      _.filter(\n        _.map(\n          metadataIdentifiers,\n          metadataId => dictionaryMetadataEntities[metadataId]\n        ),\n        metadata => metadata\n      )\n  );\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit\n} from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as _ from 'lodash';\nimport { Observable } from 'rxjs';\nimport { MetadataDictionary } from '../../models/dictionary';\n\nimport { DictionaryState } from '../../store/reducers/dictionary.reducer';\nimport { getDictionaryList } from '../../store/selectors/dictionary.selectors';\nimport { InitializeDictionaryMetadataAction } from '../../store/actions/dictionary.actions';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-dhis2-dictionary-list',\n  template: `<div class=\"dictionary-list-container\">\n  <div\n    class=\"dictionary-item-container\"\n    *ngFor=\"let dictionaryItem of dictionaryList$ | async; let i = index\"\n  >\n    <div\n      class=\"dictionary-title\"\n      (click)=\"setActiveItem(i, $event)\"\n    >\n      <span>{{ dictionaryItem.name }}</span>\n      <div *ngIf=\"!dictionaryItem.name\">\n        <app-dictionary-progress></app-dictionary-progress>\n      </div>\n    </div>\n    <div\n      class=\"dictionary-body\"\n      *ngIf=\"activeItem === i\"\n    >\n      <div class=\"dictionary-description\" [innerHtml]=\"dictionaryItem.description\"></div>\n      <div *ngIf=\"dictionaryItem.progress.loading\">\n        <app-dictionary-progress></app-dictionary-progress>\n      </div>\n    </div>\n  </div>\n</div>\n`,\n  styles: [`.dictionary-list-container{box-shadow:0 0 3px rgba(0,0,0,.3)}.dictionary-item-container{border-bottom:thin solid #ececec}.dictionary-title{padding:5px 10px;cursor:pointer}.dictionary-item-container:last-child{border-bottom-style:none}.dictionary-body{border-top:thin solid #ececec;padding:10px}.dictionary-description{text-align:justify}`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DictionaryListComponent implements OnInit {\n  @Input() metadataIdentifiers: Array<string>;\n  dictionaryList$: Observable<MetadataDictionary[]>;\n  activeItem: number;\n\n  constructor(private store: Store<DictionaryState>) {\n    this.activeItem = 0;\n  }\n\n  ngOnInit() {\n    if (this.metadataIdentifiers.length > 0) {\n      this.store.dispatch(\n        new InitializeDictionaryMetadataAction(this.metadataIdentifiers)\n      );\n\n      this.dictionaryList$ = this.store.select(\n        getDictionaryList(this.metadataIdentifiers)\n      );\n    }\n  }\n\n  setActiveItem(index, e) {\n    e.stopPropagation();\n    if (this.activeItem === index) {\n      this.activeItem = -1;\n    } else {\n      this.activeItem = index;\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'app-dictionary-progress',\n  template: `<div class=\"dictionary-progress\">\n    <div class=\"animated-background\"></div>\n</div>`,\n  styles: [`.dictionary-progress div{height:5px;margin-top:3px}@-webkit-keyframes placeHolderShimmer{0%{background-position:-468px 0}100%{background-position:468px 0}}@keyframes placeHolderShimmer{0%{background-position:-468px 0}100%{background-position:468px 0}}.animated-background{-webkit-animation-duration:1.5s;animation-duration:1.5s;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-name:placeHolderShimmer;animation-name:placeHolderShimmer;-webkit-animation-timing-function:linear;animation-timing-function:linear;background:#f6f7f8;background:linear-gradient(to right,#eee 8%,#ddd 18%,#eee 33%);background-size:800px 104px;height:100%;position:relative}`]\n})\nexport class DictionaryProgressComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { Injectable } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { Store } from '@ngrx/store';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport * as _ from 'lodash';\nimport { mergeMap, map, tap } from 'rxjs/operators';\nimport { Observable, from, forkJoin } from 'rxjs';\n\nimport { NgxDhis2HttpClientService } from '@hisptz/ngx-dhis2-http-client';\nimport { DictionaryState } from '../reducers/dictionary.reducer';\n\nimport {\n  DictionaryActionTypes,\n  InitializeDictionaryMetadataAction,\n  AddDictionaryMetadataListAction,\n  UpdateDictionaryMetadataAction\n} from '../actions/dictionary.actions';\nimport { getDictionaryList } from '../selectors/dictionary.selectors';\n\n@Injectable()\nexport class DictionaryEffects {\n  constructor(\n    private actions$: Actions,\n    private store: Store<DictionaryState>,\n    private httpClient: NgxDhis2HttpClientService,\n    private datePipe: DatePipe\n  ) {}\n\n  @Effect({ dispatch: false })\n  initializeDictionary$: Observable<any> = this.actions$.pipe(\n    ofType(DictionaryActionTypes.InitializeDictionaryMetadata),\n    mergeMap((action: InitializeDictionaryMetadataAction) =>\n      this.store\n        .select(getDictionaryList(action.dictionaryMetadataIdentifiers))\n        .pipe(\n          map((dictionaryList: any[]) =>\n            _.filter(\n              action.dictionaryMetadataIdentifiers,\n              metadataId => !_.find(dictionaryList, ['id', metadataId])\n            )\n          )\n        )\n    ),\n    tap(identifiers => {\n      /**\n       * Add incoming items to the dictionary list\n       */\n      this.store.dispatch(\n        new AddDictionaryMetadataListAction(\n          _.map(identifiers, id => {\n            return {\n              id,\n              name: '',\n              description: '',\n              progress: {\n                loading: true,\n                loadingSucceeded: false,\n                loadingFailed: false\n              }\n            };\n          })\n        )\n      );\n      /**\n       * Identify corresponding dictionary items\n       */\n      from(identifiers)\n        .pipe(\n          mergeMap(identifier =>\n            this.httpClient.get(`identifiableObjects/${identifier}.json`, true)\n          )\n        )\n        .subscribe((metadata: any) => {\n          this.store.dispatch(\n            new UpdateDictionaryMetadataAction(metadata.id, {\n              name: metadata.name,\n              progress: {\n                loading: true,\n                loadingSucceeded: true,\n                loadingFailed: false\n              }\n            })\n          );\n\n          if (metadata.href && metadata.href.indexOf('indicator') !== -1) {\n            const indicatorUrl =\n              'indicators/' +\n              metadata.id +\n              '.json?fields=:all,displayName,id,name,numeratorDescription,' +\n              'denominatorDescription,denominator,numerator,annualized,decimals,indicatorType[name],user[name],' +\n              'attributeValues[value,attribute[name]],indicatorGroups[name,indicators~size],legendSet[name,symbolizer,' +\n              'legends~size],dataSets[name]';\n            this.getIndicatorInfo(indicatorUrl, metadata.id);\n          } else if (\n            metadata.href &&\n            metadata.href.indexOf('dataElement') !== -1\n          ) {\n            const dataElementUrl =\n              'dataElements/' +\n              metadata.id +\n              '.json?fields=:all,id,name,aggregationType,displayName,' +\n              'categoryCombo[id,name,categories[id,name,categoryOptions[id,name]]],dataSets[:all,!compulsoryDataElementOperands]';\n            this.getDataElementInfo(dataElementUrl, metadata.id);\n          } else if (metadata.href && metadata.href.indexOf('dataSet') !== -1) {\n            const dataSetUrl =\n              'dataSets/' +\n              metadata.id +\n              '.json?fields=:all,user[:all],id,name,periodType,shortName,' +\n              'categoryCombo[id,name,categories[id,name,categoryOptions[id,name]]]';\n            this.getDataSetInfo(dataSetUrl, metadata.id);\n          }\n        });\n    })\n  );\n\n  getDataSetInfo(dataSetUrl: string, dataSetId: string) {\n    this.httpClient.get(`${dataSetUrl}`, true).subscribe((dataSet: any) => {\n      let dataSetDescription =\n        '<p>' +\n        dataSet.name +\n        ' of the <strong>' +\n        dataSet.formType +\n        '</strong> Form created ' +\n        'at <strong>' +\n        this.datePipe.transform(dataSet.created) +\n        ' by ' +\n        dataSet.user.name +\n        '</strong>';\n\n      if (dataSet.categoryCombo && dataSet.categoryCombo.name !== 'default') {\n        dataSetDescription +=\n          '<span> With <strong>' +\n          dataSet.categoryCombo.name +\n          '</strong> Dimension which is divided' +\n          ' into ';\n\n        dataSet.categoryCombo.categories.forEach((category, categoryIndex) => {\n          if (\n            categoryIndex !== 0 &&\n            categoryIndex !== dataSet.categoryCombo.categories.length - 1\n          ) {\n            dataSetDescription += ', ';\n          }\n\n          if (\n            categoryIndex === dataSet.categoryCombo.categories.length - 1 &&\n            dataSet.categoryCombo.categories.length > 1\n          ) {\n            dataSetDescription += ' and ';\n          }\n\n          dataSetDescription += '<strong>';\n\n          category.categoryOptions.forEach(\n            (categoryOption, categoryOptionIndex) => {\n              if (\n                categoryOptionIndex !== 0 &&\n                categoryOptionIndex !== category.categoryOptions.length - 1\n              ) {\n                dataSetDescription += ', ';\n              }\n\n              if (\n                categoryOptionIndex === category.categoryOptions.length - 1 &&\n                category.categoryOptions.length > 1\n              ) {\n                dataSetDescription += ' and ';\n              }\n\n              dataSetDescription += '<span>' + categoryOption.name + '</span>';\n            }\n          );\n\n          dataSetDescription += '</strong>';\n        });\n\n        dataSetDescription += '</span>';\n      }\n\n      dataSetDescription += '</p>';\n\n      this.store.dispatch(\n        new UpdateDictionaryMetadataAction(dataSetId, {\n          description: dataSetDescription,\n          progress: {\n            loading: false,\n            loadingSucceeded: true,\n            loadingFailed: false\n          }\n        })\n      );\n    });\n  }\n\n  getDataElementInfo(dataElementUrl: string, dataElementId: string) {\n    this.httpClient\n      .get(`${dataElementUrl}`, true)\n      .subscribe((dataElement: any) => {\n        let dataElementDescription =\n          '<p>This ' +\n          dataElement.name +\n          ' of this method of data aggregation <strong>' +\n          dataElement.aggregationType +\n          '</strong> created at <strong>' +\n          this.datePipe.transform(dataElement.created) +\n          '</strong> is only taking <strong>' +\n          dataElement.domainType +\n          '</strong> data. As the culture of helping user ' +\n          'not entering unrecognized data, therefore its only taking <strong>' +\n          dataElement.valueType +\n          '</strong> values ' +\n          'from the user input</p>';\n\n        if (dataElement.categoryCombo.name !== 'default') {\n          dataElementDescription +=\n            '<p><strong>' +\n            dataElement.name +\n            '</strong> consists of <strong>' +\n            dataElement.categoryCombo.name +\n            '</strong> category combinations of ';\n\n          dataElement.categoryCombo.categories.forEach((category, index) => {\n            if (\n              index !== 0 &&\n              index !== dataElement.categoryCombo.categories.length - 1\n            ) {\n              dataElementDescription += ', ';\n            }\n\n            if (\n              index === dataElement.categoryCombo.categories.length - 1 &&\n              dataElement.categoryCombo.categories.length > 1\n            ) {\n              dataElementDescription += ' and ';\n            }\n\n            dataElementDescription += '<strong>(';\n            category.categoryOptions.forEach(\n              (categoryOption, categoryOptionIndex) => {\n                if (\n                  categoryOptionIndex !== 0 &&\n                  categoryOptionIndex !== category.categoryOptions.length - 1\n                ) {\n                  dataElementDescription += ', ';\n                }\n\n                if (\n                  categoryOptionIndex === category.categoryOptions.length - 1 &&\n                  category.categoryOptions.length > 1\n                ) {\n                  dataElementDescription += ' and ';\n                }\n\n                dataElementDescription +=\n                  '<span>' + categoryOption.name + '</span>';\n              }\n            );\n\n            dataElementDescription +=\n              ')</strong> of the <strong>' +\n              category.name +\n              '</strong> category';\n          });\n\n          dataElementDescription += '</strong></p>';\n\n          // TODO deal with different version of dhis\n          if (dataElement.dataSets && dataElement.dataSets.length > 0) {\n            dataElementDescription +=\n              '<h5>' + dataElement.name + ' Sources</h5>';\n\n            dataElementDescription +=\n              '<p>More than <strong>' +\n              dataElement.dataSets.length +\n              '</strong> dataset ie ';\n\n            dataElement.dataSets.forEach(\n              (dataSet: any, dataSetIndex: number) => {\n                if (\n                  dataSetIndex !== 0 &&\n                  dataSetIndex !== dataElement.dataSets.length - 1\n                ) {\n                  dataElementDescription += ', ';\n                }\n\n                if (\n                  dataSetIndex === dataElement.dataSets.length - 1 &&\n                  dataElement.dataSets.length > 1\n                ) {\n                  dataElementDescription += ' and ';\n                }\n                dataElementDescription +=\n                  '<strong>' + dataSet.name + '</strong>';\n              }\n            );\n\n            dataElementDescription +=\n              ' use this ' + dataElement.name + ' data element';\n\n            if (\n              dataElement.dataElementGroups &&\n              dataElement.dataElementGroups.length > 0\n            ) {\n              dataElementDescription += ' and it belongs to ';\n\n              dataElement.dataElementGroups.forEach(\n                (dataElementGroup, dataElementGroupIndex) => {\n                  if (\n                    dataElementGroupIndex !== 0 &&\n                    dataElementGroupIndex !==\n                      dataElement.dataElementGroups.length - 1\n                  ) {\n                    dataElementDescription += ', ';\n                  }\n\n                  if (\n                    dataElementGroupIndex ===\n                      dataElement.dataElementGroups.length - 1 &&\n                    dataElement.dataElementGroups.length > 1\n                  ) {\n                    dataElementDescription += ' and ';\n                  }\n                  dataElementDescription +=\n                    '<strong>' + dataElementGroup.name + ' Group</strong>';\n                }\n              );\n            }\n\n            dataElementDescription += '</p>';\n          }\n\n          this.store.dispatch(\n            new UpdateDictionaryMetadataAction(dataElementId, {\n              description: dataElementDescription,\n              progress: {\n                loading: false,\n                loadingSucceeded: true,\n                loadingFailed: false\n              }\n            })\n          );\n        }\n      });\n  }\n\n  getIndicatorInfo(indicatorUrl: string, indicatorId: string) {\n    this.httpClient.get(`${indicatorUrl}`, true).subscribe((indicator: any) => {\n      let indicatorDescription =\n        '<p><strong>' +\n        indicator.name +\n        '</strong> is a <strong>' +\n        indicator.indicatorType.name +\n        ' </strong> indicator';\n\n      if (indicator.numeratorDescription) {\n        indicatorDescription +=\n          '<span> with the numerator described as <strong>' +\n          indicator.numeratorDescription +\n          '</strong></span>';\n      }\n\n      if (indicator.denominatorDescription) {\n        indicatorDescription +=\n          '<span> and denominator described as <strong>' +\n          indicator.denominatorDescription +\n          '</strong></span>';\n      }\n\n      indicatorDescription += '</p>';\n\n      if (indicator.annualized) {\n        indicatorDescription +=\n          '<p><span>Itâs figure is annualized to support analysis in less than year period ' +\n          '(monthly,quarterly,semi-annually)</span></p>';\n      }\n\n      this.store.dispatch(\n        new UpdateDictionaryMetadataAction(indicatorId, {\n          description: indicatorDescription,\n          progress: {\n            loading: true,\n            loadingSucceeded: true,\n            loadingFailed: false\n          }\n        })\n      );\n\n      /**\n       * Get numerator expression\n       */\n      forkJoin(\n        this.httpClient.get(\n          'expressions/description?expression=' +\n            encodeURIComponent(indicator.numerator),\n          true\n        ),\n        this.httpClient.get(\n          'dataSets.json?fields=periodType,id,name,timelyDays,formType,created,expiryDays&' +\n            'filter=dataSetElements.dataElement.id:in:[' +\n            this.getAvailableDataElements(indicator.numerator) +\n            ']&paging=false',\n          true\n        )\n      ).subscribe((numeratorResults: any[]) => {\n        if (numeratorResults[0]) {\n          indicatorDescription +=\n            '<p>Numerator is calculated from <strong>' +\n            numeratorResults[0].description +\n            '</strong>';\n        }\n\n        if (numeratorResults[1] && numeratorResults[1].dataSets) {\n          const dataSets: any[] = numeratorResults[1].dataSets;\n\n          if (dataSets.length > 0) {\n            indicatorDescription += ' originating from ';\n          }\n\n          dataSets.forEach((dataset: any, index: number) => {\n            if (index !== 0 && index !== dataSets.length - 1) {\n              indicatorDescription += ', ';\n            }\n\n            if (index === dataSets.length - 1 && dataSets.length > 1) {\n              indicatorDescription += ' and ';\n            }\n\n            indicatorDescription +=\n              '<span><strong>' +\n              dataset.name +\n              ',</strong> that is collected <strong>' +\n              dataset.periodType +\n              '</strong> with deadline for submission after <strong>' +\n              dataset.timelyDays +\n              ' days </strong></span>';\n          });\n        }\n\n        indicatorDescription += `</p>`;\n\n        this.store.dispatch(\n          new UpdateDictionaryMetadataAction(indicatorId, {\n            description: indicatorDescription,\n            progress: {\n              loading: true,\n              loadingSucceeded: true,\n              loadingFailed: false\n            }\n          })\n        );\n\n        /**\n         * Get denominator expression\n         */\n        forkJoin(\n          this.httpClient.get(\n            'expressions/description?expression=' +\n              encodeURIComponent(indicator.denominator),\n            true\n          ),\n          this.httpClient.get(\n            'dataSets.json?fields=periodType,id,name,timelyDays,formType,created,expiryDays&' +\n              'filter=dataSetElements.dataElement.id:in:[' +\n              this.getAvailableDataElements(indicator.denominator) +\n              ']&paging=false',\n            true\n          )\n        ).subscribe((denominatorResults: any[]) => {\n          if (denominatorResults[0]) {\n            indicatorDescription +=\n              '<p>Denominator is calculated from <strong>' +\n              denominatorResults[0].description +\n              '</strong>';\n          }\n\n          if (denominatorResults[1] && denominatorResults[1].dataSets) {\n            const dataSets: any[] = denominatorResults[1].dataSets;\n\n            if (dataSets.length > 0) {\n              indicatorDescription += ' originating from ';\n            }\n\n            dataSets.forEach((dataset: any, index: number) => {\n              if (index !== 0 && index !== dataSets.length - 1) {\n                indicatorDescription += ', ';\n              }\n\n              if (index === dataSets.length - 1 && dataSets.length > 1) {\n                indicatorDescription += ' and ';\n              }\n\n              indicatorDescription +=\n                '<span><strong>' +\n                dataset.name +\n                ',</strong> that is collected <strong>' +\n                dataset.periodType +\n                '</strong> with deadline for submission after <strong>' +\n                dataset.timelyDays +\n                ' days </strong></span>';\n            });\n          }\n\n          indicatorDescription += `</p>`;\n\n          /**\n           * Indicator group\n           */\n\n          if (\n            indicator.indicatorGroups &&\n            indicator.indicatorGroups.length > 0\n          ) {\n            indicatorDescription += '<div><p>It belongs to ';\n\n            indicator.indicatorGroups.forEach((indicatorGroup, index) => {\n              if (\n                index !== 0 &&\n                index !== indicator.indicatorGroups.length - 1\n              ) {\n                indicatorDescription += ', ';\n              }\n\n              if (\n                index === indicator.indicatorGroups.length - 1 &&\n                indicator.indicatorGroups.length > 1\n              ) {\n                indicatorDescription += ' and ';\n              }\n\n              indicatorDescription +=\n                '<span><strong>' +\n                indicatorGroup.name +\n                '</strong> with <strong>' +\n                indicatorGroup.indicators +\n                '</strong> other related indicators</span>';\n            });\n\n            indicatorDescription += '</p></div>';\n          }\n\n          /**\n           * Attribute values\n           */\n          if (\n            indicator.attributeValues &&\n            indicator.attributeValues.length > 0\n          ) {\n            indicatorDescription +=\n              '<div><p>Other related details associated with this indicators includes: ';\n\n            indicator.attributeValues.forEach(attr => {\n              indicatorDescription +=\n                '<span><strong>' +\n                attr.attribute.name +\n                ': ' +\n                attr.value +\n                '</strong></span>';\n            });\n\n            indicatorDescription += '</p></div>';\n          }\n\n          /**\n           * Legend set\n           */\n          if (indicator.legendSet) {\n            indicatorDescription +=\n              '<div><p> It makes use of: <strong>' +\n              indicator.legendSet.name +\n              '</strong> legend' +\n              ' set for analysis with <strong>' +\n              indicator.legendSet.legends +\n              ' Classes </strong>using <strong>' +\n              indicator.legendSet.symbolizer +\n              ' for analysis</strong></p></div>';\n          }\n\n          /**\n           * User info\n           */\n          if (indicator.user) {\n            indicatorDescription +=\n              '<div><p>This indicator was <strong> first created </strong> in the system on <strong>' +\n              this.datePipe.transform(indicator.created) +\n              '</strong> by <strong>' +\n              indicator.user.name +\n              '</strong></p></div>';\n          }\n\n          this.store.dispatch(\n            new UpdateDictionaryMetadataAction(indicatorId, {\n              description: indicatorDescription,\n              progress: {\n                loading: false,\n                loadingSucceeded: true,\n                loadingFailed: false\n              }\n            })\n          );\n        });\n      });\n    });\n  }\n\n  getAvailableDataElements(data) {\n    let dataElementUids = [];\n    const separators = [' ', '\\\\+', '-', '\\\\(', '\\\\)', '\\\\*', '/', ':', '\\\\?'];\n    const numeratorDataElements = data.split(\n      new RegExp(separators.join('|'), 'g')\n    );\n    numeratorDataElements.forEach(dataElement => {\n      dataElementUids = this.dataElementWithCategoryOptionCheck(dataElement);\n    });\n    return dataElementUids.join();\n  }\n\n  dataElementWithCategoryOptionCheck(dataElement: any) {\n    const uid = [];\n    if (dataElement.indexOf('.') >= 1) {\n      uid.push(\n        dataElement\n          .replace(/#/g, '')\n          .replace(/{/g, '')\n          .replace(/}/g, '')\n          .split('.')[0]\n      );\n    } else {\n      uid.push(\n        dataElement\n          .replace(/#/g, '')\n          .replace(/{/g, '')\n          .replace(/}/g, '')\n      );\n    }\n\n    return uid;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule, DatePipe } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { DictionaryListComponent } from './components/dictionary-list/dictionary-list.component';\nimport { DictionaryProgressComponent } from './components/dictionary-progress/dictionary-progress.component';\nimport { dictionaryReducer } from './store/reducers/dictionary.reducer';\nimport { DictionaryEffects } from './store/effects/dictionary.effects';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature('dictionary', dictionaryReducer),\n    EffectsModule.forFeature([DictionaryEffects])\n  ],\n\n  declarations: [DictionaryListComponent, DictionaryProgressComponent],\n  exports: [DictionaryListComponent],\n  providers: [DatePipe]\n})\nexport class NgxDhis2DictionaryModule {}\n"]}