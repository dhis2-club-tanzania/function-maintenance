(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@ngrx/entity'), require('@ngrx/store'), require('lodash'), require('@angular/core'), require('@angular/common'), require('@ngrx/effects'), require('rxjs/operators'), require('rxjs'), require('@hisptz/ngx-dhis2-http-client'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('@hisptz/ngx-dhis2-dictionary', ['exports', '@ngrx/entity', '@ngrx/store', 'lodash', '@angular/core', '@angular/common', '@ngrx/effects', 'rxjs/operators', 'rxjs', '@hisptz/ngx-dhis2-http-client', '@angular/common/http'], factory) :
    (factory((global.hisptz = global.hisptz || {}, global.hisptz['ngx-dhis2-dictionary'] = {}),null,null,null,global.ng.core,global.ng.common,null,global.rxjs.operators,global.rxjs,null,global.ng.common.http));
}(this, (function (exports,entity,store,_,core,common,effects,operators,rxjs,ngxDhis2HttpClient,http) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {string} */
    var DictionaryActionTypes = {
        InitializeDictionaryMetadata: '[Dictionary] initialize incoming metadata',
        AddDictionaryMetadataList: '[Dictionary] add dictionary metadata list',
        UpdateDictionaryMetadata: '[Dictionary] update dictionary metadata list',
    };
    var InitializeDictionaryMetadataAction = (function () {
        function InitializeDictionaryMetadataAction(dictionaryMetadataIdentifiers) {
            this.dictionaryMetadataIdentifiers = dictionaryMetadataIdentifiers;
            this.type = DictionaryActionTypes.InitializeDictionaryMetadata;
        }
        return InitializeDictionaryMetadataAction;
    }());
    var AddDictionaryMetadataListAction = (function () {
        function AddDictionaryMetadataListAction(dictionaryMetadataList) {
            this.dictionaryMetadataList = dictionaryMetadataList;
            this.type = DictionaryActionTypes.AddDictionaryMetadataList;
        }
        return AddDictionaryMetadataListAction;
    }());
    var UpdateDictionaryMetadataAction = (function () {
        function UpdateDictionaryMetadataAction(dictionaryMetadataId, changes) {
            this.dictionaryMetadataId = dictionaryMetadataId;
            this.changes = changes;
            this.type = DictionaryActionTypes.UpdateDictionaryMetadata;
        }
        return UpdateDictionaryMetadataAction;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ dictionaryAdapter = entity.createEntityAdapter();
    var /** @type {?} */ initialState = dictionaryAdapter.getInitialState({});
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function dictionaryReducer(state, action) {
        if (state === void 0) {
            state = initialState;
        }
        switch (action.type) {
            case DictionaryActionTypes.AddDictionaryMetadataList: {
                return dictionaryAdapter.addMany(action.dictionaryMetadataList, state);
            }
            case DictionaryActionTypes.UpdateDictionaryMetadata: {
                return dictionaryAdapter.updateOne({ id: action.dictionaryMetadataId, changes: action.changes }, state);
            }
        }
        return state;
    }
    var /** @type {?} */ getDictionaryState = store.createFeatureSelector('dictionary');
    var getDictionaryMetadataEntities = dictionaryAdapter.getSelectors(getDictionaryState).selectEntities;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ getDictionaryList = function (metadataIdentifiers) {
        return store.createSelector(getDictionaryMetadataEntities, function (dictionaryMetadataEntities) {
            return _.filter(_.map(metadataIdentifiers, function (metadataId) { return dictionaryMetadataEntities[metadataId]; }), function (metadata) { return metadata; });
        });
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DictionaryListComponent = (function () {
        function DictionaryListComponent(store$$1) {
            this.store = store$$1;
            this.activeItem = 0;
        }
        /**
         * @return {?}
         */
        DictionaryListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.metadataIdentifiers.length > 0) {
                    this.store.dispatch(new InitializeDictionaryMetadataAction(this.metadataIdentifiers));
                    this.dictionaryList$ = this.store.select(getDictionaryList(this.metadataIdentifiers));
                }
            };
        /**
         * @param {?} index
         * @param {?} e
         * @return {?}
         */
        DictionaryListComponent.prototype.setActiveItem = /**
         * @param {?} index
         * @param {?} e
         * @return {?}
         */
            function (index, e) {
                e.stopPropagation();
                if (this.activeItem === index) {
                    this.activeItem = -1;
                }
                else {
                    this.activeItem = index;
                }
            };
        DictionaryListComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'ngx-dhis2-dictionary-list',
                        template: "<div class=\"dictionary-list-container\">\n  <div\n    class=\"dictionary-item-container\"\n    *ngFor=\"let dictionaryItem of dictionaryList$ | async; let i = index\"\n  >\n    <div\n      class=\"dictionary-title\"\n      (click)=\"setActiveItem(i, $event)\"\n    >\n      <span>{{ dictionaryItem.name }}</span>\n      <div *ngIf=\"!dictionaryItem.name\">\n        <app-dictionary-progress></app-dictionary-progress>\n      </div>\n    </div>\n    <div\n      class=\"dictionary-body\"\n      *ngIf=\"activeItem === i\"\n    >\n      <div class=\"dictionary-description\" [innerHtml]=\"dictionaryItem.description\"></div>\n      <div *ngIf=\"dictionaryItem.progress.loading\">\n        <app-dictionary-progress></app-dictionary-progress>\n      </div>\n    </div>\n  </div>\n</div>\n",
                        styles: [".dictionary-list-container{box-shadow:0 0 3px rgba(0,0,0,.3)}.dictionary-item-container{border-bottom:thin solid #ececec}.dictionary-title{padding:5px 10px;cursor:pointer}.dictionary-item-container:last-child{border-bottom-style:none}.dictionary-body{border-top:thin solid #ececec;padding:10px}.dictionary-description{text-align:justify}"],
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        DictionaryListComponent.ctorParameters = function () {
            return [
                { type: store.Store }
            ];
        };
        DictionaryListComponent.propDecorators = {
            metadataIdentifiers: [{ type: core.Input }]
        };
        return DictionaryListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DictionaryProgressComponent = (function () {
        function DictionaryProgressComponent() {
        }
        /**
         * @return {?}
         */
        DictionaryProgressComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        DictionaryProgressComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'app-dictionary-progress',
                        template: "<div class=\"dictionary-progress\">\n    <div class=\"animated-background\"></div>\n</div>",
                        styles: [".dictionary-progress div{height:5px;margin-top:3px}@-webkit-keyframes placeHolderShimmer{0%{background-position:-468px 0}100%{background-position:468px 0}}@keyframes placeHolderShimmer{0%{background-position:-468px 0}100%{background-position:468px 0}}.animated-background{-webkit-animation-duration:1.5s;animation-duration:1.5s;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-name:placeHolderShimmer;animation-name:placeHolderShimmer;-webkit-animation-timing-function:linear;animation-timing-function:linear;background:#f6f7f8;background:linear-gradient(to right,#eee 8%,#ddd 18%,#eee 33%);background-size:800px 104px;height:100%;position:relative}"]
                    },] },
        ];
        /** @nocollapse */
        DictionaryProgressComponent.ctorParameters = function () { return []; };
        return DictionaryProgressComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DictionaryEffects = (function () {
        function DictionaryEffects(actions$, store$$1, httpClient, datePipe) {
            var _this = this;
            this.actions$ = actions$;
            this.store = store$$1;
            this.httpClient = httpClient;
            this.datePipe = datePipe;
            this.initializeDictionary$ = this.actions$.pipe(effects.ofType(DictionaryActionTypes.InitializeDictionaryMetadata), operators.mergeMap(function (action) {
                return _this.store
                    .select(getDictionaryList(action.dictionaryMetadataIdentifiers))
                    .pipe(operators.map(function (dictionaryList) {
                    return _.filter(action.dictionaryMetadataIdentifiers, function (metadataId) { return !_.find(dictionaryList, ['id', metadataId]); });
                }));
            }), operators.tap(function (identifiers) {
                /**
                       * Add incoming items to the dictionary list
                       */
                /**
                 * Add incoming items to the dictionary list
                 */
                _this.store.dispatch(new AddDictionaryMetadataListAction(_.map(identifiers, function (id) {
                    return {
                        id: id,
                        name: '',
                        description: '',
                        progress: {
                            loading: true,
                            loadingSucceeded: false,
                            loadingFailed: false
                        }
                    };
                })));
                /**
                       * Identify corresponding dictionary items
                       */
                rxjs.from(identifiers)
                    .pipe(operators.mergeMap(function (identifier) {
                    return _this.httpClient.get("identifiableObjects/" + identifier + ".json", true);
                }))
                    .subscribe(function (metadata) {
                    _this.store.dispatch(new UpdateDictionaryMetadataAction(metadata.id, {
                        name: metadata.name,
                        progress: {
                            loading: true,
                            loadingSucceeded: true,
                            loadingFailed: false
                        }
                    }));
                    if (metadata.href && metadata.href.indexOf('indicator') !== -1) {
                        var /** @type {?} */ indicatorUrl = 'indicators/' +
                            metadata.id +
                            '.json?fields=:all,displayName,id,name,numeratorDescription,' +
                            'denominatorDescription,denominator,numerator,annualized,decimals,indicatorType[name],user[name],' +
                            'attributeValues[value,attribute[name]],indicatorGroups[name,indicators~size],legendSet[name,symbolizer,' +
                            'legends~size],dataSets[name]';
                        _this.getIndicatorInfo(indicatorUrl, metadata.id);
                    }
                    else if (metadata.href &&
                        metadata.href.indexOf('dataElement') !== -1) {
                        var /** @type {?} */ dataElementUrl = 'dataElements/' +
                            metadata.id +
                            '.json?fields=:all,id,name,aggregationType,displayName,' +
                            'categoryCombo[id,name,categories[id,name,categoryOptions[id,name]]],dataSets[:all,!compulsoryDataElementOperands]';
                        _this.getDataElementInfo(dataElementUrl, metadata.id);
                    }
                    else if (metadata.href && metadata.href.indexOf('dataSet') !== -1) {
                        var /** @type {?} */ dataSetUrl = 'dataSets/' +
                            metadata.id +
                            '.json?fields=:all,user[:all],id,name,periodType,shortName,' +
                            'categoryCombo[id,name,categories[id,name,categoryOptions[id,name]]]';
                        _this.getDataSetInfo(dataSetUrl, metadata.id);
                    }
                });
            }));
        }
        /**
         * @param {?} dataSetUrl
         * @param {?} dataSetId
         * @return {?}
         */
        DictionaryEffects.prototype.getDataSetInfo = /**
         * @param {?} dataSetUrl
         * @param {?} dataSetId
         * @return {?}
         */
            function (dataSetUrl, dataSetId) {
                var _this = this;
                this.httpClient.get("" + dataSetUrl, true).subscribe(function (dataSet) {
                    var /** @type {?} */ dataSetDescription = '<p>' +
                        dataSet.name +
                        ' of the <strong>' +
                        dataSet.formType +
                        '</strong> Form created ' +
                        'at <strong>' +
                        _this.datePipe.transform(dataSet.created) +
                        ' by ' +
                        dataSet.user.name +
                        '</strong>';
                    if (dataSet.categoryCombo && dataSet.categoryCombo.name !== 'default') {
                        dataSetDescription +=
                            '<span> With <strong>' +
                                dataSet.categoryCombo.name +
                                '</strong> Dimension which is divided' +
                                ' into ';
                        dataSet.categoryCombo.categories.forEach(function (category, categoryIndex) {
                            if (categoryIndex !== 0 &&
                                categoryIndex !== dataSet.categoryCombo.categories.length - 1) {
                                dataSetDescription += ', ';
                            }
                            if (categoryIndex === dataSet.categoryCombo.categories.length - 1 &&
                                dataSet.categoryCombo.categories.length > 1) {
                                dataSetDescription += ' and ';
                            }
                            dataSetDescription += '<strong>';
                            category.categoryOptions.forEach(function (categoryOption, categoryOptionIndex) {
                                if (categoryOptionIndex !== 0 &&
                                    categoryOptionIndex !== category.categoryOptions.length - 1) {
                                    dataSetDescription += ', ';
                                }
                                if (categoryOptionIndex === category.categoryOptions.length - 1 &&
                                    category.categoryOptions.length > 1) {
                                    dataSetDescription += ' and ';
                                }
                                dataSetDescription += '<span>' + categoryOption.name + '</span>';
                            });
                            dataSetDescription += '</strong>';
                        });
                        dataSetDescription += '</span>';
                    }
                    dataSetDescription += '</p>';
                    _this.store.dispatch(new UpdateDictionaryMetadataAction(dataSetId, {
                        description: dataSetDescription,
                        progress: {
                            loading: false,
                            loadingSucceeded: true,
                            loadingFailed: false
                        }
                    }));
                });
            };
        /**
         * @param {?} dataElementUrl
         * @param {?} dataElementId
         * @return {?}
         */
        DictionaryEffects.prototype.getDataElementInfo = /**
         * @param {?} dataElementUrl
         * @param {?} dataElementId
         * @return {?}
         */
            function (dataElementUrl, dataElementId) {
                var _this = this;
                this.httpClient
                    .get("" + dataElementUrl, true)
                    .subscribe(function (dataElement) {
                    var /** @type {?} */ dataElementDescription = '<p>This ' +
                        dataElement.name +
                        ' of this method of data aggregation <strong>' +
                        dataElement.aggregationType +
                        '</strong> created at <strong>' +
                        _this.datePipe.transform(dataElement.created) +
                        '</strong> is only taking <strong>' +
                        dataElement.domainType +
                        '</strong> data. As the culture of helping user ' +
                        'not entering unrecognized data, therefore its only taking <strong>' +
                        dataElement.valueType +
                        '</strong> values ' +
                        'from the user input</p>';
                    if (dataElement.categoryCombo.name !== 'default') {
                        dataElementDescription +=
                            '<p><strong>' +
                                dataElement.name +
                                '</strong> consists of <strong>' +
                                dataElement.categoryCombo.name +
                                '</strong> category combinations of ';
                        dataElement.categoryCombo.categories.forEach(function (category, index) {
                            if (index !== 0 &&
                                index !== dataElement.categoryCombo.categories.length - 1) {
                                dataElementDescription += ', ';
                            }
                            if (index === dataElement.categoryCombo.categories.length - 1 &&
                                dataElement.categoryCombo.categories.length > 1) {
                                dataElementDescription += ' and ';
                            }
                            dataElementDescription += '<strong>(';
                            category.categoryOptions.forEach(function (categoryOption, categoryOptionIndex) {
                                if (categoryOptionIndex !== 0 &&
                                    categoryOptionIndex !== category.categoryOptions.length - 1) {
                                    dataElementDescription += ', ';
                                }
                                if (categoryOptionIndex === category.categoryOptions.length - 1 &&
                                    category.categoryOptions.length > 1) {
                                    dataElementDescription += ' and ';
                                }
                                dataElementDescription +=
                                    '<span>' + categoryOption.name + '</span>';
                            });
                            dataElementDescription +=
                                ')</strong> of the <strong>' +
                                    category.name +
                                    '</strong> category';
                        });
                        dataElementDescription += '</strong></p>';
                        // TODO deal with different version of dhis
                        if (dataElement.dataSets && dataElement.dataSets.length > 0) {
                            dataElementDescription +=
                                '<h5>' + dataElement.name + ' Sources</h5>';
                            dataElementDescription +=
                                '<p>More than <strong>' +
                                    dataElement.dataSets.length +
                                    '</strong> dataset ie ';
                            dataElement.dataSets.forEach(function (dataSet, dataSetIndex) {
                                if (dataSetIndex !== 0 &&
                                    dataSetIndex !== dataElement.dataSets.length - 1) {
                                    dataElementDescription += ', ';
                                }
                                if (dataSetIndex === dataElement.dataSets.length - 1 &&
                                    dataElement.dataSets.length > 1) {
                                    dataElementDescription += ' and ';
                                }
                                dataElementDescription +=
                                    '<strong>' + dataSet.name + '</strong>';
                            });
                            dataElementDescription +=
                                ' use this ' + dataElement.name + ' data element';
                            if (dataElement.dataElementGroups &&
                                dataElement.dataElementGroups.length > 0) {
                                dataElementDescription += ' and it belongs to ';
                                dataElement.dataElementGroups.forEach(function (dataElementGroup, dataElementGroupIndex) {
                                    if (dataElementGroupIndex !== 0 &&
                                        dataElementGroupIndex !==
                                            dataElement.dataElementGroups.length - 1) {
                                        dataElementDescription += ', ';
                                    }
                                    if (dataElementGroupIndex ===
                                        dataElement.dataElementGroups.length - 1 &&
                                        dataElement.dataElementGroups.length > 1) {
                                        dataElementDescription += ' and ';
                                    }
                                    dataElementDescription +=
                                        '<strong>' + dataElementGroup.name + ' Group</strong>';
                                });
                            }
                            dataElementDescription += '</p>';
                        }
                        _this.store.dispatch(new UpdateDictionaryMetadataAction(dataElementId, {
                            description: dataElementDescription,
                            progress: {
                                loading: false,
                                loadingSucceeded: true,
                                loadingFailed: false
                            }
                        }));
                    }
                });
            };
        /**
         * @param {?} indicatorUrl
         * @param {?} indicatorId
         * @return {?}
         */
        DictionaryEffects.prototype.getIndicatorInfo = /**
         * @param {?} indicatorUrl
         * @param {?} indicatorId
         * @return {?}
         */
            function (indicatorUrl, indicatorId) {
                var _this = this;
                this.httpClient.get("" + indicatorUrl, true).subscribe(function (indicator) {
                    var /** @type {?} */ indicatorDescription = '<p><strong>' +
                        indicator.name +
                        '</strong> is a <strong>' +
                        indicator.indicatorType.name +
                        ' </strong> indicator';
                    if (indicator.numeratorDescription) {
                        indicatorDescription +=
                            '<span> with the numerator described as <strong>' +
                                indicator.numeratorDescription +
                                '</strong></span>';
                    }
                    if (indicator.denominatorDescription) {
                        indicatorDescription +=
                            '<span> and denominator described as <strong>' +
                                indicator.denominatorDescription +
                                '</strong></span>';
                    }
                    indicatorDescription += '</p>';
                    if (indicator.annualized) {
                        indicatorDescription +=
                            '<p><span>It’s figure is annualized to support analysis in less than year period ' +
                                '(monthly,quarterly,semi-annually)</span></p>';
                    }
                    _this.store.dispatch(new UpdateDictionaryMetadataAction(indicatorId, {
                        description: indicatorDescription,
                        progress: {
                            loading: true,
                            loadingSucceeded: true,
                            loadingFailed: false
                        }
                    }));
                    /**
                           * Get numerator expression
                           */
                    rxjs.forkJoin(_this.httpClient.get('expressions/description?expression=' +
                        encodeURIComponent(indicator.numerator), true), _this.httpClient.get('dataSets.json?fields=periodType,id,name,timelyDays,formType,created,expiryDays&' +
                        'filter=dataSetElements.dataElement.id:in:[' +
                        _this.getAvailableDataElements(indicator.numerator) +
                        ']&paging=false', true)).subscribe(function (numeratorResults) {
                        if (numeratorResults[0]) {
                            indicatorDescription +=
                                '<p>Numerator is calculated from <strong>' +
                                    numeratorResults[0].description +
                                    '</strong>';
                        }
                        if (numeratorResults[1] && numeratorResults[1].dataSets) {
                            var /** @type {?} */ dataSets_1 = numeratorResults[1].dataSets;
                            if (dataSets_1.length > 0) {
                                indicatorDescription += ' originating from ';
                            }
                            dataSets_1.forEach(function (dataset, index) {
                                if (index !== 0 && index !== dataSets_1.length - 1) {
                                    indicatorDescription += ', ';
                                }
                                if (index === dataSets_1.length - 1 && dataSets_1.length > 1) {
                                    indicatorDescription += ' and ';
                                }
                                indicatorDescription +=
                                    '<span><strong>' +
                                        dataset.name +
                                        ',</strong> that is collected <strong>' +
                                        dataset.periodType +
                                        '</strong> with deadline for submission after <strong>' +
                                        dataset.timelyDays +
                                        ' days </strong></span>';
                            });
                        }
                        indicatorDescription += "</p>";
                        _this.store.dispatch(new UpdateDictionaryMetadataAction(indicatorId, {
                            description: indicatorDescription,
                            progress: {
                                loading: true,
                                loadingSucceeded: true,
                                loadingFailed: false
                            }
                        }));
                        /**
                                 * Get denominator expression
                                 */
                        rxjs.forkJoin(_this.httpClient.get('expressions/description?expression=' +
                            encodeURIComponent(indicator.denominator), true), _this.httpClient.get('dataSets.json?fields=periodType,id,name,timelyDays,formType,created,expiryDays&' +
                            'filter=dataSetElements.dataElement.id:in:[' +
                            _this.getAvailableDataElements(indicator.denominator) +
                            ']&paging=false', true)).subscribe(function (denominatorResults) {
                            if (denominatorResults[0]) {
                                indicatorDescription +=
                                    '<p>Denominator is calculated from <strong>' +
                                        denominatorResults[0].description +
                                        '</strong>';
                            }
                            if (denominatorResults[1] && denominatorResults[1].dataSets) {
                                var /** @type {?} */ dataSets_2 = denominatorResults[1].dataSets;
                                if (dataSets_2.length > 0) {
                                    indicatorDescription += ' originating from ';
                                }
                                dataSets_2.forEach(function (dataset, index) {
                                    if (index !== 0 && index !== dataSets_2.length - 1) {
                                        indicatorDescription += ', ';
                                    }
                                    if (index === dataSets_2.length - 1 && dataSets_2.length > 1) {
                                        indicatorDescription += ' and ';
                                    }
                                    indicatorDescription +=
                                        '<span><strong>' +
                                            dataset.name +
                                            ',</strong> that is collected <strong>' +
                                            dataset.periodType +
                                            '</strong> with deadline for submission after <strong>' +
                                            dataset.timelyDays +
                                            ' days </strong></span>';
                                });
                            }
                            indicatorDescription += "</p>";
                            /**
                                       * Indicator group
                                       */
                            if (indicator.indicatorGroups &&
                                indicator.indicatorGroups.length > 0) {
                                indicatorDescription += '<div><p>It belongs to ';
                                indicator.indicatorGroups.forEach(function (indicatorGroup, index) {
                                    if (index !== 0 &&
                                        index !== indicator.indicatorGroups.length - 1) {
                                        indicatorDescription += ', ';
                                    }
                                    if (index === indicator.indicatorGroups.length - 1 &&
                                        indicator.indicatorGroups.length > 1) {
                                        indicatorDescription += ' and ';
                                    }
                                    indicatorDescription +=
                                        '<span><strong>' +
                                            indicatorGroup.name +
                                            '</strong> with <strong>' +
                                            indicatorGroup.indicators +
                                            '</strong> other related indicators</span>';
                                });
                                indicatorDescription += '</p></div>';
                            }
                            /**
                                       * Attribute values
                                       */
                            if (indicator.attributeValues &&
                                indicator.attributeValues.length > 0) {
                                indicatorDescription +=
                                    '<div><p>Other related details associated with this indicators includes: ';
                                indicator.attributeValues.forEach(function (attr) {
                                    indicatorDescription +=
                                        '<span><strong>' +
                                            attr.attribute.name +
                                            ': ' +
                                            attr.value +
                                            '</strong></span>';
                                });
                                indicatorDescription += '</p></div>';
                            }
                            /**
                                       * Legend set
                                       */
                            if (indicator.legendSet) {
                                indicatorDescription +=
                                    '<div><p> It makes use of: <strong>' +
                                        indicator.legendSet.name +
                                        '</strong> legend' +
                                        ' set for analysis with <strong>' +
                                        indicator.legendSet.legends +
                                        ' Classes </strong>using <strong>' +
                                        indicator.legendSet.symbolizer +
                                        ' for analysis</strong></p></div>';
                            }
                            /**
                                       * User info
                                       */
                            if (indicator.user) {
                                indicatorDescription +=
                                    '<div><p>This indicator was <strong> first created </strong> in the system on <strong>' +
                                        _this.datePipe.transform(indicator.created) +
                                        '</strong> by <strong>' +
                                        indicator.user.name +
                                        '</strong></p></div>';
                            }
                            _this.store.dispatch(new UpdateDictionaryMetadataAction(indicatorId, {
                                description: indicatorDescription,
                                progress: {
                                    loading: false,
                                    loadingSucceeded: true,
                                    loadingFailed: false
                                }
                            }));
                        });
                    });
                });
            };
        /**
         * @param {?} data
         * @return {?}
         */
        DictionaryEffects.prototype.getAvailableDataElements = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                var /** @type {?} */ dataElementUids = [];
                var /** @type {?} */ separators = [' ', '\\+', '-', '\\(', '\\)', '\\*', '/', ':', '\\?'];
                var /** @type {?} */ numeratorDataElements = data.split(new RegExp(separators.join('|'), 'g'));
                numeratorDataElements.forEach(function (dataElement) {
                    dataElementUids = _this.dataElementWithCategoryOptionCheck(dataElement);
                });
                return dataElementUids.join();
            };
        /**
         * @param {?} dataElement
         * @return {?}
         */
        DictionaryEffects.prototype.dataElementWithCategoryOptionCheck = /**
         * @param {?} dataElement
         * @return {?}
         */
            function (dataElement) {
                var /** @type {?} */ uid = [];
                if (dataElement.indexOf('.') >= 1) {
                    uid.push(dataElement
                        .replace(/#/g, '')
                        .replace(/{/g, '')
                        .replace(/}/g, '')
                        .split('.')[0]);
                }
                else {
                    uid.push(dataElement
                        .replace(/#/g, '')
                        .replace(/{/g, '')
                        .replace(/}/g, ''));
                }
                return uid;
            };
        DictionaryEffects.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        DictionaryEffects.ctorParameters = function () {
            return [
                { type: effects.Actions },
                { type: store.Store },
                { type: ngxDhis2HttpClient.NgxDhis2HttpClientService },
                { type: common.DatePipe }
            ];
        };
        __decorate([
            effects.Effect({ dispatch: false }),
            __metadata("design:type", rxjs.Observable)
        ], DictionaryEffects.prototype, "initializeDictionary$", void 0);
        return DictionaryEffects;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxDhis2DictionaryModule = (function () {
        function NgxDhis2DictionaryModule() {
        }
        NgxDhis2DictionaryModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            store.StoreModule.forFeature('dictionary', dictionaryReducer),
                            effects.EffectsModule.forFeature([DictionaryEffects])
                        ],
                        declarations: [DictionaryListComponent, DictionaryProgressComponent],
                        exports: [DictionaryListComponent],
                        providers: [common.DatePipe]
                    },] },
        ];
        return NgxDhis2DictionaryModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgxDhis2DictionaryModule = NgxDhis2DictionaryModule;
    exports.ɵd = DictionaryListComponent;
    exports.ɵe = DictionaryProgressComponent;
    exports.ɵc = DictionaryEffects;
    exports.ɵb = dictionaryReducer;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,