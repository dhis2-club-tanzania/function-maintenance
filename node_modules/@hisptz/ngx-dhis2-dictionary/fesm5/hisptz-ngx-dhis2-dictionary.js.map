{"version":3,"file":"hisptz-ngx-dhis2-dictionary.js.map","sources":["ng://@hisptz/ngx-dhis2-dictionary/lib/store/actions/dictionary.actions.ts","ng://@hisptz/ngx-dhis2-dictionary/lib/store/reducers/dictionary.reducer.ts","ng://@hisptz/ngx-dhis2-dictionary/lib/store/selectors/dictionary.selectors.ts","ng://@hisptz/ngx-dhis2-dictionary/lib/components/dictionary-list/dictionary-list.component.ts","ng://@hisptz/ngx-dhis2-dictionary/lib/components/dictionary-progress/dictionary-progress.component.ts","ng://@hisptz/ngx-dhis2-dictionary/lib/store/effects/dictionary.effects.ts","ng://@hisptz/ngx-dhis2-dictionary/lib/ngx-dhis2-dictionary.module.ts"],"sourcesContent":["import { Action } from '@ngrx/store';\nimport { MetadataDictionary } from '../../models/dictionary';\n\nexport enum DictionaryActionTypes {\n  InitializeDictionaryMetadata = '[Dictionary] initialize incoming metadata',\n  AddDictionaryMetadataList = '[Dictionary] add dictionary metadata list',\n  UpdateDictionaryMetadata = '[Dictionary] update dictionary metadata list'\n}\n\nexport class InitializeDictionaryMetadataAction implements Action {\n  readonly type = DictionaryActionTypes.InitializeDictionaryMetadata;\n  constructor(public dictionaryMetadataIdentifiers: Array<string>) {}\n}\n\nexport class AddDictionaryMetadataListAction implements Action {\n  readonly type = DictionaryActionTypes.AddDictionaryMetadataList;\n  constructor(public dictionaryMetadataList: MetadataDictionary[]) {}\n}\n\nexport class UpdateDictionaryMetadataAction implements Action {\n  readonly type = DictionaryActionTypes.UpdateDictionaryMetadata;\n  constructor(\n    public dictionaryMetadataId: string,\n    public changes: Partial<MetadataDictionary>\n  ) {}\n}\n\nexport type DictionaryActions =\n  | InitializeDictionaryMetadataAction\n  | AddDictionaryMetadataListAction\n  | UpdateDictionaryMetadataAction;\n","import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { Dictionary } from '@ngrx/entity/src/models';\nimport {\n  DictionaryActions,\n  DictionaryActionTypes\n} from '../actions/dictionary.actions';\nimport * as _ from 'lodash';\nimport { MetadataDictionary } from '../../models/dictionary';\n\nexport interface DictionaryState extends EntityState<MetadataDictionary> {}\n\nexport const dictionaryAdapter: EntityAdapter<\n  MetadataDictionary\n> = createEntityAdapter<MetadataDictionary>();\n\nconst initialState: DictionaryState = dictionaryAdapter.getInitialState({});\n\nexport function dictionaryReducer(\n  state: DictionaryState = initialState,\n  action: DictionaryActions\n): DictionaryState {\n  switch (action.type) {\n    case DictionaryActionTypes.AddDictionaryMetadataList: {\n      return dictionaryAdapter.addMany(action.dictionaryMetadataList, state);\n    }\n    case DictionaryActionTypes.UpdateDictionaryMetadata: {\n      return dictionaryAdapter.updateOne(\n        { id: action.dictionaryMetadataId, changes: action.changes },\n        state\n      );\n    }\n  }\n\n  return state;\n}\n\nexport const getDictionaryState = createFeatureSelector<DictionaryState>(\n  'dictionary'\n);\n\nexport const {\n  selectEntities: getDictionaryMetadataEntities\n} = dictionaryAdapter.getSelectors(getDictionaryState);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport * as _ from 'lodash';\nimport { getDictionaryMetadataEntities } from '../reducers/dictionary.reducer';\n\nexport const getDictionaryList = metadataIdentifiers =>\n  createSelector(\n    getDictionaryMetadataEntities,\n    (dictionaryMetadataEntities: any) =>\n      _.filter(\n        _.map(\n          metadataIdentifiers,\n          metadataId => dictionaryMetadataEntities[metadataId]\n        ),\n        metadata => metadata\n      )\n  );\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit\n} from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as _ from 'lodash';\nimport { Observable } from 'rxjs';\nimport { MetadataDictionary } from '../../models/dictionary';\n\nimport { DictionaryState } from '../../store/reducers/dictionary.reducer';\nimport { getDictionaryList } from '../../store/selectors/dictionary.selectors';\nimport { InitializeDictionaryMetadataAction } from '../../store/actions/dictionary.actions';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-dhis2-dictionary-list',\n  template: `<div class=\"dictionary-list-container\">\n  <div\n    class=\"dictionary-item-container\"\n    *ngFor=\"let dictionaryItem of dictionaryList$ | async; let i = index\"\n  >\n    <div\n      class=\"dictionary-title\"\n      (click)=\"setActiveItem(i, $event)\"\n    >\n      <span>{{ dictionaryItem.name }}</span>\n      <div *ngIf=\"!dictionaryItem.name\">\n        <app-dictionary-progress></app-dictionary-progress>\n      </div>\n    </div>\n    <div\n      class=\"dictionary-body\"\n      *ngIf=\"activeItem === i\"\n    >\n      <div class=\"dictionary-description\" [innerHtml]=\"dictionaryItem.description\"></div>\n      <div *ngIf=\"dictionaryItem.progress.loading\">\n        <app-dictionary-progress></app-dictionary-progress>\n      </div>\n    </div>\n  </div>\n</div>\n`,\n  styles: [`.dictionary-list-container{box-shadow:0 0 3px rgba(0,0,0,.3)}.dictionary-item-container{border-bottom:thin solid #ececec}.dictionary-title{padding:5px 10px;cursor:pointer}.dictionary-item-container:last-child{border-bottom-style:none}.dictionary-body{border-top:thin solid #ececec;padding:10px}.dictionary-description{text-align:justify}`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DictionaryListComponent implements OnInit {\n  @Input() metadataIdentifiers: Array<string>;\n  dictionaryList$: Observable<MetadataDictionary[]>;\n  activeItem: number;\n\n  constructor(private store: Store<DictionaryState>) {\n    this.activeItem = 0;\n  }\n\n  ngOnInit() {\n    if (this.metadataIdentifiers.length > 0) {\n      this.store.dispatch(\n        new InitializeDictionaryMetadataAction(this.metadataIdentifiers)\n      );\n\n      this.dictionaryList$ = this.store.select(\n        getDictionaryList(this.metadataIdentifiers)\n      );\n    }\n  }\n\n  setActiveItem(index, e) {\n    e.stopPropagation();\n    if (this.activeItem === index) {\n      this.activeItem = -1;\n    } else {\n      this.activeItem = index;\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'app-dictionary-progress',\n  template: `<div class=\"dictionary-progress\">\n    <div class=\"animated-background\"></div>\n</div>`,\n  styles: [`.dictionary-progress div{height:5px;margin-top:3px}@-webkit-keyframes placeHolderShimmer{0%{background-position:-468px 0}100%{background-position:468px 0}}@keyframes placeHolderShimmer{0%{background-position:-468px 0}100%{background-position:468px 0}}.animated-background{-webkit-animation-duration:1.5s;animation-duration:1.5s;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-name:placeHolderShimmer;animation-name:placeHolderShimmer;-webkit-animation-timing-function:linear;animation-timing-function:linear;background:#f6f7f8;background:linear-gradient(to right,#eee 8%,#ddd 18%,#eee 33%);background-size:800px 104px;height:100%;position:relative}`]\n})\nexport class DictionaryProgressComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { Injectable } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { Store } from '@ngrx/store';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport * as _ from 'lodash';\nimport { mergeMap, map, tap } from 'rxjs/operators';\nimport { Observable, from, forkJoin } from 'rxjs';\n\nimport { NgxDhis2HttpClientService } from '@hisptz/ngx-dhis2-http-client';\nimport { DictionaryState } from '../reducers/dictionary.reducer';\n\nimport {\n  DictionaryActionTypes,\n  InitializeDictionaryMetadataAction,\n  AddDictionaryMetadataListAction,\n  UpdateDictionaryMetadataAction\n} from '../actions/dictionary.actions';\nimport { getDictionaryList } from '../selectors/dictionary.selectors';\n\n@Injectable()\nexport class DictionaryEffects {\n  constructor(\n    private actions$: Actions,\n    private store: Store<DictionaryState>,\n    private httpClient: NgxDhis2HttpClientService,\n    private datePipe: DatePipe\n  ) {}\n\n  @Effect({ dispatch: false })\n  initializeDictionary$: Observable<any> = this.actions$.pipe(\n    ofType(DictionaryActionTypes.InitializeDictionaryMetadata),\n    mergeMap((action: InitializeDictionaryMetadataAction) =>\n      this.store\n        .select(getDictionaryList(action.dictionaryMetadataIdentifiers))\n        .pipe(\n          map((dictionaryList: any[]) =>\n            _.filter(\n              action.dictionaryMetadataIdentifiers,\n              metadataId => !_.find(dictionaryList, ['id', metadataId])\n            )\n          )\n        )\n    ),\n    tap(identifiers => {\n      /**\n       * Add incoming items to the dictionary list\n       */\n      this.store.dispatch(\n        new AddDictionaryMetadataListAction(\n          _.map(identifiers, id => {\n            return {\n              id,\n              name: '',\n              description: '',\n              progress: {\n                loading: true,\n                loadingSucceeded: false,\n                loadingFailed: false\n              }\n            };\n          })\n        )\n      );\n      /**\n       * Identify corresponding dictionary items\n       */\n      from(identifiers)\n        .pipe(\n          mergeMap(identifier =>\n            this.httpClient.get(`identifiableObjects/${identifier}.json`, true)\n          )\n        )\n        .subscribe((metadata: any) => {\n          this.store.dispatch(\n            new UpdateDictionaryMetadataAction(metadata.id, {\n              name: metadata.name,\n              progress: {\n                loading: true,\n                loadingSucceeded: true,\n                loadingFailed: false\n              }\n            })\n          );\n\n          if (metadata.href && metadata.href.indexOf('indicator') !== -1) {\n            const indicatorUrl =\n              'indicators/' +\n              metadata.id +\n              '.json?fields=:all,displayName,id,name,numeratorDescription,' +\n              'denominatorDescription,denominator,numerator,annualized,decimals,indicatorType[name],user[name],' +\n              'attributeValues[value,attribute[name]],indicatorGroups[name,indicators~size],legendSet[name,symbolizer,' +\n              'legends~size],dataSets[name]';\n            this.getIndicatorInfo(indicatorUrl, metadata.id);\n          } else if (\n            metadata.href &&\n            metadata.href.indexOf('dataElement') !== -1\n          ) {\n            const dataElementUrl =\n              'dataElements/' +\n              metadata.id +\n              '.json?fields=:all,id,name,aggregationType,displayName,' +\n              'categoryCombo[id,name,categories[id,name,categoryOptions[id,name]]],dataSets[:all,!compulsoryDataElementOperands]';\n            this.getDataElementInfo(dataElementUrl, metadata.id);\n          } else if (metadata.href && metadata.href.indexOf('dataSet') !== -1) {\n            const dataSetUrl =\n              'dataSets/' +\n              metadata.id +\n              '.json?fields=:all,user[:all],id,name,periodType,shortName,' +\n              'categoryCombo[id,name,categories[id,name,categoryOptions[id,name]]]';\n            this.getDataSetInfo(dataSetUrl, metadata.id);\n          }\n        });\n    })\n  );\n\n  getDataSetInfo(dataSetUrl: string, dataSetId: string) {\n    this.httpClient.get(`${dataSetUrl}`, true).subscribe((dataSet: any) => {\n      let dataSetDescription =\n        '<p>' +\n        dataSet.name +\n        ' of the <strong>' +\n        dataSet.formType +\n        '</strong> Form created ' +\n        'at <strong>' +\n        this.datePipe.transform(dataSet.created) +\n        ' by ' +\n        dataSet.user.name +\n        '</strong>';\n\n      if (dataSet.categoryCombo && dataSet.categoryCombo.name !== 'default') {\n        dataSetDescription +=\n          '<span> With <strong>' +\n          dataSet.categoryCombo.name +\n          '</strong> Dimension which is divided' +\n          ' into ';\n\n        dataSet.categoryCombo.categories.forEach((category, categoryIndex) => {\n          if (\n            categoryIndex !== 0 &&\n            categoryIndex !== dataSet.categoryCombo.categories.length - 1\n          ) {\n            dataSetDescription += ', ';\n          }\n\n          if (\n            categoryIndex === dataSet.categoryCombo.categories.length - 1 &&\n            dataSet.categoryCombo.categories.length > 1\n          ) {\n            dataSetDescription += ' and ';\n          }\n\n          dataSetDescription += '<strong>';\n\n          category.categoryOptions.forEach(\n            (categoryOption, categoryOptionIndex) => {\n              if (\n                categoryOptionIndex !== 0 &&\n                categoryOptionIndex !== category.categoryOptions.length - 1\n              ) {\n                dataSetDescription += ', ';\n              }\n\n              if (\n                categoryOptionIndex === category.categoryOptions.length - 1 &&\n                category.categoryOptions.length > 1\n              ) {\n                dataSetDescription += ' and ';\n              }\n\n              dataSetDescription += '<span>' + categoryOption.name + '</span>';\n            }\n          );\n\n          dataSetDescription += '</strong>';\n        });\n\n        dataSetDescription += '</span>';\n      }\n\n      dataSetDescription += '</p>';\n\n      this.store.dispatch(\n        new UpdateDictionaryMetadataAction(dataSetId, {\n          description: dataSetDescription,\n          progress: {\n            loading: false,\n            loadingSucceeded: true,\n            loadingFailed: false\n          }\n        })\n      );\n    });\n  }\n\n  getDataElementInfo(dataElementUrl: string, dataElementId: string) {\n    this.httpClient\n      .get(`${dataElementUrl}`, true)\n      .subscribe((dataElement: any) => {\n        let dataElementDescription =\n          '<p>This ' +\n          dataElement.name +\n          ' of this method of data aggregation <strong>' +\n          dataElement.aggregationType +\n          '</strong> created at <strong>' +\n          this.datePipe.transform(dataElement.created) +\n          '</strong> is only taking <strong>' +\n          dataElement.domainType +\n          '</strong> data. As the culture of helping user ' +\n          'not entering unrecognized data, therefore its only taking <strong>' +\n          dataElement.valueType +\n          '</strong> values ' +\n          'from the user input</p>';\n\n        if (dataElement.categoryCombo.name !== 'default') {\n          dataElementDescription +=\n            '<p><strong>' +\n            dataElement.name +\n            '</strong> consists of <strong>' +\n            dataElement.categoryCombo.name +\n            '</strong> category combinations of ';\n\n          dataElement.categoryCombo.categories.forEach((category, index) => {\n            if (\n              index !== 0 &&\n              index !== dataElement.categoryCombo.categories.length - 1\n            ) {\n              dataElementDescription += ', ';\n            }\n\n            if (\n              index === dataElement.categoryCombo.categories.length - 1 &&\n              dataElement.categoryCombo.categories.length > 1\n            ) {\n              dataElementDescription += ' and ';\n            }\n\n            dataElementDescription += '<strong>(';\n            category.categoryOptions.forEach(\n              (categoryOption, categoryOptionIndex) => {\n                if (\n                  categoryOptionIndex !== 0 &&\n                  categoryOptionIndex !== category.categoryOptions.length - 1\n                ) {\n                  dataElementDescription += ', ';\n                }\n\n                if (\n                  categoryOptionIndex === category.categoryOptions.length - 1 &&\n                  category.categoryOptions.length > 1\n                ) {\n                  dataElementDescription += ' and ';\n                }\n\n                dataElementDescription +=\n                  '<span>' + categoryOption.name + '</span>';\n              }\n            );\n\n            dataElementDescription +=\n              ')</strong> of the <strong>' +\n              category.name +\n              '</strong> category';\n          });\n\n          dataElementDescription += '</strong></p>';\n\n          // TODO deal with different version of dhis\n          if (dataElement.dataSets && dataElement.dataSets.length > 0) {\n            dataElementDescription +=\n              '<h5>' + dataElement.name + ' Sources</h5>';\n\n            dataElementDescription +=\n              '<p>More than <strong>' +\n              dataElement.dataSets.length +\n              '</strong> dataset ie ';\n\n            dataElement.dataSets.forEach(\n              (dataSet: any, dataSetIndex: number) => {\n                if (\n                  dataSetIndex !== 0 &&\n                  dataSetIndex !== dataElement.dataSets.length - 1\n                ) {\n                  dataElementDescription += ', ';\n                }\n\n                if (\n                  dataSetIndex === dataElement.dataSets.length - 1 &&\n                  dataElement.dataSets.length > 1\n                ) {\n                  dataElementDescription += ' and ';\n                }\n                dataElementDescription +=\n                  '<strong>' + dataSet.name + '</strong>';\n              }\n            );\n\n            dataElementDescription +=\n              ' use this ' + dataElement.name + ' data element';\n\n            if (\n              dataElement.dataElementGroups &&\n              dataElement.dataElementGroups.length > 0\n            ) {\n              dataElementDescription += ' and it belongs to ';\n\n              dataElement.dataElementGroups.forEach(\n                (dataElementGroup, dataElementGroupIndex) => {\n                  if (\n                    dataElementGroupIndex !== 0 &&\n                    dataElementGroupIndex !==\n                      dataElement.dataElementGroups.length - 1\n                  ) {\n                    dataElementDescription += ', ';\n                  }\n\n                  if (\n                    dataElementGroupIndex ===\n                      dataElement.dataElementGroups.length - 1 &&\n                    dataElement.dataElementGroups.length > 1\n                  ) {\n                    dataElementDescription += ' and ';\n                  }\n                  dataElementDescription +=\n                    '<strong>' + dataElementGroup.name + ' Group</strong>';\n                }\n              );\n            }\n\n            dataElementDescription += '</p>';\n          }\n\n          this.store.dispatch(\n            new UpdateDictionaryMetadataAction(dataElementId, {\n              description: dataElementDescription,\n              progress: {\n                loading: false,\n                loadingSucceeded: true,\n                loadingFailed: false\n              }\n            })\n          );\n        }\n      });\n  }\n\n  getIndicatorInfo(indicatorUrl: string, indicatorId: string) {\n    this.httpClient.get(`${indicatorUrl}`, true).subscribe((indicator: any) => {\n      let indicatorDescription =\n        '<p><strong>' +\n        indicator.name +\n        '</strong> is a <strong>' +\n        indicator.indicatorType.name +\n        ' </strong> indicator';\n\n      if (indicator.numeratorDescription) {\n        indicatorDescription +=\n          '<span> with the numerator described as <strong>' +\n          indicator.numeratorDescription +\n          '</strong></span>';\n      }\n\n      if (indicator.denominatorDescription) {\n        indicatorDescription +=\n          '<span> and denominator described as <strong>' +\n          indicator.denominatorDescription +\n          '</strong></span>';\n      }\n\n      indicatorDescription += '</p>';\n\n      if (indicator.annualized) {\n        indicatorDescription +=\n          '<p><span>Itâs figure is annualized to support analysis in less than year period ' +\n          '(monthly,quarterly,semi-annually)</span></p>';\n      }\n\n      this.store.dispatch(\n        new UpdateDictionaryMetadataAction(indicatorId, {\n          description: indicatorDescription,\n          progress: {\n            loading: true,\n            loadingSucceeded: true,\n            loadingFailed: false\n          }\n        })\n      );\n\n      /**\n       * Get numerator expression\n       */\n      forkJoin(\n        this.httpClient.get(\n          'expressions/description?expression=' +\n            encodeURIComponent(indicator.numerator),\n          true\n        ),\n        this.httpClient.get(\n          'dataSets.json?fields=periodType,id,name,timelyDays,formType,created,expiryDays&' +\n            'filter=dataSetElements.dataElement.id:in:[' +\n            this.getAvailableDataElements(indicator.numerator) +\n            ']&paging=false',\n          true\n        )\n      ).subscribe((numeratorResults: any[]) => {\n        if (numeratorResults[0]) {\n          indicatorDescription +=\n            '<p>Numerator is calculated from <strong>' +\n            numeratorResults[0].description +\n            '</strong>';\n        }\n\n        if (numeratorResults[1] && numeratorResults[1].dataSets) {\n          const dataSets: any[] = numeratorResults[1].dataSets;\n\n          if (dataSets.length > 0) {\n            indicatorDescription += ' originating from ';\n          }\n\n          dataSets.forEach((dataset: any, index: number) => {\n            if (index !== 0 && index !== dataSets.length - 1) {\n              indicatorDescription += ', ';\n            }\n\n            if (index === dataSets.length - 1 && dataSets.length > 1) {\n              indicatorDescription += ' and ';\n            }\n\n            indicatorDescription +=\n              '<span><strong>' +\n              dataset.name +\n              ',</strong> that is collected <strong>' +\n              dataset.periodType +\n              '</strong> with deadline for submission after <strong>' +\n              dataset.timelyDays +\n              ' days </strong></span>';\n          });\n        }\n\n        indicatorDescription += `</p>`;\n\n        this.store.dispatch(\n          new UpdateDictionaryMetadataAction(indicatorId, {\n            description: indicatorDescription,\n            progress: {\n              loading: true,\n              loadingSucceeded: true,\n              loadingFailed: false\n            }\n          })\n        );\n\n        /**\n         * Get denominator expression\n         */\n        forkJoin(\n          this.httpClient.get(\n            'expressions/description?expression=' +\n              encodeURIComponent(indicator.denominator),\n            true\n          ),\n          this.httpClient.get(\n            'dataSets.json?fields=periodType,id,name,timelyDays,formType,created,expiryDays&' +\n              'filter=dataSetElements.dataElement.id:in:[' +\n              this.getAvailableDataElements(indicator.denominator) +\n              ']&paging=false',\n            true\n          )\n        ).subscribe((denominatorResults: any[]) => {\n          if (denominatorResults[0]) {\n            indicatorDescription +=\n              '<p>Denominator is calculated from <strong>' +\n              denominatorResults[0].description +\n              '</strong>';\n          }\n\n          if (denominatorResults[1] && denominatorResults[1].dataSets) {\n            const dataSets: any[] = denominatorResults[1].dataSets;\n\n            if (dataSets.length > 0) {\n              indicatorDescription += ' originating from ';\n            }\n\n            dataSets.forEach((dataset: any, index: number) => {\n              if (index !== 0 && index !== dataSets.length - 1) {\n                indicatorDescription += ', ';\n              }\n\n              if (index === dataSets.length - 1 && dataSets.length > 1) {\n                indicatorDescription += ' and ';\n              }\n\n              indicatorDescription +=\n                '<span><strong>' +\n                dataset.name +\n                ',</strong> that is collected <strong>' +\n                dataset.periodType +\n                '</strong> with deadline for submission after <strong>' +\n                dataset.timelyDays +\n                ' days </strong></span>';\n            });\n          }\n\n          indicatorDescription += `</p>`;\n\n          /**\n           * Indicator group\n           */\n\n          if (\n            indicator.indicatorGroups &&\n            indicator.indicatorGroups.length > 0\n          ) {\n            indicatorDescription += '<div><p>It belongs to ';\n\n            indicator.indicatorGroups.forEach((indicatorGroup, index) => {\n              if (\n                index !== 0 &&\n                index !== indicator.indicatorGroups.length - 1\n              ) {\n                indicatorDescription += ', ';\n              }\n\n              if (\n                index === indicator.indicatorGroups.length - 1 &&\n                indicator.indicatorGroups.length > 1\n              ) {\n                indicatorDescription += ' and ';\n              }\n\n              indicatorDescription +=\n                '<span><strong>' +\n                indicatorGroup.name +\n                '</strong> with <strong>' +\n                indicatorGroup.indicators +\n                '</strong> other related indicators</span>';\n            });\n\n            indicatorDescription += '</p></div>';\n          }\n\n          /**\n           * Attribute values\n           */\n          if (\n            indicator.attributeValues &&\n            indicator.attributeValues.length > 0\n          ) {\n            indicatorDescription +=\n              '<div><p>Other related details associated with this indicators includes: ';\n\n            indicator.attributeValues.forEach(attr => {\n              indicatorDescription +=\n                '<span><strong>' +\n                attr.attribute.name +\n                ': ' +\n                attr.value +\n                '</strong></span>';\n            });\n\n            indicatorDescription += '</p></div>';\n          }\n\n          /**\n           * Legend set\n           */\n          if (indicator.legendSet) {\n            indicatorDescription +=\n              '<div><p> It makes use of: <strong>' +\n              indicator.legendSet.name +\n              '</strong> legend' +\n              ' set for analysis with <strong>' +\n              indicator.legendSet.legends +\n              ' Classes </strong>using <strong>' +\n              indicator.legendSet.symbolizer +\n              ' for analysis</strong></p></div>';\n          }\n\n          /**\n           * User info\n           */\n          if (indicator.user) {\n            indicatorDescription +=\n              '<div><p>This indicator was <strong> first created </strong> in the system on <strong>' +\n              this.datePipe.transform(indicator.created) +\n              '</strong> by <strong>' +\n              indicator.user.name +\n              '</strong></p></div>';\n          }\n\n          this.store.dispatch(\n            new UpdateDictionaryMetadataAction(indicatorId, {\n              description: indicatorDescription,\n              progress: {\n                loading: false,\n                loadingSucceeded: true,\n                loadingFailed: false\n              }\n            })\n          );\n        });\n      });\n    });\n  }\n\n  getAvailableDataElements(data) {\n    let dataElementUids = [];\n    const separators = [' ', '\\\\+', '-', '\\\\(', '\\\\)', '\\\\*', '/', ':', '\\\\?'];\n    const numeratorDataElements = data.split(\n      new RegExp(separators.join('|'), 'g')\n    );\n    numeratorDataElements.forEach(dataElement => {\n      dataElementUids = this.dataElementWithCategoryOptionCheck(dataElement);\n    });\n    return dataElementUids.join();\n  }\n\n  dataElementWithCategoryOptionCheck(dataElement: any) {\n    const uid = [];\n    if (dataElement.indexOf('.') >= 1) {\n      uid.push(\n        dataElement\n          .replace(/#/g, '')\n          .replace(/{/g, '')\n          .replace(/}/g, '')\n          .split('.')[0]\n      );\n    } else {\n      uid.push(\n        dataElement\n          .replace(/#/g, '')\n          .replace(/{/g, '')\n          .replace(/}/g, '')\n      );\n    }\n\n    return uid;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule, DatePipe } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { DictionaryListComponent } from './components/dictionary-list/dictionary-list.component';\nimport { DictionaryProgressComponent } from './components/dictionary-progress/dictionary-progress.component';\nimport { dictionaryReducer } from './store/reducers/dictionary.reducer';\nimport { DictionaryEffects } from './store/effects/dictionary.effects';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature('dictionary', dictionaryReducer),\n    EffectsModule.forFeature([DictionaryEffects])\n  ],\n\n  declarations: [DictionaryListComponent, DictionaryProgressComponent],\n  exports: [DictionaryListComponent],\n  providers: [DatePipe]\n})\nexport class NgxDhis2DictionaryModule {}\n"],"names":["_.filter","_.map","map","_.find"],"mappings":"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"}
