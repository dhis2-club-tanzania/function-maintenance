/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { DatePipe } from '@angular/common';
import { Store } from '@ngrx/store';
import { Actions, Effect, ofType } from '@ngrx/effects';
import * as _ from 'lodash';
import { mergeMap, map, tap } from 'rxjs/operators';
import { Observable, from, forkJoin } from 'rxjs';
import { NgxDhis2HttpClientService } from '@hisptz/ngx-dhis2-http-client';
import { DictionaryActionTypes, AddDictionaryMetadataListAction, UpdateDictionaryMetadataAction } from '../actions/dictionary.actions';
import { getDictionaryList } from '../selectors/dictionary.selectors';
export class DictionaryEffects {
    /**
     * @param {?} actions$
     * @param {?} store
     * @param {?} httpClient
     * @param {?} datePipe
     */
    constructor(actions$, store, httpClient, datePipe) {
        this.actions$ = actions$;
        this.store = store;
        this.httpClient = httpClient;
        this.datePipe = datePipe;
        this.initializeDictionary$ = this.actions$.pipe(ofType(DictionaryActionTypes.InitializeDictionaryMetadata), mergeMap((action) => this.store
            .select(getDictionaryList(action.dictionaryMetadataIdentifiers))
            .pipe(map((dictionaryList) => _.filter(action.dictionaryMetadataIdentifiers, metadataId => !_.find(dictionaryList, ['id', metadataId]))))), tap(identifiers => {
            /**
                   * Add incoming items to the dictionary list
                   */
            this.store.dispatch(new AddDictionaryMetadataListAction(_.map(identifiers, id => {
                return {
                    id,
                    name: '',
                    description: '',
                    progress: {
                        loading: true,
                        loadingSucceeded: false,
                        loadingFailed: false
                    }
                };
            })));
            /**
                   * Identify corresponding dictionary items
                   */
            from(identifiers)
                .pipe(mergeMap(identifier => this.httpClient.get(`identifiableObjects/${identifier}.json`, true)))
                .subscribe((metadata) => {
                this.store.dispatch(new UpdateDictionaryMetadataAction(metadata.id, {
                    name: metadata.name,
                    progress: {
                        loading: true,
                        loadingSucceeded: true,
                        loadingFailed: false
                    }
                }));
                if (metadata.href && metadata.href.indexOf('indicator') !== -1) {
                    const /** @type {?} */ indicatorUrl = 'indicators/' +
                        metadata.id +
                        '.json?fields=:all,displayName,id,name,numeratorDescription,' +
                        'denominatorDescription,denominator,numerator,annualized,decimals,indicatorType[name],user[name],' +
                        'attributeValues[value,attribute[name]],indicatorGroups[name,indicators~size],legendSet[name,symbolizer,' +
                        'legends~size],dataSets[name]';
                    this.getIndicatorInfo(indicatorUrl, metadata.id);
                }
                else if (metadata.href &&
                    metadata.href.indexOf('dataElement') !== -1) {
                    const /** @type {?} */ dataElementUrl = 'dataElements/' +
                        metadata.id +
                        '.json?fields=:all,id,name,aggregationType,displayName,' +
                        'categoryCombo[id,name,categories[id,name,categoryOptions[id,name]]],dataSets[:all,!compulsoryDataElementOperands]';
                    this.getDataElementInfo(dataElementUrl, metadata.id);
                }
                else if (metadata.href && metadata.href.indexOf('dataSet') !== -1) {
                    const /** @type {?} */ dataSetUrl = 'dataSets/' +
                        metadata.id +
                        '.json?fields=:all,user[:all],id,name,periodType,shortName,' +
                        'categoryCombo[id,name,categories[id,name,categoryOptions[id,name]]]';
                    this.getDataSetInfo(dataSetUrl, metadata.id);
                }
            });
        }));
    }
    /**
     * @param {?} dataSetUrl
     * @param {?} dataSetId
     * @return {?}
     */
    getDataSetInfo(dataSetUrl, dataSetId) {
        this.httpClient.get(`${dataSetUrl}`, true).subscribe((dataSet) => {
            let /** @type {?} */ dataSetDescription = '<p>' +
                dataSet.name +
                ' of the <strong>' +
                dataSet.formType +
                '</strong> Form created ' +
                'at <strong>' +
                this.datePipe.transform(dataSet.created) +
                ' by ' +
                dataSet.user.name +
                '</strong>';
            if (dataSet.categoryCombo && dataSet.categoryCombo.name !== 'default') {
                dataSetDescription +=
                    '<span> With <strong>' +
                        dataSet.categoryCombo.name +
                        '</strong> Dimension which is divided' +
                        ' into ';
                dataSet.categoryCombo.categories.forEach((category, categoryIndex) => {
                    if (categoryIndex !== 0 &&
                        categoryIndex !== dataSet.categoryCombo.categories.length - 1) {
                        dataSetDescription += ', ';
                    }
                    if (categoryIndex === dataSet.categoryCombo.categories.length - 1 &&
                        dataSet.categoryCombo.categories.length > 1) {
                        dataSetDescription += ' and ';
                    }
                    dataSetDescription += '<strong>';
                    category.categoryOptions.forEach((categoryOption, categoryOptionIndex) => {
                        if (categoryOptionIndex !== 0 &&
                            categoryOptionIndex !== category.categoryOptions.length - 1) {
                            dataSetDescription += ', ';
                        }
                        if (categoryOptionIndex === category.categoryOptions.length - 1 &&
                            category.categoryOptions.length > 1) {
                            dataSetDescription += ' and ';
                        }
                        dataSetDescription += '<span>' + categoryOption.name + '</span>';
                    });
                    dataSetDescription += '</strong>';
                });
                dataSetDescription += '</span>';
            }
            dataSetDescription += '</p>';
            this.store.dispatch(new UpdateDictionaryMetadataAction(dataSetId, {
                description: dataSetDescription,
                progress: {
                    loading: false,
                    loadingSucceeded: true,
                    loadingFailed: false
                }
            }));
        });
    }
    /**
     * @param {?} dataElementUrl
     * @param {?} dataElementId
     * @return {?}
     */
    getDataElementInfo(dataElementUrl, dataElementId) {
        this.httpClient
            .get(`${dataElementUrl}`, true)
            .subscribe((dataElement) => {
            let /** @type {?} */ dataElementDescription = '<p>This ' +
                dataElement.name +
                ' of this method of data aggregation <strong>' +
                dataElement.aggregationType +
                '</strong> created at <strong>' +
                this.datePipe.transform(dataElement.created) +
                '</strong> is only taking <strong>' +
                dataElement.domainType +
                '</strong> data. As the culture of helping user ' +
                'not entering unrecognized data, therefore its only taking <strong>' +
                dataElement.valueType +
                '</strong> values ' +
                'from the user input</p>';
            if (dataElement.categoryCombo.name !== 'default') {
                dataElementDescription +=
                    '<p><strong>' +
                        dataElement.name +
                        '</strong> consists of <strong>' +
                        dataElement.categoryCombo.name +
                        '</strong> category combinations of ';
                dataElement.categoryCombo.categories.forEach((category, index) => {
                    if (index !== 0 &&
                        index !== dataElement.categoryCombo.categories.length - 1) {
                        dataElementDescription += ', ';
                    }
                    if (index === dataElement.categoryCombo.categories.length - 1 &&
                        dataElement.categoryCombo.categories.length > 1) {
                        dataElementDescription += ' and ';
                    }
                    dataElementDescription += '<strong>(';
                    category.categoryOptions.forEach((categoryOption, categoryOptionIndex) => {
                        if (categoryOptionIndex !== 0 &&
                            categoryOptionIndex !== category.categoryOptions.length - 1) {
                            dataElementDescription += ', ';
                        }
                        if (categoryOptionIndex === category.categoryOptions.length - 1 &&
                            category.categoryOptions.length > 1) {
                            dataElementDescription += ' and ';
                        }
                        dataElementDescription +=
                            '<span>' + categoryOption.name + '</span>';
                    });
                    dataElementDescription +=
                        ')</strong> of the <strong>' +
                            category.name +
                            '</strong> category';
                });
                dataElementDescription += '</strong></p>';
                // TODO deal with different version of dhis
                if (dataElement.dataSets && dataElement.dataSets.length > 0) {
                    dataElementDescription +=
                        '<h5>' + dataElement.name + ' Sources</h5>';
                    dataElementDescription +=
                        '<p>More than <strong>' +
                            dataElement.dataSets.length +
                            '</strong> dataset ie ';
                    dataElement.dataSets.forEach((dataSet, dataSetIndex) => {
                        if (dataSetIndex !== 0 &&
                            dataSetIndex !== dataElement.dataSets.length - 1) {
                            dataElementDescription += ', ';
                        }
                        if (dataSetIndex === dataElement.dataSets.length - 1 &&
                            dataElement.dataSets.length > 1) {
                            dataElementDescription += ' and ';
                        }
                        dataElementDescription +=
                            '<strong>' + dataSet.name + '</strong>';
                    });
                    dataElementDescription +=
                        ' use this ' + dataElement.name + ' data element';
                    if (dataElement.dataElementGroups &&
                        dataElement.dataElementGroups.length > 0) {
                        dataElementDescription += ' and it belongs to ';
                        dataElement.dataElementGroups.forEach((dataElementGroup, dataElementGroupIndex) => {
                            if (dataElementGroupIndex !== 0 &&
                                dataElementGroupIndex !==
                                    dataElement.dataElementGroups.length - 1) {
                                dataElementDescription += ', ';
                            }
                            if (dataElementGroupIndex ===
                                dataElement.dataElementGroups.length - 1 &&
                                dataElement.dataElementGroups.length > 1) {
                                dataElementDescription += ' and ';
                            }
                            dataElementDescription +=
                                '<strong>' + dataElementGroup.name + ' Group</strong>';
                        });
                    }
                    dataElementDescription += '</p>';
                }
                this.store.dispatch(new UpdateDictionaryMetadataAction(dataElementId, {
                    description: dataElementDescription,
                    progress: {
                        loading: false,
                        loadingSucceeded: true,
                        loadingFailed: false
                    }
                }));
            }
        });
    }
    /**
     * @param {?} indicatorUrl
     * @param {?} indicatorId
     * @return {?}
     */
    getIndicatorInfo(indicatorUrl, indicatorId) {
        this.httpClient.get(`${indicatorUrl}`, true).subscribe((indicator) => {
            let /** @type {?} */ indicatorDescription = '<p><strong>' +
                indicator.name +
                '</strong> is a <strong>' +
                indicator.indicatorType.name +
                ' </strong> indicator';
            if (indicator.numeratorDescription) {
                indicatorDescription +=
                    '<span> with the numerator described as <strong>' +
                        indicator.numeratorDescription +
                        '</strong></span>';
            }
            if (indicator.denominatorDescription) {
                indicatorDescription +=
                    '<span> and denominator described as <strong>' +
                        indicator.denominatorDescription +
                        '</strong></span>';
            }
            indicatorDescription += '</p>';
            if (indicator.annualized) {
                indicatorDescription +=
                    '<p><span>It’s figure is annualized to support analysis in less than year period ' +
                        '(monthly,quarterly,semi-annually)</span></p>';
            }
            this.store.dispatch(new UpdateDictionaryMetadataAction(indicatorId, {
                description: indicatorDescription,
                progress: {
                    loading: true,
                    loadingSucceeded: true,
                    loadingFailed: false
                }
            }));
            /**
                   * Get numerator expression
                   */
            forkJoin(this.httpClient.get('expressions/description?expression=' +
                encodeURIComponent(indicator.numerator), true), this.httpClient.get('dataSets.json?fields=periodType,id,name,timelyDays,formType,created,expiryDays&' +
                'filter=dataSetElements.dataElement.id:in:[' +
                this.getAvailableDataElements(indicator.numerator) +
                ']&paging=false', true)).subscribe((numeratorResults) => {
                if (numeratorResults[0]) {
                    indicatorDescription +=
                        '<p>Numerator is calculated from <strong>' +
                            numeratorResults[0].description +
                            '</strong>';
                }
                if (numeratorResults[1] && numeratorResults[1].dataSets) {
                    const /** @type {?} */ dataSets = numeratorResults[1].dataSets;
                    if (dataSets.length > 0) {
                        indicatorDescription += ' originating from ';
                    }
                    dataSets.forEach((dataset, index) => {
                        if (index !== 0 && index !== dataSets.length - 1) {
                            indicatorDescription += ', ';
                        }
                        if (index === dataSets.length - 1 && dataSets.length > 1) {
                            indicatorDescription += ' and ';
                        }
                        indicatorDescription +=
                            '<span><strong>' +
                                dataset.name +
                                ',</strong> that is collected <strong>' +
                                dataset.periodType +
                                '</strong> with deadline for submission after <strong>' +
                                dataset.timelyDays +
                                ' days </strong></span>';
                    });
                }
                indicatorDescription += `</p>`;
                this.store.dispatch(new UpdateDictionaryMetadataAction(indicatorId, {
                    description: indicatorDescription,
                    progress: {
                        loading: true,
                        loadingSucceeded: true,
                        loadingFailed: false
                    }
                }));
                /**
                         * Get denominator expression
                         */
                forkJoin(this.httpClient.get('expressions/description?expression=' +
                    encodeURIComponent(indicator.denominator), true), this.httpClient.get('dataSets.json?fields=periodType,id,name,timelyDays,formType,created,expiryDays&' +
                    'filter=dataSetElements.dataElement.id:in:[' +
                    this.getAvailableDataElements(indicator.denominator) +
                    ']&paging=false', true)).subscribe((denominatorResults) => {
                    if (denominatorResults[0]) {
                        indicatorDescription +=
                            '<p>Denominator is calculated from <strong>' +
                                denominatorResults[0].description +
                                '</strong>';
                    }
                    if (denominatorResults[1] && denominatorResults[1].dataSets) {
                        const /** @type {?} */ dataSets = denominatorResults[1].dataSets;
                        if (dataSets.length > 0) {
                            indicatorDescription += ' originating from ';
                        }
                        dataSets.forEach((dataset, index) => {
                            if (index !== 0 && index !== dataSets.length - 1) {
                                indicatorDescription += ', ';
                            }
                            if (index === dataSets.length - 1 && dataSets.length > 1) {
                                indicatorDescription += ' and ';
                            }
                            indicatorDescription +=
                                '<span><strong>' +
                                    dataset.name +
                                    ',</strong> that is collected <strong>' +
                                    dataset.periodType +
                                    '</strong> with deadline for submission after <strong>' +
                                    dataset.timelyDays +
                                    ' days </strong></span>';
                        });
                    }
                    indicatorDescription += `</p>`;
                    /**
                               * Indicator group
                               */
                    if (indicator.indicatorGroups &&
                        indicator.indicatorGroups.length > 0) {
                        indicatorDescription += '<div><p>It belongs to ';
                        indicator.indicatorGroups.forEach((indicatorGroup, index) => {
                            if (index !== 0 &&
                                index !== indicator.indicatorGroups.length - 1) {
                                indicatorDescription += ', ';
                            }
                            if (index === indicator.indicatorGroups.length - 1 &&
                                indicator.indicatorGroups.length > 1) {
                                indicatorDescription += ' and ';
                            }
                            indicatorDescription +=
                                '<span><strong>' +
                                    indicatorGroup.name +
                                    '</strong> with <strong>' +
                                    indicatorGroup.indicators +
                                    '</strong> other related indicators</span>';
                        });
                        indicatorDescription += '</p></div>';
                    }
                    /**
                               * Attribute values
                               */
                    if (indicator.attributeValues &&
                        indicator.attributeValues.length > 0) {
                        indicatorDescription +=
                            '<div><p>Other related details associated with this indicators includes: ';
                        indicator.attributeValues.forEach(attr => {
                            indicatorDescription +=
                                '<span><strong>' +
                                    attr.attribute.name +
                                    ': ' +
                                    attr.value +
                                    '</strong></span>';
                        });
                        indicatorDescription += '</p></div>';
                    }
                    /**
                               * Legend set
                               */
                    if (indicator.legendSet) {
                        indicatorDescription +=
                            '<div><p> It makes use of: <strong>' +
                                indicator.legendSet.name +
                                '</strong> legend' +
                                ' set for analysis with <strong>' +
                                indicator.legendSet.legends +
                                ' Classes </strong>using <strong>' +
                                indicator.legendSet.symbolizer +
                                ' for analysis</strong></p></div>';
                    }
                    /**
                               * User info
                               */
                    if (indicator.user) {
                        indicatorDescription +=
                            '<div><p>This indicator was <strong> first created </strong> in the system on <strong>' +
                                this.datePipe.transform(indicator.created) +
                                '</strong> by <strong>' +
                                indicator.user.name +
                                '</strong></p></div>';
                    }
                    this.store.dispatch(new UpdateDictionaryMetadataAction(indicatorId, {
                        description: indicatorDescription,
                        progress: {
                            loading: false,
                            loadingSucceeded: true,
                            loadingFailed: false
                        }
                    }));
                });
            });
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getAvailableDataElements(data) {
        let /** @type {?} */ dataElementUids = [];
        const /** @type {?} */ separators = [' ', '\\+', '-', '\\(', '\\)', '\\*', '/', ':', '\\?'];
        const /** @type {?} */ numeratorDataElements = data.split(new RegExp(separators.join('|'), 'g'));
        numeratorDataElements.forEach(dataElement => {
            dataElementUids = this.dataElementWithCategoryOptionCheck(dataElement);
        });
        return dataElementUids.join();
    }
    /**
     * @param {?} dataElement
     * @return {?}
     */
    dataElementWithCategoryOptionCheck(dataElement) {
        const /** @type {?} */ uid = [];
        if (dataElement.indexOf('.') >= 1) {
            uid.push(dataElement
                .replace(/#/g, '')
                .replace(/{/g, '')
                .replace(/}/g, '')
                .split('.')[0]);
        }
        else {
            uid.push(dataElement
                .replace(/#/g, '')
                .replace(/{/g, '')
                .replace(/}/g, ''));
        }
        return uid;
    }
}
DictionaryEffects.decorators = [
    { type: Injectable },
];
/** @nocollapse */
DictionaryEffects.ctorParameters = () => [
    { type: Actions },
    { type: Store },
    { type: NgxDhis2HttpClientService },
    { type: DatePipe }
];
tslib_1.__decorate([
    Effect({ dispatch: false }),
    tslib_1.__metadata("design:type", Observable)
], DictionaryEffects.prototype, "initializeDictionary$", void 0);
function DictionaryEffects_tsickle_Closure_declarations() {
    /** @type {?} */
    DictionaryEffects.prototype.initializeDictionary$;
    /** @type {?} */
    DictionaryEffects.prototype.actions$;
    /** @type {?} */
    DictionaryEffects.prototype.store;
    /** @type {?} */
    DictionaryEffects.prototype.httpClient;
    /** @type {?} */
    DictionaryEffects.prototype.datePipe;
}

//# sourceMappingURL=data:application/json;base64,