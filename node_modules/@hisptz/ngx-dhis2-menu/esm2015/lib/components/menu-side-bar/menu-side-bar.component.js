/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { MenuService } from '../../services/menu.service';
import { PROFILE_MENUS } from '../../constants/profile-menus';
export class MenuSideBarComponent {
    /**
     * @param {?} menuService
     */
    constructor(menuService) {
        this.menuService = menuService;
        this.showProfile = false;
        this.rootUrl = '../../../';
        this.loadingUser = true;
        this.apps = [];
        this.originalApps = [];
        this.loadingModules = true;
        this.profileMenus = PROFILE_MENUS;
        this.filteredApp = '';
        this.showSidebarApps = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.menuService.getUserInfo(this.rootUrl).subscribe((profile) => {
            if (profile) {
                this.currentUser = {
                    name: profile.displayName,
                    email: profile.email
                };
            }
            this.loadingUser = false;
        });
        this.menuService
            .getMenuModules(this.rootUrl)
            .subscribe((menuModules) => {
            if (menuModules !== null) {
                this.loadingModules = false;
                this.originalApps = [...menuModules];
                this.apps = this._prepareMenuModules();
            }
        });
    }
    /**
     * @return {?}
     */
    _prepareMenuModules() {
        return this.filteredApp === ''
            ? this.originalApps.filter((menu) => {
                return !menu.onlyShowOnSearch;
            })
            : this.originalApps;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    toggleSidebarMenus(e) {
        e.stopPropagation();
        this.showSidebarApps = !this.showSidebarApps;
    }
    /**
     * @return {?}
     */
    updateMenuModules() {
        this.apps = this._prepareMenuModules();
    }
}
MenuSideBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-menu-side-bar',
                template: `<div >
  <div class="sidebar-user-profile-block">
    <div class="sidebar-user-profile-logo" *ngIf="!loadingUser">{{currentUser?.name | abbreviate}}</div>
    <div class="sidebar-user-profile-info">
      <h4 *ngIf="!loadingUser">{{currentUser?.name}}</h4>
      <h6 *ngIf="!loadingUser">{{currentUser?.email}}</h6>
    </div>
  </div>
  <ul class="sidebar-list-block">
    <li>
      <a (click)="toggleSidebarMenus($event)">Apps</a>
    </li>
    <li
      [ngClass]="{
          'sidebar-app-hidden': !showSidebarApps
        }"
    >
      <input
        type="text"
        class="sidebar-app-input"
        placeholder="Search Apps"
        [(ngModel)]="filteredApp"
        (ngModelChange)="updateMenuModules()"
      >
    </li>
    <li
      class="sidebar-app-list"
      [ngClass]="{
          'sidebar-app-hidden': !showSidebarApps
        }"
    >
      <a
        *ngFor="let app of  apps | filterByName: filteredApp"
        [href]="app.defaultAction"
        class="app-menu-btn sidebar-app-menu-btn">
        <img alt="" [src]="app.icon" title="{{app.displayName}}">
        <div class="app-menu-name">{{app.displayName}}</div>
      </a>
    </li>
    <li *ngFor="let profileMenu of profileMenus">
      <a [href]="rootUrl + profileMenu.defaultAction">
        <img alt="" [src]="profileMenu.icon">
        {{profileMenu.name}}
      </a>
    </li>
    <li>
      <a [href]="rootUrl + 'dhis-web-commons-security/logout.action'">Log Out</a>
    </li>
  </ul>
</div>
`,
                styles: [`.sidebar-user-profile-block{text-align:left;background-color:#eee;height:100px;padding:5px;display:flex}.sidebar-user-profile-logo{height:90px;vertical-align:middle;padding:15px;font-size:40px;font-weight:500;color:#9e9e9e;width:90px;border-radius:45px;background-color:#ddd}.sidebar-user-profile-info{padding:15px}.sidebar-list-block{list-style-type:none;margin:0;padding:0;display:block}.sidebar-hidden{display:none!important}.sidebar-app-input{border-style:none;border-bottom:1px solid #eee;color:#000;width:100%;padding:7px}.sidebar-app-input:focus{outline:0}.sidebar-list-block li a{text-decoration:none;width:100%;display:block;color:#000;border-bottom:1px solid #eee;padding:10px 15px}.sidebar-list-block li a img{height:17px}.sidebar-app-list{display:flex;overflow:auto;height:200px;flex-wrap:wrap}.sidebar-app-menu-btn{margin:5px;text-decoration:none;padding:15px;border-radius:5px;border:1px solid #ddd;text-align:center;transition:all .2s ease-in-out;width:25%;height:85px}`]
            },] },
];
/** @nocollapse */
MenuSideBarComponent.ctorParameters = () => [
    { type: MenuService }
];
MenuSideBarComponent.propDecorators = {
    rootUrl: [{ type: Input }]
};
function MenuSideBarComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    MenuSideBarComponent.prototype.rootUrl;
    /** @type {?} */
    MenuSideBarComponent.prototype.showProfile;
    /** @type {?} */
    MenuSideBarComponent.prototype.currentUser;
    /** @type {?} */
    MenuSideBarComponent.prototype.loadingUser;
    /** @type {?} */
    MenuSideBarComponent.prototype.profileMenus;
    /** @type {?} */
    MenuSideBarComponent.prototype.apps;
    /** @type {?} */
    MenuSideBarComponent.prototype.originalApps;
    /** @type {?} */
    MenuSideBarComponent.prototype.loadingModules;
    /** @type {?} */
    MenuSideBarComponent.prototype.filteredApp;
    /** @type {?} */
    MenuSideBarComponent.prototype.showSidebarApps;
    /** @type {?} */
    MenuSideBarComponent.prototype.menuService;
}

//# sourceMappingURL=data:application/json;base64,