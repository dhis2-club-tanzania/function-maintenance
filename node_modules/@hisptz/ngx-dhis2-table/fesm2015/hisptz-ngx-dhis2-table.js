import { Component, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} favoriteObject
 * @param {?} visualizationLayout
 * @param {?} type
 * @return {?}
 */
function getTableConfiguration(favoriteObject, visualizationLayout, type) {
    return {
        title: favoriteObject.hasOwnProperty('displayName')
            ? favoriteObject.displayName
            : favoriteObject.hasOwnProperty('name')
                ? favoriteObject.name
                : '',
        subtitle: favoriteObject.hasOwnProperty('subtitle')
            ? favoriteObject.subtitle
            : '',
        showColumnTotal: favoriteObject.hasOwnProperty('colTotal')
            ? favoriteObject.colTotal
            : true,
        showColumnSubtotal: favoriteObject.hasOwnProperty('colSubtotal')
            ? favoriteObject.colSubtotal
            : true,
        showRowTotal: favoriteObject.hasOwnProperty('rowTotal')
            ? favoriteObject.rowTotal
            : true,
        showRowSubtotal: favoriteObject.hasOwnProperty('rowSubtotal')
            ? favoriteObject.rowSubtotal
            : true,
        showDimensionLabels: favoriteObject.hasOwnProperty('showDimensionLabels')
            ? favoriteObject.showDimensionLabels
            : true,
        hideEmptyRows: favoriteObject.hasOwnProperty('hideEmptyRows')
            ? favoriteObject.hideEmptyRows
            : true,
        showHierarchy: favoriteObject.hasOwnProperty('showHierarchy')
            ? favoriteObject.showHierarchy
            : true,
        displayList: checkForEventDataType(favoriteObject, type),
        rows: visualizationLayout.rows ? visualizationLayout.rows : ['pe'],
        columns: visualizationLayout.columns ? visualizationLayout.columns : ['dx'],
        legendSet: favoriteObject.legendSet || null,
        styles: null
    };
}
/**
 * @param {?} favoriteObject
 * @param {?} favoriteType
 * @return {?}
 */
function checkForEventDataType(favoriteObject, favoriteType) {
    let /** @type {?} */ displayList = false;
    if (favoriteType === 'EVENT_REPORT') {
        if (favoriteObject.hasOwnProperty('dataType') &&
            favoriteObject.dataType === 'EVENTS') {
            displayList = true;
        }
    }
    return displayList;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} analyticsObject
 * @param {?} tableConfiguration
 * @return {?}
 */
function drawTable(analyticsObject, tableConfiguration) {
    const /** @type {?} */ legendClasses = tableConfiguration.legendSet
        ? tableConfiguration.legendSet.legends
        : null;
    const /** @type {?} */ table = {
        headers: [],
        columns: [],
        rows: [],
        titles: {
            rows: [],
            column: []
        },
        titlesAvailable: false,
        hasParentOu: false
    };
    if (tableConfiguration.hasOwnProperty('title')) {
        table['title'] = tableConfiguration.title;
    }
    if (tableConfiguration.hasOwnProperty('subtitle')) {
        table['subtitle'] = tableConfiguration.subtitle;
    }
    if (tableConfiguration.displayList) {
        table.headers[0] = {
            items: [],
            style: ''
        };
        tableConfiguration.columns[tableConfiguration.columns.indexOf('pe')] =
            'eventdate';
        tableConfiguration.columns[tableConfiguration.columns.indexOf('ou')] =
            'ouname';
        for (const /** @type {?} */ item of tableConfiguration.columns) {
            table.headers[0].items.push({
                name: analyticsObject.headers[getTitleIndex(analyticsObject.headers, item)]
                    .column,
                span: 1
            });
        }
        for (const /** @type {?} */ item of analyticsObject.rows) {
            const /** @type {?} */ column_items = [];
            for (const /** @type {?} */ col of tableConfiguration.columns) {
                const /** @type {?} */ index = getTitleIndex(analyticsObject.headers, col);
                column_items.push({
                    name: '',
                    display: true,
                    row_span: '1',
                    // color:getColor(item[index],)
                    val: item[index]
                });
            }
            table.rows.push({
                headers: [],
                items: column_items
            });
        }
    }
    else {
        // add names to titles array
        if (tableConfiguration.showDimensionLabels) {
            table.titlesAvailable = true;
            for (const /** @type {?} */ item of tableConfiguration.columns) {
                table.titles.column.push(analyticsObject.headers[getTitleIndex(analyticsObject.headers, item)]
                    .column);
            }
            for (const /** @type {?} */ item of tableConfiguration.rows) {
                table.titles.rows.push(analyticsObject.headers[getTitleIndex(analyticsObject.headers, item)]
                    .column);
            }
        }
        for (const /** @type {?} */ columnItem of tableConfiguration.columns) {
            const /** @type {?} */ dimension = calculateColSpan(analyticsObject, tableConfiguration.columns, columnItem);
            const /** @type {?} */ currentColumnItems = prepareSingleCategories(analyticsObject, columnItem);
            const /** @type {?} */ headerItem = [];
            for (let /** @type {?} */ i = 0; i < dimension.duplication; i++) {
                for (const /** @type {?} */ currentItem of currentColumnItems) {
                    headerItem.push({
                        name: currentItem.name,
                        span: dimension.col_span,
                        type: currentItem.type,
                        id: currentItem.uid
                    });
                }
            }
            let /** @type {?} */ styles = '';
            if (tableConfiguration.hasOwnProperty('style')) {
                if (tableConfiguration.styles.hasOwnProperty(columnItem)) {
                    styles = tableConfiguration.styles[columnItem];
                }
            }
            table.headers.push({ items: headerItem, style: styles });
        }
        for (const /** @type {?} */ rowItem of tableConfiguration.rows) {
            table.columns.push(rowItem);
        }
        // Preparing table columns
        const /** @type {?} */ column_length = tableConfiguration.columns.length;
        const /** @type {?} */ column_items_array = [];
        for (let /** @type {?} */ i = 0; i < column_length; i++) {
            const /** @type {?} */ currentRowItems = prepareSingleCategories(analyticsObject, tableConfiguration.columns[i]);
            column_items_array.push(currentRowItems);
        }
        let /** @type {?} */ table_columns_array = [];
        for (let /** @type {?} */ i = 0; i < column_items_array.length; i++) {
            if (table_columns_array.length === 0) {
                for (const /** @type {?} */ item of column_items_array[i]) {
                    table_columns_array.push([item]);
                }
            }
            else {
                const /** @type {?} */ temp_arr = table_columns_array.concat();
                table_columns_array = [];
                for (const /** @type {?} */ item of temp_arr) {
                    for (const /** @type {?} */ val of column_items_array[i]) {
                        if (item instanceof Array) {
                            const /** @type {?} */ tempArr = Array.from(item);
                            table_columns_array.push(tempArr.concat([val]));
                        }
                        else {
                            table_columns_array.push([item, val]);
                        }
                    }
                }
            }
        }
        // Preparing table rows
        const /** @type {?} */ rows_length = tableConfiguration.rows.length;
        const /** @type {?} */ row_items_array = [];
        for (let /** @type {?} */ i = 0; i < rows_length; i++) {
            const /** @type {?} */ dimension = calculateColSpan(analyticsObject, tableConfiguration.rows, tableConfiguration.rows[i]);
            const /** @type {?} */ currentRowItems = prepareSingleCategories(analyticsObject, tableConfiguration.rows[i]);
            row_items_array.push({ items: currentRowItems, dimensions: dimension });
        }
        let /** @type {?} */ table_rows_array = [];
        for (let /** @type {?} */ i = 0; i < row_items_array.length; i++) {
            if (table_rows_array.length === 0) {
                for (const /** @type {?} */ item of row_items_array[i].items) {
                    item.dimensions = row_items_array[i].dimensions;
                    table_rows_array.push([item]);
                }
            }
            else {
                const /** @type {?} */ temp_arr = table_rows_array.concat();
                table_rows_array = [];
                for (const /** @type {?} */ item of temp_arr) {
                    for (const /** @type {?} */ val of row_items_array[i].items) {
                        val.dimensions = row_items_array[i].dimensions;
                        if (item instanceof Array) {
                            const /** @type {?} */ tempArr = Array.from(item);
                            table_rows_array.push(tempArr.concat([val]));
                        }
                        else {
                            table_rows_array.push([item, val]);
                        }
                    }
                }
            }
        }
        let /** @type {?} */ counter = 0;
        if (table_rows_array.length !== 0) {
            for (const /** @type {?} */ rowItem of table_rows_array) {
                const /** @type {?} */ item = {
                    items: [],
                    headers: rowItem
                };
                for (const /** @type {?} */ val of rowItem) {
                    if (counter === 0 || counter % val.dimensions.col_span === 0) {
                        item.items.push({
                            type: val.type,
                            name: val.uid,
                            val: val.name,
                            row_span: val.dimensions.col_span,
                            header: true
                        });
                    }
                }
                for (const /** @type {?} */ colItem of table_columns_array) {
                    const /** @type {?} */ dataItem = [];
                    for (const /** @type {?} */ val of rowItem) {
                        dataItem.push({ type: val.type, value: val.uid });
                    }
                    for (const /** @type {?} */ val of colItem) {
                        dataItem.push({ type: val.type, value: val.uid });
                    }
                    item.items.push({
                        name: '',
                        val: getDataValue(analyticsObject, dataItem),
                        color: getDataValueColor(legendClasses, getDataValue(analyticsObject, dataItem)),
                        row_span: '1',
                        display: true
                    });
                }
                if (tableConfiguration.hasOwnProperty('hideEmptyRows') &&
                    tableConfiguration.hideEmptyRows) {
                    if (!checkZeros(tableConfiguration.rows.length, item.items)) {
                        table.rows.push(item);
                    }
                }
                else {
                    table.rows.push(item);
                }
                counter++;
            }
        }
        else {
            const /** @type {?} */ item = {
                items: [],
                headers: []
            };
            for (const /** @type {?} */ colItem of table_columns_array) {
                const /** @type {?} */ dataItem = [];
                for (const /** @type {?} */ val of colItem) {
                    dataItem.push({ type: val.type, value: val.uid });
                }
                item.items.push({
                    name: '',
                    val: getDataValue(analyticsObject, dataItem),
                    row_span: '1',
                    display: true
                });
            }
            if (tableConfiguration.hasOwnProperty('hideEmptyRows') &&
                tableConfiguration.hideEmptyRows) {
                if (!checkZeros(tableConfiguration.rows.length, item.items)) {
                    table.rows.push(item);
                }
            }
            else {
                table.rows.push(item);
            }
        }
    }
    // todo improve total options to also work for event table
    // return _getSanitizedTableObject(table, tableConfiguration);
    return table;
}
/**
 * @param {?} analyticsObjectHeaders
 * @param {?} name
 * @return {?}
 */
function getTitleIndex(analyticsObjectHeaders, name) {
    let /** @type {?} */ index = 0;
    let /** @type {?} */ counter = 0;
    for (const /** @type {?} */ header of analyticsObjectHeaders) {
        if (header.name === name) {
            index = counter;
        }
        counter++;
    }
    return index;
}
/**
 * @param {?} analyticsObject
 * @param {?} array
 * @param {?} item
 * @return {?}
 */
function calculateColSpan(analyticsObject, array, item) {
    const /** @type {?} */ indexOfItem = array.indexOf(item);
    const /** @type {?} */ array_length = array.length;
    const /** @type {?} */ last_index = array_length - 1;
    const /** @type {?} */ dimensions = { col_span: 1, duplication: 1 };
    for (let /** @type {?} */ i = last_index; i > indexOfItem; i--) {
        const /** @type {?} */ arr = prepareSingleCategories(analyticsObject, array[i]);
        dimensions.col_span = dimensions.col_span * arr.length;
    }
    for (let /** @type {?} */ i = 0; i < indexOfItem; i++) {
        const /** @type {?} */ arr = prepareSingleCategories(analyticsObject, array[i]);
        dimensions.duplication = dimensions.duplication * arr.length;
    }
    return dimensions;
}
/**
 * @param {?} initialAnalytics
 * @param {?} itemIdentifier
 * @param {?=} preDefinedItems
 * @return {?}
 */
function prepareSingleCategories(initialAnalytics, itemIdentifier, preDefinedItems = []) {
    const /** @type {?} */ analyticsObject = sanitizeIncomingAnalytics(initialAnalytics);
    const /** @type {?} */ structure = [];
    if (preDefinedItems.length === 0) {
        for (const /** @type {?} */ val of getMetadataArray(analyticsObject, itemIdentifier)) {
            structure.push({
                name: analyticsObject.metaData.names[val],
                uid: val,
                type: itemIdentifier
            });
        }
    }
    if (preDefinedItems.length !== 0) {
        for (const /** @type {?} */ val of preDefinedItems) {
            structure.push({
                name: analyticsObject.metaData.names[val],
                uid: val,
                type: itemIdentifier
            });
        }
    }
    return structure;
}
/**
 * @param {?} analyticsObject
 * @return {?}
 */
function sanitizeIncomingAnalytics(analyticsObject) {
    return analyticsObject;
}
/**
 * @param {?} analyticsObject
 * @param {?} metadataType
 * @return {?}
 */
function getMetadataArray(analyticsObject, metadataType) {
    let /** @type {?} */ metadataArray = [];
    if (metadataType === 'dx') {
        metadataArray = analyticsObject.metaData.dx;
    }
    else if (metadataType === 'ou') {
        metadataArray = analyticsObject.metaData.ou;
    }
    else if (metadataType === 'co') {
        metadataArray = analyticsObject.metaData.co;
    }
    else if (metadataType === 'pe') {
        metadataArray = analyticsObject.metaData.pe;
    }
    else {
        metadataArray = analyticsObject.metaData[metadataType];
    }
    return metadataArray;
}
/**
 * @param {?} analyticsObject
 * @param {?=} dataItems
 * @return {?}
 */
function getDataValue(analyticsObject, dataItems = []) {
    let /** @type {?} */ num = null;
    for (const /** @type {?} */ value of analyticsObject.rows) {
        let /** @type {?} */ counter = 0;
        for (const /** @type {?} */ item of dataItems) {
            if (value[getTitleIndex(analyticsObject.headers, item.type)] === item.value) {
                counter++;
            }
        }
        if (counter === dataItems.length) {
            if (isNaN(value[getTitleIndex(analyticsObject.headers, 'value')])) {
                num = value[getTitleIndex(analyticsObject.headers, 'value')];
            }
            else {
                num += parseFloat(value[getTitleIndex(analyticsObject.headers, 'value')]);
            }
        }
    }
    return num;
}
/**
 * @param {?} legendClasses
 * @param {?} value
 * @return {?}
 */
function getDataValueColor(legendClasses, value) {
    let /** @type {?} */ color = '';
    if (!isNaN(value) && legendClasses) {
        legendClasses.forEach(legendClass => {
            if (legendClass.startValue <= value && legendClass.endValue > value) {
                color = legendClass.color;
            }
            // if (legendClass.startValue < value && legendClass.endValue >= value) {
            // }
        });
    }
    return color;
}
/**
 * @param {?} stating_length
 * @param {?} array
 * @return {?}
 */
function checkZeros(stating_length, array) {
    let /** @type {?} */ checker = true;
    for (let /** @type {?} */ i = stating_length; i < array.length; i++) {
        if (array[i].name === '' && array[i].val != null) {
            checker = false;
        }
    }
    return checker;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TableListComponent {
    constructor() {
        this.tableLayers = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.visualizationLayers && this.visualizationLayers.length > 0) {
            this.tableLayers = this.visualizationLayers.map((layer) => {
                return {
                    tableConfiguration: getTableConfiguration(layer.config || {}, layer.layout, this.visualizationType),
                    analyticsObject: layer.analytics
                };
            });
        }
    }
}
TableListComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'ngx-dhis2-table-list',
                template: `<div class="row">
    <div class="col-12" *ngFor="let tableLayer of tableLayers">
        <ngx-dhis2-table-item [analyticsObject]="tableLayer.analyticsObject" [tableConfiguration]="tableLayer.tableConfiguration">
        </ngx-dhis2-table-item>
    </div>
</div>`,
                styles: [``]
            },] },
];
/** @nocollapse */
TableListComponent.ctorParameters = () => [];
TableListComponent.propDecorators = {
    visualizationLayers: [{ type: Input }],
    visualizationType: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TableItemComponent {
    constructor() {
        this.sort_direction = [];
        this.current_sorting = [];
        this.tableObject = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.analyticsObject && this.tableConfiguration) {
            this.tableObject = drawTable(this.analyticsObject, this.tableConfiguration);
        }
    }
    /**
     * @param {?} tableObject
     * @param {?} n
     * @param {?} isLastItem
     * @return {?}
     */
    sortData(tableObject, n, isLastItem) {
        if (tableObject.columns.length === 1 && isLastItem) {
            this.current_sorting = [];
            this.current_sorting[n] = true;
            let /** @type {?} */ table, /** @type {?} */
            rows, /** @type {?} */
            switching, /** @type {?} */
            i, /** @type {?} */
            x, /** @type {?} */
            y, /** @type {?} */
            shouldSwitch, /** @type {?} */
            dir, /** @type {?} */
            switchcount = 0;
            table = document.getElementById('myPivotTable');
            switching = true;
            //  Set the sorting direction to ascending:
            dir = 'asc';
            /*Make a loop that will continue until
                   no switching has been done:*/
            while (switching) {
                //  start by saying: no switching is done:
                switching = false;
                rows = table.getElementsByTagName('TR');
                /*Loop through all table rows (except the
                         first, which contains table headers):*/
                for (i = 0; i < rows.length - 1; i++) {
                    // start by saying there should be no switching:
                    shouldSwitch = false;
                    /*Get the two elements you want to compare,
                               one from current row and one from the next:*/
                    x = rows[i].getElementsByTagName('TD')[n];
                    y = rows[i + 1].getElementsByTagName('TD')[n];
                    /*check if the two rows should switch place,
                               based on the direction, asc or desc:*/
                    if (dir === 'asc') {
                        if (parseFloat(x.innerHTML)) {
                            if (parseFloat(x.innerHTML) > parseFloat(y.innerHTML)) {
                                // if so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        }
                        else {
                            if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                                // if so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        }
                        this.sort_direction[n] = 'asc';
                    }
                    else if (dir === 'desc') {
                        if (parseFloat(x.innerHTML)) {
                            if (parseFloat(x.innerHTML) < parseFloat(y.innerHTML)) {
                                // if so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        }
                        else {
                            if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                                // if so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        }
                        this.sort_direction[n] = 'desc';
                    }
                }
                if (shouldSwitch) {
                    /*If a switch has been marked, make the switch
                               and mark that a switch has been done:*/
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    // Each time a switch is done, increase this count by 1:
                    switchcount++;
                }
                else {
                    /*If no switching has been done AND the direction is 'asc',
                               set the direction to 'desc' and run the while loop again.*/
                    if (switchcount === 0 && dir === 'asc') {
                        dir = 'desc';
                        this.sort_direction[n] = 'desc';
                        switching = true;
                    }
                }
            }
        }
    }
}
TableItemComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'ngx-dhis2-table-item',
                template: `<div class="row">
    <div class="col-md-12" *ngIf="tableObject">
        <h5 style="margin-top: 80px" class="text-center" *ngIf="tableObject.rows.length == 0"> No data to display</h5>

        <div *ngIf="tableObject" style="padding: 3px">
            <!--<h4 *ngIf="tableObject.rows.length != 0" class="text-center" style="margin-bottom: 0px">{{tableObject?.title}}</h4>-->
            <table class="table table-bordered table-responsive table-condensed custom-table" *ngIf="tableObject.rows.length != 0">
                <thead>
                    <!--title-->
                    <tr class="table-title">
                        <th [attr.colspan]="tableObject.rows[0].items.length">
                            <h4 style="margin: 0px" class="text-center">{{tableObject.subtitle}} </h4>
                        </th>
                    </tr>
                    <!--headers-->
                    <tr *ngFor="let header of tableObject.headers; let j = index" class="header-column">
                        <th *ngIf="tableObject.hasParentOu"></th>
                        <th *ngFor="let table_column of tableObject.columns; let i = index" style="text-align: center">
                            <span *ngIf="i==tableObject.columns.length-1 && j==tableObject.headers.length-1 && tableObject.titlesAvailable">{{ tableObject.titles.rows[i] }} / {{ tableObject.titles.column[j]}}</span>
                            <span *ngIf="i != tableObject.columns.length-1">{{ tableObject.titles.rows[i] }}</span>
                            <span *ngIf="j != tableObject.headers.length-1">{{ tableObject.titles.column[j] }}</span>
                        </th>
                        <th *ngFor="let header_column of header.items; let i=index" [colSpan]="header_column.span" style="text-align: center" (click)="sortData(tableObject,i+tableObject.columns.length,j+1==tableObject.headers.length)">
                            {{ header_column.name }}
                            <span *ngIf="j+1==tableObject.headers.length && current_sorting[i+tableObject.columns.length] && sort_direction[i+tableObject.columns.length] == 'asc'" class="glyphicon glyphicon-triangle-top pull-right"></span>
                            <span *ngIf="j+1==tableObject.headers.length && current_sorting[i+tableObject.columns.length] && sort_direction[i+tableObject.columns.length] == 'desc'" class="glyphicon glyphicon-triangle-bottom pull-right"></span>
                        </th>
                    </tr>
                </thead>
                <tbody id="myPivotTable">
                    <tr *ngFor="let row of tableObject.rows" [ngClass]="{'sub-total': row.sub_total}">
                        <td *ngFor="let header_column of row.items;let i = index" [ngClass]="{'header-column': header_column.name != ''}" style="text-align: center;vertical-align: middle" [attr.rowspan]="header_column.row_span" [style.background]="header_column.color">
                            {{ header_column.val }}
                        </td>
                    </tr>
                </tbody>
            </table>


        </div>
    </div>
</div>`,
                styles: [`.table-item-container{overflow:hidden}.custom-table{display:table;border-style:none!important;width:100%}.custom-table td,.custom-table th{border:thin solid #f1f1f1}.custom-table>tbody>tr>td,.custom-table>thead>tr>th{font-size:13px!important}table tr th{background-color:rgba(238,238,238,.29);padding:4px;text-align:center}table tr td{padding:4px}table tr td:first-child{background-color:rgba(238,238,238,.29)}.table-title{font-size:13px;font-weight:600;text-align:center}`]
            },] },
];
/** @nocollapse */
TableItemComponent.ctorParameters = () => [];
TableItemComponent.propDecorators = {
    tableConfiguration: [{ type: Input }],
    analyticsObject: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxDhis2TableModule {
}
NgxDhis2TableModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [TableListComponent, TableItemComponent],
                exports: [TableListComponent, TableItemComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxDhis2TableModule, TableItemComponent as ɵb, TableListComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,