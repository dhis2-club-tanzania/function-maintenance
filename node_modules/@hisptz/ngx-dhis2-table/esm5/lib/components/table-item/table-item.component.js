/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { drawTable } from '../../helpers/index';
var TableItemComponent = /** @class */ (function () {
    function TableItemComponent() {
        this.sort_direction = [];
        this.current_sorting = [];
        this.tableObject = null;
    }
    /**
     * @return {?}
     */
    TableItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.analyticsObject && this.tableConfiguration) {
            this.tableObject = drawTable(this.analyticsObject, this.tableConfiguration);
        }
    };
    /**
     * @param {?} tableObject
     * @param {?} n
     * @param {?} isLastItem
     * @return {?}
     */
    TableItemComponent.prototype.sortData = /**
     * @param {?} tableObject
     * @param {?} n
     * @param {?} isLastItem
     * @return {?}
     */
    function (tableObject, n, isLastItem) {
        if (tableObject.columns.length === 1 && isLastItem) {
            this.current_sorting = [];
            this.current_sorting[n] = true;
            var /** @type {?} */ table = void 0, /** @type {?} */
            rows = void 0, /** @type {?} */
            switching = void 0, /** @type {?} */
            i = void 0, /** @type {?} */
            x = void 0, /** @type {?} */
            y = void 0, /** @type {?} */
            shouldSwitch = void 0, /** @type {?} */
            dir = void 0, /** @type {?} */
            switchcount = 0;
            table = document.getElementById('myPivotTable');
            switching = true;
            //  Set the sorting direction to ascending:
            dir = 'asc';
            /*Make a loop that will continue until
                   no switching has been done:*/
            while (switching) {
                //  start by saying: no switching is done:
                switching = false;
                rows = table.getElementsByTagName('TR');
                /*Loop through all table rows (except the
                         first, which contains table headers):*/
                for (i = 0; i < rows.length - 1; i++) {
                    // start by saying there should be no switching:
                    shouldSwitch = false;
                    /*Get the two elements you want to compare,
                               one from current row and one from the next:*/
                    x = rows[i].getElementsByTagName('TD')[n];
                    y = rows[i + 1].getElementsByTagName('TD')[n];
                    /*check if the two rows should switch place,
                               based on the direction, asc or desc:*/
                    if (dir === 'asc') {
                        if (parseFloat(x.innerHTML)) {
                            if (parseFloat(x.innerHTML) > parseFloat(y.innerHTML)) {
                                // if so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        }
                        else {
                            if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                                // if so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        }
                        this.sort_direction[n] = 'asc';
                    }
                    else if (dir === 'desc') {
                        if (parseFloat(x.innerHTML)) {
                            if (parseFloat(x.innerHTML) < parseFloat(y.innerHTML)) {
                                // if so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        }
                        else {
                            if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                                // if so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        }
                        this.sort_direction[n] = 'desc';
                    }
                }
                if (shouldSwitch) {
                    /*If a switch has been marked, make the switch
                               and mark that a switch has been done:*/
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    // Each time a switch is done, increase this count by 1:
                    switchcount++;
                }
                else {
                    /*If no switching has been done AND the direction is 'asc',
                               set the direction to 'desc' and run the while loop again.*/
                    if (switchcount === 0 && dir === 'asc') {
                        dir = 'desc';
                        this.sort_direction[n] = 'desc';
                        switching = true;
                    }
                }
            }
        }
    };
    TableItemComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'ngx-dhis2-table-item',
                    template: "<div class=\"row\">\n    <div class=\"col-md-12\" *ngIf=\"tableObject\">\n        <h5 style=\"margin-top: 80px\" class=\"text-center\" *ngIf=\"tableObject.rows.length == 0\"> No data to display</h5>\n\n        <div *ngIf=\"tableObject\" style=\"padding: 3px\">\n            <!--<h4 *ngIf=\"tableObject.rows.length != 0\" class=\"text-center\" style=\"margin-bottom: 0px\">{{tableObject?.title}}</h4>-->\n            <table class=\"table table-bordered table-responsive table-condensed custom-table\" *ngIf=\"tableObject.rows.length != 0\">\n                <thead>\n                    <!--title-->\n                    <tr class=\"table-title\">\n                        <th [attr.colspan]=\"tableObject.rows[0].items.length\">\n                            <h4 style=\"margin: 0px\" class=\"text-center\">{{tableObject.subtitle}} </h4>\n                        </th>\n                    </tr>\n                    <!--headers-->\n                    <tr *ngFor=\"let header of tableObject.headers; let j = index\" class=\"header-column\">\n                        <th *ngIf=\"tableObject.hasParentOu\"></th>\n                        <th *ngFor=\"let table_column of tableObject.columns; let i = index\" style=\"text-align: center\">\n                            <span *ngIf=\"i==tableObject.columns.length-1 && j==tableObject.headers.length-1 && tableObject.titlesAvailable\">{{ tableObject.titles.rows[i] }} / {{ tableObject.titles.column[j]}}</span>\n                            <span *ngIf=\"i != tableObject.columns.length-1\">{{ tableObject.titles.rows[i] }}</span>\n                            <span *ngIf=\"j != tableObject.headers.length-1\">{{ tableObject.titles.column[j] }}</span>\n                        </th>\n                        <th *ngFor=\"let header_column of header.items; let i=index\" [colSpan]=\"header_column.span\" style=\"text-align: center\" (click)=\"sortData(tableObject,i+tableObject.columns.length,j+1==tableObject.headers.length)\">\n                            {{ header_column.name }}\n                            <span *ngIf=\"j+1==tableObject.headers.length && current_sorting[i+tableObject.columns.length] && sort_direction[i+tableObject.columns.length] == 'asc'\" class=\"glyphicon glyphicon-triangle-top pull-right\"></span>\n                            <span *ngIf=\"j+1==tableObject.headers.length && current_sorting[i+tableObject.columns.length] && sort_direction[i+tableObject.columns.length] == 'desc'\" class=\"glyphicon glyphicon-triangle-bottom pull-right\"></span>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody id=\"myPivotTable\">\n                    <tr *ngFor=\"let row of tableObject.rows\" [ngClass]=\"{'sub-total': row.sub_total}\">\n                        <td *ngFor=\"let header_column of row.items;let i = index\" [ngClass]=\"{'header-column': header_column.name != ''}\" style=\"text-align: center;vertical-align: middle\" [attr.rowspan]=\"header_column.row_span\" [style.background]=\"header_column.color\">\n                            {{ header_column.val }}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n\n\n        </div>\n    </div>\n</div>",
                    styles: [".table-item-container{overflow:hidden}.custom-table{display:table;border-style:none!important;width:100%}.custom-table td,.custom-table th{border:thin solid #f1f1f1}.custom-table>tbody>tr>td,.custom-table>thead>tr>th{font-size:13px!important}table tr th{background-color:rgba(238,238,238,.29);padding:4px;text-align:center}table tr td{padding:4px}table tr td:first-child{background-color:rgba(238,238,238,.29)}.table-title{font-size:13px;font-weight:600;text-align:center}"]
                },] },
    ];
    /** @nocollapse */
    TableItemComponent.ctorParameters = function () { return []; };
    TableItemComponent.propDecorators = {
        tableConfiguration: [{ type: Input }],
        analyticsObject: [{ type: Input }]
    };
    return TableItemComponent;
}());
export { TableItemComponent };
function TableItemComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    TableItemComponent.prototype.tableConfiguration;
    /** @type {?} */
    TableItemComponent.prototype.analyticsObject;
    /** @type {?} */
    TableItemComponent.prototype.tableObject;
    /** @type {?} */
    TableItemComponent.prototype.sort_direction;
    /** @type {?} */
    TableItemComponent.prototype.current_sorting;
}

//# sourceMappingURL=data:application/json;base64,