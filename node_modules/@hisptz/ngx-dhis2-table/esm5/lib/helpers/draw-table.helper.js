/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * @param {?} analyticsObject
 * @param {?} tableConfiguration
 * @return {?}
 */
export function drawTable(analyticsObject, tableConfiguration) {
    var /** @type {?} */ legendClasses = tableConfiguration.legendSet
        ? tableConfiguration.legendSet.legends
        : null;
    var /** @type {?} */ table = {
        headers: [],
        columns: [],
        rows: [],
        titles: {
            rows: [],
            column: []
        },
        titlesAvailable: false,
        hasParentOu: false
    };
    if (tableConfiguration.hasOwnProperty('title')) {
        table['title'] = tableConfiguration.title;
    }
    if (tableConfiguration.hasOwnProperty('subtitle')) {
        table['subtitle'] = tableConfiguration.subtitle;
    }
    if (tableConfiguration.displayList) {
        table.headers[0] = {
            items: [],
            style: ''
        };
        tableConfiguration.columns[tableConfiguration.columns.indexOf('pe')] =
            'eventdate';
        tableConfiguration.columns[tableConfiguration.columns.indexOf('ou')] =
            'ouname';
        try {
            for (var _a = tslib_1.__values(tableConfiguration.columns), _b = _a.next(); !_b.done; _b = _a.next()) {
                var item = _b.value;
                table.headers[0].items.push({
                    name: analyticsObject.headers[getTitleIndex(analyticsObject.headers, item)]
                        .column,
                    span: 1
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _d = tslib_1.__values(analyticsObject.rows), _e = _d.next(); !_e.done; _e = _d.next()) {
                var item = _e.value;
                var /** @type {?} */ column_items = [];
                try {
                    for (var _f = tslib_1.__values(tableConfiguration.columns), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var col = _g.value;
                        var /** @type {?} */ index = getTitleIndex(analyticsObject.headers, col);
                        column_items.push({
                            name: '',
                            display: true,
                            row_span: '1',
                            // color:getColor(item[index],)
                            val: item[index]
                        });
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_h = _f.return)) _h.call(_f);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                table.rows.push({
                    headers: [],
                    items: column_items
                });
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_j = _d.return)) _j.call(_d);
            }
            finally { if (e_3) throw e_3.error; }
        }
    }
    else {
        // add names to titles array
        if (tableConfiguration.showDimensionLabels) {
            table.titlesAvailable = true;
            try {
                for (var _k = tslib_1.__values(tableConfiguration.columns), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var item = _l.value;
                    table.titles.column.push(analyticsObject.headers[getTitleIndex(analyticsObject.headers, item)]
                        .column);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_m = _k.return)) _m.call(_k);
                }
                finally { if (e_4) throw e_4.error; }
            }
            try {
                for (var _o = tslib_1.__values(tableConfiguration.rows), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var item = _p.value;
                    table.titles.rows.push(analyticsObject.headers[getTitleIndex(analyticsObject.headers, item)]
                        .column);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_q = _o.return)) _q.call(_o);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        try {
            for (var _r = tslib_1.__values(tableConfiguration.columns), _s = _r.next(); !_s.done; _s = _r.next()) {
                var columnItem = _s.value;
                var /** @type {?} */ dimension = calculateColSpan(analyticsObject, tableConfiguration.columns, columnItem);
                var /** @type {?} */ currentColumnItems = prepareSingleCategories(analyticsObject, columnItem);
                var /** @type {?} */ headerItem = [];
                for (var /** @type {?} */ i = 0; i < dimension.duplication; i++) {
                    try {
                        for (var currentColumnItems_1 = tslib_1.__values(currentColumnItems), currentColumnItems_1_1 = currentColumnItems_1.next(); !currentColumnItems_1_1.done; currentColumnItems_1_1 = currentColumnItems_1.next()) {
                            var currentItem = currentColumnItems_1_1.value;
                            headerItem.push({
                                name: currentItem.name,
                                span: dimension.col_span,
                                type: currentItem.type,
                                id: currentItem.uid
                            });
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (currentColumnItems_1_1 && !currentColumnItems_1_1.done && (_t = currentColumnItems_1.return)) _t.call(currentColumnItems_1);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                }
                var /** @type {?} */ styles = '';
                if (tableConfiguration.hasOwnProperty('style')) {
                    if (tableConfiguration.styles.hasOwnProperty(columnItem)) {
                        styles = tableConfiguration.styles[columnItem];
                    }
                }
                table.headers.push({ items: headerItem, style: styles });
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_s && !_s.done && (_u = _r.return)) _u.call(_r);
            }
            finally { if (e_7) throw e_7.error; }
        }
        try {
            for (var _v = tslib_1.__values(tableConfiguration.rows), _w = _v.next(); !_w.done; _w = _v.next()) {
                var rowItem = _w.value;
                table.columns.push(rowItem);
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_w && !_w.done && (_x = _v.return)) _x.call(_v);
            }
            finally { if (e_8) throw e_8.error; }
        }
        // Preparing table columns
        var /** @type {?} */ column_length = tableConfiguration.columns.length;
        var /** @type {?} */ column_items_array = [];
        for (var /** @type {?} */ i = 0; i < column_length; i++) {
            var /** @type {?} */ currentRowItems = prepareSingleCategories(analyticsObject, tableConfiguration.columns[i]);
            column_items_array.push(currentRowItems);
        }
        var /** @type {?} */ table_columns_array = [];
        for (var /** @type {?} */ i = 0; i < column_items_array.length; i++) {
            if (table_columns_array.length === 0) {
                try {
                    for (var _y = tslib_1.__values(column_items_array[i]), _z = _y.next(); !_z.done; _z = _y.next()) {
                        var item = _z.value;
                        table_columns_array.push([item]);
                    }
                }
                catch (e_9_1) { e_9 = { error: e_9_1 }; }
                finally {
                    try {
                        if (_z && !_z.done && (_0 = _y.return)) _0.call(_y);
                    }
                    finally { if (e_9) throw e_9.error; }
                }
            }
            else {
                var /** @type {?} */ temp_arr = table_columns_array.concat();
                table_columns_array = [];
                try {
                    for (var temp_arr_1 = tslib_1.__values(temp_arr), temp_arr_1_1 = temp_arr_1.next(); !temp_arr_1_1.done; temp_arr_1_1 = temp_arr_1.next()) {
                        var item = temp_arr_1_1.value;
                        try {
                            for (var _1 = tslib_1.__values(column_items_array[i]), _2 = _1.next(); !_2.done; _2 = _1.next()) {
                                var val = _2.value;
                                if (item instanceof Array) {
                                    var /** @type {?} */ tempArr = Array.from(item);
                                    table_columns_array.push(tempArr.concat([val]));
                                }
                                else {
                                    table_columns_array.push([item, val]);
                                }
                            }
                        }
                        catch (e_10_1) { e_10 = { error: e_10_1 }; }
                        finally {
                            try {
                                if (_2 && !_2.done && (_3 = _1.return)) _3.call(_1);
                            }
                            finally { if (e_10) throw e_10.error; }
                        }
                    }
                }
                catch (e_11_1) { e_11 = { error: e_11_1 }; }
                finally {
                    try {
                        if (temp_arr_1_1 && !temp_arr_1_1.done && (_4 = temp_arr_1.return)) _4.call(temp_arr_1);
                    }
                    finally { if (e_11) throw e_11.error; }
                }
            }
        }
        // Preparing table rows
        var /** @type {?} */ rows_length = tableConfiguration.rows.length;
        var /** @type {?} */ row_items_array = [];
        for (var /** @type {?} */ i = 0; i < rows_length; i++) {
            var /** @type {?} */ dimension = calculateColSpan(analyticsObject, tableConfiguration.rows, tableConfiguration.rows[i]);
            var /** @type {?} */ currentRowItems = prepareSingleCategories(analyticsObject, tableConfiguration.rows[i]);
            row_items_array.push({ items: currentRowItems, dimensions: dimension });
        }
        var /** @type {?} */ table_rows_array = [];
        for (var /** @type {?} */ i = 0; i < row_items_array.length; i++) {
            if (table_rows_array.length === 0) {
                try {
                    for (var _5 = tslib_1.__values(row_items_array[i].items), _6 = _5.next(); !_6.done; _6 = _5.next()) {
                        var item = _6.value;
                        item.dimensions = row_items_array[i].dimensions;
                        table_rows_array.push([item]);
                    }
                }
                catch (e_12_1) { e_12 = { error: e_12_1 }; }
                finally {
                    try {
                        if (_6 && !_6.done && (_7 = _5.return)) _7.call(_5);
                    }
                    finally { if (e_12) throw e_12.error; }
                }
            }
            else {
                var /** @type {?} */ temp_arr = table_rows_array.concat();
                table_rows_array = [];
                try {
                    for (var temp_arr_2 = tslib_1.__values(temp_arr), temp_arr_2_1 = temp_arr_2.next(); !temp_arr_2_1.done; temp_arr_2_1 = temp_arr_2.next()) {
                        var item = temp_arr_2_1.value;
                        try {
                            for (var _8 = tslib_1.__values(row_items_array[i].items), _9 = _8.next(); !_9.done; _9 = _8.next()) {
                                var val = _9.value;
                                val.dimensions = row_items_array[i].dimensions;
                                if (item instanceof Array) {
                                    var /** @type {?} */ tempArr = Array.from(item);
                                    table_rows_array.push(tempArr.concat([val]));
                                }
                                else {
                                    table_rows_array.push([item, val]);
                                }
                            }
                        }
                        catch (e_13_1) { e_13 = { error: e_13_1 }; }
                        finally {
                            try {
                                if (_9 && !_9.done && (_10 = _8.return)) _10.call(_8);
                            }
                            finally { if (e_13) throw e_13.error; }
                        }
                    }
                }
                catch (e_14_1) { e_14 = { error: e_14_1 }; }
                finally {
                    try {
                        if (temp_arr_2_1 && !temp_arr_2_1.done && (_11 = temp_arr_2.return)) _11.call(temp_arr_2);
                    }
                    finally { if (e_14) throw e_14.error; }
                }
            }
        }
        var /** @type {?} */ counter = 0;
        if (table_rows_array.length !== 0) {
            try {
                for (var table_rows_array_1 = tslib_1.__values(table_rows_array), table_rows_array_1_1 = table_rows_array_1.next(); !table_rows_array_1_1.done; table_rows_array_1_1 = table_rows_array_1.next()) {
                    var rowItem = table_rows_array_1_1.value;
                    var /** @type {?} */ item = {
                        items: [],
                        headers: rowItem
                    };
                    try {
                        for (var rowItem_1 = tslib_1.__values(rowItem), rowItem_1_1 = rowItem_1.next(); !rowItem_1_1.done; rowItem_1_1 = rowItem_1.next()) {
                            var val = rowItem_1_1.value;
                            if (counter === 0 || counter % val.dimensions.col_span === 0) {
                                item.items.push({
                                    type: val.type,
                                    name: val.uid,
                                    val: val.name,
                                    row_span: val.dimensions.col_span,
                                    header: true
                                });
                            }
                        }
                    }
                    catch (e_15_1) { e_15 = { error: e_15_1 }; }
                    finally {
                        try {
                            if (rowItem_1_1 && !rowItem_1_1.done && (_12 = rowItem_1.return)) _12.call(rowItem_1);
                        }
                        finally { if (e_15) throw e_15.error; }
                    }
                    try {
                        for (var table_columns_array_1 = tslib_1.__values(table_columns_array), table_columns_array_1_1 = table_columns_array_1.next(); !table_columns_array_1_1.done; table_columns_array_1_1 = table_columns_array_1.next()) {
                            var colItem = table_columns_array_1_1.value;
                            var /** @type {?} */ dataItem = [];
                            try {
                                for (var rowItem_2 = tslib_1.__values(rowItem), rowItem_2_1 = rowItem_2.next(); !rowItem_2_1.done; rowItem_2_1 = rowItem_2.next()) {
                                    var val = rowItem_2_1.value;
                                    dataItem.push({ type: val.type, value: val.uid });
                                }
                            }
                            catch (e_16_1) { e_16 = { error: e_16_1 }; }
                            finally {
                                try {
                                    if (rowItem_2_1 && !rowItem_2_1.done && (_13 = rowItem_2.return)) _13.call(rowItem_2);
                                }
                                finally { if (e_16) throw e_16.error; }
                            }
                            try {
                                for (var colItem_1 = tslib_1.__values(colItem), colItem_1_1 = colItem_1.next(); !colItem_1_1.done; colItem_1_1 = colItem_1.next()) {
                                    var val = colItem_1_1.value;
                                    dataItem.push({ type: val.type, value: val.uid });
                                }
                            }
                            catch (e_17_1) { e_17 = { error: e_17_1 }; }
                            finally {
                                try {
                                    if (colItem_1_1 && !colItem_1_1.done && (_14 = colItem_1.return)) _14.call(colItem_1);
                                }
                                finally { if (e_17) throw e_17.error; }
                            }
                            item.items.push({
                                name: '',
                                val: getDataValue(analyticsObject, dataItem),
                                color: getDataValueColor(legendClasses, getDataValue(analyticsObject, dataItem)),
                                row_span: '1',
                                display: true
                            });
                        }
                    }
                    catch (e_18_1) { e_18 = { error: e_18_1 }; }
                    finally {
                        try {
                            if (table_columns_array_1_1 && !table_columns_array_1_1.done && (_15 = table_columns_array_1.return)) _15.call(table_columns_array_1);
                        }
                        finally { if (e_18) throw e_18.error; }
                    }
                    if (tableConfiguration.hasOwnProperty('hideEmptyRows') &&
                        tableConfiguration.hideEmptyRows) {
                        if (!checkZeros(tableConfiguration.rows.length, item.items)) {
                            table.rows.push(item);
                        }
                    }
                    else {
                        table.rows.push(item);
                    }
                    counter++;
                }
            }
            catch (e_19_1) { e_19 = { error: e_19_1 }; }
            finally {
                try {
                    if (table_rows_array_1_1 && !table_rows_array_1_1.done && (_16 = table_rows_array_1.return)) _16.call(table_rows_array_1);
                }
                finally { if (e_19) throw e_19.error; }
            }
        }
        else {
            var /** @type {?} */ item = {
                items: [],
                headers: []
            };
            try {
                for (var table_columns_array_2 = tslib_1.__values(table_columns_array), table_columns_array_2_1 = table_columns_array_2.next(); !table_columns_array_2_1.done; table_columns_array_2_1 = table_columns_array_2.next()) {
                    var colItem = table_columns_array_2_1.value;
                    var /** @type {?} */ dataItem = [];
                    try {
                        for (var colItem_2 = tslib_1.__values(colItem), colItem_2_1 = colItem_2.next(); !colItem_2_1.done; colItem_2_1 = colItem_2.next()) {
                            var val = colItem_2_1.value;
                            dataItem.push({ type: val.type, value: val.uid });
                        }
                    }
                    catch (e_20_1) { e_20 = { error: e_20_1 }; }
                    finally {
                        try {
                            if (colItem_2_1 && !colItem_2_1.done && (_17 = colItem_2.return)) _17.call(colItem_2);
                        }
                        finally { if (e_20) throw e_20.error; }
                    }
                    item.items.push({
                        name: '',
                        val: getDataValue(analyticsObject, dataItem),
                        row_span: '1',
                        display: true
                    });
                }
            }
            catch (e_21_1) { e_21 = { error: e_21_1 }; }
            finally {
                try {
                    if (table_columns_array_2_1 && !table_columns_array_2_1.done && (_18 = table_columns_array_2.return)) _18.call(table_columns_array_2);
                }
                finally { if (e_21) throw e_21.error; }
            }
            if (tableConfiguration.hasOwnProperty('hideEmptyRows') &&
                tableConfiguration.hideEmptyRows) {
                if (!checkZeros(tableConfiguration.rows.length, item.items)) {
                    table.rows.push(item);
                }
            }
            else {
                table.rows.push(item);
            }
        }
    }
    // todo improve total options to also work for event table
    // return _getSanitizedTableObject(table, tableConfiguration);
    return table;
    var e_1, _c, e_3, _j, e_2, _h, e_4, _m, e_5, _q, e_7, _u, e_6, _t, e_8, _x, e_9, _0, e_11, _4, e_10, _3, e_12, _7, e_14, _11, e_13, _10, e_19, _16, e_15, _12, e_18, _15, e_16, _13, e_17, _14, e_21, _18, e_20, _17;
}
/**
 * @param {?} analyticsObjectHeaders
 * @param {?} name
 * @return {?}
 */
function getTitleIndex(analyticsObjectHeaders, name) {
    var /** @type {?} */ index = 0;
    var /** @type {?} */ counter = 0;
    try {
        for (var analyticsObjectHeaders_1 = tslib_1.__values(analyticsObjectHeaders), analyticsObjectHeaders_1_1 = analyticsObjectHeaders_1.next(); !analyticsObjectHeaders_1_1.done; analyticsObjectHeaders_1_1 = analyticsObjectHeaders_1.next()) {
            var header = analyticsObjectHeaders_1_1.value;
            if (header.name === name) {
                index = counter;
            }
            counter++;
        }
    }
    catch (e_22_1) { e_22 = { error: e_22_1 }; }
    finally {
        try {
            if (analyticsObjectHeaders_1_1 && !analyticsObjectHeaders_1_1.done && (_a = analyticsObjectHeaders_1.return)) _a.call(analyticsObjectHeaders_1);
        }
        finally { if (e_22) throw e_22.error; }
    }
    return index;
    var e_22, _a;
}
/**
 * @param {?} analyticsObject
 * @param {?} array
 * @param {?} item
 * @return {?}
 */
function calculateColSpan(analyticsObject, array, item) {
    var /** @type {?} */ indexOfItem = array.indexOf(item);
    var /** @type {?} */ array_length = array.length;
    var /** @type {?} */ last_index = array_length - 1;
    var /** @type {?} */ dimensions = { col_span: 1, duplication: 1 };
    for (var /** @type {?} */ i = last_index; i > indexOfItem; i--) {
        var /** @type {?} */ arr = prepareSingleCategories(analyticsObject, array[i]);
        dimensions.col_span = dimensions.col_span * arr.length;
    }
    for (var /** @type {?} */ i = 0; i < indexOfItem; i++) {
        var /** @type {?} */ arr = prepareSingleCategories(analyticsObject, array[i]);
        dimensions.duplication = dimensions.duplication * arr.length;
    }
    return dimensions;
}
/**
 * @param {?} initialAnalytics
 * @param {?} itemIdentifier
 * @param {?=} preDefinedItems
 * @return {?}
 */
function prepareSingleCategories(initialAnalytics, itemIdentifier, preDefinedItems) {
    if (preDefinedItems === void 0) { preDefinedItems = []; }
    var /** @type {?} */ analyticsObject = sanitizeIncomingAnalytics(initialAnalytics);
    var /** @type {?} */ structure = [];
    if (preDefinedItems.length === 0) {
        try {
            for (var _a = tslib_1.__values(getMetadataArray(analyticsObject, itemIdentifier)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var val = _b.value;
                structure.push({
                    name: analyticsObject.metaData.names[val],
                    uid: val,
                    type: itemIdentifier
                });
            }
        }
        catch (e_23_1) { e_23 = { error: e_23_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_23) throw e_23.error; }
        }
    }
    if (preDefinedItems.length !== 0) {
        try {
            for (var preDefinedItems_1 = tslib_1.__values(preDefinedItems), preDefinedItems_1_1 = preDefinedItems_1.next(); !preDefinedItems_1_1.done; preDefinedItems_1_1 = preDefinedItems_1.next()) {
                var val = preDefinedItems_1_1.value;
                structure.push({
                    name: analyticsObject.metaData.names[val],
                    uid: val,
                    type: itemIdentifier
                });
            }
        }
        catch (e_24_1) { e_24 = { error: e_24_1 }; }
        finally {
            try {
                if (preDefinedItems_1_1 && !preDefinedItems_1_1.done && (_d = preDefinedItems_1.return)) _d.call(preDefinedItems_1);
            }
            finally { if (e_24) throw e_24.error; }
        }
    }
    return structure;
    var e_23, _c, e_24, _d;
}
/**
 * @param {?} analyticsObject
 * @return {?}
 */
function sanitizeIncomingAnalytics(analyticsObject) {
    return analyticsObject;
}
/**
 * @param {?} analyticsObject
 * @param {?} metadataType
 * @return {?}
 */
function getMetadataArray(analyticsObject, metadataType) {
    var /** @type {?} */ metadataArray = [];
    if (metadataType === 'dx') {
        metadataArray = analyticsObject.metaData.dx;
    }
    else if (metadataType === 'ou') {
        metadataArray = analyticsObject.metaData.ou;
    }
    else if (metadataType === 'co') {
        metadataArray = analyticsObject.metaData.co;
    }
    else if (metadataType === 'pe') {
        metadataArray = analyticsObject.metaData.pe;
    }
    else {
        metadataArray = analyticsObject.metaData[metadataType];
    }
    return metadataArray;
}
/**
 * @param {?} analyticsObject
 * @param {?=} dataItems
 * @return {?}
 */
function getDataValue(analyticsObject, dataItems) {
    if (dataItems === void 0) { dataItems = []; }
    var /** @type {?} */ num = null;
    try {
        for (var _a = tslib_1.__values(analyticsObject.rows), _b = _a.next(); !_b.done; _b = _a.next()) {
            var value = _b.value;
            var /** @type {?} */ counter = 0;
            try {
                for (var dataItems_1 = tslib_1.__values(dataItems), dataItems_1_1 = dataItems_1.next(); !dataItems_1_1.done; dataItems_1_1 = dataItems_1.next()) {
                    var item = dataItems_1_1.value;
                    if (value[getTitleIndex(analyticsObject.headers, item.type)] === item.value) {
                        counter++;
                    }
                }
            }
            catch (e_25_1) { e_25 = { error: e_25_1 }; }
            finally {
                try {
                    if (dataItems_1_1 && !dataItems_1_1.done && (_c = dataItems_1.return)) _c.call(dataItems_1);
                }
                finally { if (e_25) throw e_25.error; }
            }
            if (counter === dataItems.length) {
                if (isNaN(value[getTitleIndex(analyticsObject.headers, 'value')])) {
                    num = value[getTitleIndex(analyticsObject.headers, 'value')];
                }
                else {
                    num += parseFloat(value[getTitleIndex(analyticsObject.headers, 'value')]);
                }
            }
        }
    }
    catch (e_26_1) { e_26 = { error: e_26_1 }; }
    finally {
        try {
            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
        }
        finally { if (e_26) throw e_26.error; }
    }
    return num;
    var e_26, _d, e_25, _c;
}
/**
 * @param {?} legendClasses
 * @param {?} value
 * @return {?}
 */
function getDataValueColor(legendClasses, value) {
    var /** @type {?} */ color = '';
    if (!isNaN(value) && legendClasses) {
        legendClasses.forEach(function (legendClass) {
            if (legendClass.startValue <= value && legendClass.endValue > value) {
                color = legendClass.color;
            }
            // if (legendClass.startValue < value && legendClass.endValue >= value) {
            // }
        });
    }
    return color;
}
/**
 * @param {?} stating_length
 * @param {?} array
 * @return {?}
 */
function checkZeros(stating_length, array) {
    var /** @type {?} */ checker = true;
    for (var /** @type {?} */ i = stating_length; i < array.length; i++) {
        if (array[i].name === '' && array[i].val != null) {
            checker = false;
        }
    }
    return checker;
}

//# sourceMappingURL=data:application/json;base64,