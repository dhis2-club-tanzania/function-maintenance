/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} analyticsObject
 * @param {?} tableConfiguration
 * @return {?}
 */
export function drawTable(analyticsObject, tableConfiguration) {
    const /** @type {?} */ legendClasses = tableConfiguration.legendSet
        ? tableConfiguration.legendSet.legends
        : null;
    const /** @type {?} */ table = {
        headers: [],
        columns: [],
        rows: [],
        titles: {
            rows: [],
            column: []
        },
        titlesAvailable: false,
        hasParentOu: false
    };
    if (tableConfiguration.hasOwnProperty('title')) {
        table['title'] = tableConfiguration.title;
    }
    if (tableConfiguration.hasOwnProperty('subtitle')) {
        table['subtitle'] = tableConfiguration.subtitle;
    }
    if (tableConfiguration.displayList) {
        table.headers[0] = {
            items: [],
            style: ''
        };
        tableConfiguration.columns[tableConfiguration.columns.indexOf('pe')] =
            'eventdate';
        tableConfiguration.columns[tableConfiguration.columns.indexOf('ou')] =
            'ouname';
        for (const /** @type {?} */ item of tableConfiguration.columns) {
            table.headers[0].items.push({
                name: analyticsObject.headers[getTitleIndex(analyticsObject.headers, item)]
                    .column,
                span: 1
            });
        }
        for (const /** @type {?} */ item of analyticsObject.rows) {
            const /** @type {?} */ column_items = [];
            for (const /** @type {?} */ col of tableConfiguration.columns) {
                const /** @type {?} */ index = getTitleIndex(analyticsObject.headers, col);
                column_items.push({
                    name: '',
                    display: true,
                    row_span: '1',
                    // color:getColor(item[index],)
                    val: item[index]
                });
            }
            table.rows.push({
                headers: [],
                items: column_items
            });
        }
    }
    else {
        // add names to titles array
        if (tableConfiguration.showDimensionLabels) {
            table.titlesAvailable = true;
            for (const /** @type {?} */ item of tableConfiguration.columns) {
                table.titles.column.push(analyticsObject.headers[getTitleIndex(analyticsObject.headers, item)]
                    .column);
            }
            for (const /** @type {?} */ item of tableConfiguration.rows) {
                table.titles.rows.push(analyticsObject.headers[getTitleIndex(analyticsObject.headers, item)]
                    .column);
            }
        }
        for (const /** @type {?} */ columnItem of tableConfiguration.columns) {
            const /** @type {?} */ dimension = calculateColSpan(analyticsObject, tableConfiguration.columns, columnItem);
            const /** @type {?} */ currentColumnItems = prepareSingleCategories(analyticsObject, columnItem);
            const /** @type {?} */ headerItem = [];
            for (let /** @type {?} */ i = 0; i < dimension.duplication; i++) {
                for (const /** @type {?} */ currentItem of currentColumnItems) {
                    headerItem.push({
                        name: currentItem.name,
                        span: dimension.col_span,
                        type: currentItem.type,
                        id: currentItem.uid
                    });
                }
            }
            let /** @type {?} */ styles = '';
            if (tableConfiguration.hasOwnProperty('style')) {
                if (tableConfiguration.styles.hasOwnProperty(columnItem)) {
                    styles = tableConfiguration.styles[columnItem];
                }
            }
            table.headers.push({ items: headerItem, style: styles });
        }
        for (const /** @type {?} */ rowItem of tableConfiguration.rows) {
            table.columns.push(rowItem);
        }
        // Preparing table columns
        const /** @type {?} */ column_length = tableConfiguration.columns.length;
        const /** @type {?} */ column_items_array = [];
        for (let /** @type {?} */ i = 0; i < column_length; i++) {
            const /** @type {?} */ currentRowItems = prepareSingleCategories(analyticsObject, tableConfiguration.columns[i]);
            column_items_array.push(currentRowItems);
        }
        let /** @type {?} */ table_columns_array = [];
        for (let /** @type {?} */ i = 0; i < column_items_array.length; i++) {
            if (table_columns_array.length === 0) {
                for (const /** @type {?} */ item of column_items_array[i]) {
                    table_columns_array.push([item]);
                }
            }
            else {
                const /** @type {?} */ temp_arr = table_columns_array.concat();
                table_columns_array = [];
                for (const /** @type {?} */ item of temp_arr) {
                    for (const /** @type {?} */ val of column_items_array[i]) {
                        if (item instanceof Array) {
                            const /** @type {?} */ tempArr = Array.from(item);
                            table_columns_array.push(tempArr.concat([val]));
                        }
                        else {
                            table_columns_array.push([item, val]);
                        }
                    }
                }
            }
        }
        // Preparing table rows
        const /** @type {?} */ rows_length = tableConfiguration.rows.length;
        const /** @type {?} */ row_items_array = [];
        for (let /** @type {?} */ i = 0; i < rows_length; i++) {
            const /** @type {?} */ dimension = calculateColSpan(analyticsObject, tableConfiguration.rows, tableConfiguration.rows[i]);
            const /** @type {?} */ currentRowItems = prepareSingleCategories(analyticsObject, tableConfiguration.rows[i]);
            row_items_array.push({ items: currentRowItems, dimensions: dimension });
        }
        let /** @type {?} */ table_rows_array = [];
        for (let /** @type {?} */ i = 0; i < row_items_array.length; i++) {
            if (table_rows_array.length === 0) {
                for (const /** @type {?} */ item of row_items_array[i].items) {
                    item.dimensions = row_items_array[i].dimensions;
                    table_rows_array.push([item]);
                }
            }
            else {
                const /** @type {?} */ temp_arr = table_rows_array.concat();
                table_rows_array = [];
                for (const /** @type {?} */ item of temp_arr) {
                    for (const /** @type {?} */ val of row_items_array[i].items) {
                        val.dimensions = row_items_array[i].dimensions;
                        if (item instanceof Array) {
                            const /** @type {?} */ tempArr = Array.from(item);
                            table_rows_array.push(tempArr.concat([val]));
                        }
                        else {
                            table_rows_array.push([item, val]);
                        }
                    }
                }
            }
        }
        let /** @type {?} */ counter = 0;
        if (table_rows_array.length !== 0) {
            for (const /** @type {?} */ rowItem of table_rows_array) {
                const /** @type {?} */ item = {
                    items: [],
                    headers: rowItem
                };
                for (const /** @type {?} */ val of rowItem) {
                    if (counter === 0 || counter % val.dimensions.col_span === 0) {
                        item.items.push({
                            type: val.type,
                            name: val.uid,
                            val: val.name,
                            row_span: val.dimensions.col_span,
                            header: true
                        });
                    }
                }
                for (const /** @type {?} */ colItem of table_columns_array) {
                    const /** @type {?} */ dataItem = [];
                    for (const /** @type {?} */ val of rowItem) {
                        dataItem.push({ type: val.type, value: val.uid });
                    }
                    for (const /** @type {?} */ val of colItem) {
                        dataItem.push({ type: val.type, value: val.uid });
                    }
                    item.items.push({
                        name: '',
                        val: getDataValue(analyticsObject, dataItem),
                        color: getDataValueColor(legendClasses, getDataValue(analyticsObject, dataItem)),
                        row_span: '1',
                        display: true
                    });
                }
                if (tableConfiguration.hasOwnProperty('hideEmptyRows') &&
                    tableConfiguration.hideEmptyRows) {
                    if (!checkZeros(tableConfiguration.rows.length, item.items)) {
                        table.rows.push(item);
                    }
                }
                else {
                    table.rows.push(item);
                }
                counter++;
            }
        }
        else {
            const /** @type {?} */ item = {
                items: [],
                headers: []
            };
            for (const /** @type {?} */ colItem of table_columns_array) {
                const /** @type {?} */ dataItem = [];
                for (const /** @type {?} */ val of colItem) {
                    dataItem.push({ type: val.type, value: val.uid });
                }
                item.items.push({
                    name: '',
                    val: getDataValue(analyticsObject, dataItem),
                    row_span: '1',
                    display: true
                });
            }
            if (tableConfiguration.hasOwnProperty('hideEmptyRows') &&
                tableConfiguration.hideEmptyRows) {
                if (!checkZeros(tableConfiguration.rows.length, item.items)) {
                    table.rows.push(item);
                }
            }
            else {
                table.rows.push(item);
            }
        }
    }
    // todo improve total options to also work for event table
    // return _getSanitizedTableObject(table, tableConfiguration);
    return table;
}
/**
 * @param {?} analyticsObjectHeaders
 * @param {?} name
 * @return {?}
 */
function getTitleIndex(analyticsObjectHeaders, name) {
    let /** @type {?} */ index = 0;
    let /** @type {?} */ counter = 0;
    for (const /** @type {?} */ header of analyticsObjectHeaders) {
        if (header.name === name) {
            index = counter;
        }
        counter++;
    }
    return index;
}
/**
 * @param {?} analyticsObject
 * @param {?} array
 * @param {?} item
 * @return {?}
 */
function calculateColSpan(analyticsObject, array, item) {
    const /** @type {?} */ indexOfItem = array.indexOf(item);
    const /** @type {?} */ array_length = array.length;
    const /** @type {?} */ last_index = array_length - 1;
    const /** @type {?} */ dimensions = { col_span: 1, duplication: 1 };
    for (let /** @type {?} */ i = last_index; i > indexOfItem; i--) {
        const /** @type {?} */ arr = prepareSingleCategories(analyticsObject, array[i]);
        dimensions.col_span = dimensions.col_span * arr.length;
    }
    for (let /** @type {?} */ i = 0; i < indexOfItem; i++) {
        const /** @type {?} */ arr = prepareSingleCategories(analyticsObject, array[i]);
        dimensions.duplication = dimensions.duplication * arr.length;
    }
    return dimensions;
}
/**
 * @param {?} initialAnalytics
 * @param {?} itemIdentifier
 * @param {?=} preDefinedItems
 * @return {?}
 */
function prepareSingleCategories(initialAnalytics, itemIdentifier, preDefinedItems = []) {
    const /** @type {?} */ analyticsObject = sanitizeIncomingAnalytics(initialAnalytics);
    const /** @type {?} */ structure = [];
    if (preDefinedItems.length === 0) {
        for (const /** @type {?} */ val of getMetadataArray(analyticsObject, itemIdentifier)) {
            structure.push({
                name: analyticsObject.metaData.names[val],
                uid: val,
                type: itemIdentifier
            });
        }
    }
    if (preDefinedItems.length !== 0) {
        for (const /** @type {?} */ val of preDefinedItems) {
            structure.push({
                name: analyticsObject.metaData.names[val],
                uid: val,
                type: itemIdentifier
            });
        }
    }
    return structure;
}
/**
 * @param {?} analyticsObject
 * @return {?}
 */
function sanitizeIncomingAnalytics(analyticsObject) {
    return analyticsObject;
}
/**
 * @param {?} analyticsObject
 * @param {?} metadataType
 * @return {?}
 */
function getMetadataArray(analyticsObject, metadataType) {
    let /** @type {?} */ metadataArray = [];
    if (metadataType === 'dx') {
        metadataArray = analyticsObject.metaData.dx;
    }
    else if (metadataType === 'ou') {
        metadataArray = analyticsObject.metaData.ou;
    }
    else if (metadataType === 'co') {
        metadataArray = analyticsObject.metaData.co;
    }
    else if (metadataType === 'pe') {
        metadataArray = analyticsObject.metaData.pe;
    }
    else {
        metadataArray = analyticsObject.metaData[metadataType];
    }
    return metadataArray;
}
/**
 * @param {?} analyticsObject
 * @param {?=} dataItems
 * @return {?}
 */
function getDataValue(analyticsObject, dataItems = []) {
    let /** @type {?} */ num = null;
    for (const /** @type {?} */ value of analyticsObject.rows) {
        let /** @type {?} */ counter = 0;
        for (const /** @type {?} */ item of dataItems) {
            if (value[getTitleIndex(analyticsObject.headers, item.type)] === item.value) {
                counter++;
            }
        }
        if (counter === dataItems.length) {
            if (isNaN(value[getTitleIndex(analyticsObject.headers, 'value')])) {
                num = value[getTitleIndex(analyticsObject.headers, 'value')];
            }
            else {
                num += parseFloat(value[getTitleIndex(analyticsObject.headers, 'value')]);
            }
        }
    }
    return num;
}
/**
 * @param {?} legendClasses
 * @param {?} value
 * @return {?}
 */
function getDataValueColor(legendClasses, value) {
    let /** @type {?} */ color = '';
    if (!isNaN(value) && legendClasses) {
        legendClasses.forEach(legendClass => {
            if (legendClass.startValue <= value && legendClass.endValue > value) {
                color = legendClass.color;
            }
            // if (legendClass.startValue < value && legendClass.endValue >= value) {
            // }
        });
    }
    return color;
}
/**
 * @param {?} stating_length
 * @param {?} array
 * @return {?}
 */
function checkZeros(stating_length, array) {
    let /** @type {?} */ checker = true;
    for (let /** @type {?} */ i = stating_length; i < array.length; i++) {
        if (array[i].name === '' && array[i].val != null) {
            checker = false;
        }
    }
    return checker;
}

//# sourceMappingURL=data:application/json;base64,